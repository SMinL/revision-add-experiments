[
    {
        "nl_queries": "Give me a bar chart showing the total number of each minister , I want to list in asc by the total number .",
        "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "db_id": "party_people",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC'}",
        "record_name": "2519@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart showing the total number of each minister , I want to list in asc by the total number .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "total",
            "number",
            "of",
            "each",
            "minister",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "asc",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Minister",
            ",",
            "COUNT",
            "(",
            "Minister",
            ")",
            "FROM",
            "party",
            "GROUP",
            "BY",
            "Minister",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Minister",
            ")",
            "ASC"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.minister"
    },
    {
        "nl_queries": "Draw a bar chart of publisher versus the total number , and could you sort by the y-axis from low to high please ?",
        "VQL": "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
        "db_id": "book_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC'}",
        "record_name": "364@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of publisher versus the total number , and could you sort by the y-axis from low to high please ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "publisher",
            "versus",
            "the",
            "total",
            "number",
            ",",
            "and",
            "could",
            "you",
            "sort",
            "by",
            "the",
            "y-axis",
            "from",
            "low",
            "to",
            "high",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Publisher",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "publication",
            "GROUP",
            "BY",
            "Publisher",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table publication, columns = [*,Publication_ID, Book_ID, Publisher, Publication_Date, Price]",
        "choose_schema_rat_link": "publication.publisher"
    },
    {
        "nl_queries": "Bar chart x axis gender y axis the total number , I want to show by the x axis from high to low please .",
        "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC'}",
        "record_name": "1210@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis gender y axis the total number , I want to show by the x axis from high to low please .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "gender",
            "y",
            "axis",
            "the",
            "total",
            "number",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "DESC"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.gender"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , order in asc by the Y .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC'}",
        "record_name": "1604@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , order in asc by the Y .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show me about the distribution of name and meter_100 in a bar chart .",
        "VQL": "Visualize BAR SELECT name , meter_100 FROM swimmer",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , meter_100 FROM swimmer', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , meter_100 FROM swimmer'}",
        "record_name": "2915",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of name and meter_100 in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "meter_100",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT name , meter_100 FROM swimmer",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "meter_100",
            "FROM",
            "swimmer"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]",
        "choose_schema_rat_link": "swimmer.name@SEP@stadium.name@SEP@event.name@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For those employees whose first name does not contain the letter M , give me a line chart to show the hire date and the corresponding salaries , and show X-axis from high to low order .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1835@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%M%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose first name does not contain the letter M , give me a line chart to show the hire date and the corresponding salaries , and show X-axis from high to low order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "first",
            "name",
            "does",
            "not",
            "contain",
            "the",
            "letter",
            "M",
            ",",
            "give",
            "me",
            "a",
            "line",
            "chart",
            "to",
            "show",
            "the",
            "hire",
            "date",
            "and",
            "the",
            "corresponding",
            "salaries",
            ",",
            "and",
            "show",
            "X-axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'%M%'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.hire_date@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary"
    },
    {
        "nl_queries": "A bar chart about what are the number of rooms for each bed type ?",
        "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "db_id": "inn_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , count(*) FROM Rooms GROUP BY bedType', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType'}",
        "record_name": "1967",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart about what are the number of rooms for each bed type ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "about",
            "what",
            "are",
            "the",
            "number",
            "of",
            "rooms",
            "for",
            "each",
            "bed",
            "type",
            "?"
        ],
        "query": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.bedtype@SEP@reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds"
    },
    {
        "nl_queries": "Show different parties of people along with the number of people in each party with a bar chart .",
        "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
        "db_id": "debate",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Party , COUNT(*) FROM people GROUP BY Party', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party'}",
        "record_name": "1069",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different parties of people along with the number of people in each party with a bar chart .",
        "question_toks": [
            "Show",
            "different",
            "parties",
            "of",
            "people",
            "along",
            "with",
            "the",
            "number",
            "of",
            "people",
            "in",
            "each",
            "party",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Party",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Party"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, District, Name, Party, Age]",
        "choose_schema_rat_link": "people.party@SEP@people.people_id"
    },
    {
        "nl_queries": "How many documents in different starting date ? Return a line chart binning starting date by year interval .",
        "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations', 'binning': 'BIN Date_in_Location_From BY YEAR'}, 'VQL': 'Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR'}",
        "record_name": "771",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "year"
            ],
            "vis": 2
        },
        "question": "How many documents in different starting date ? Return a line chart binning starting date by year interval .",
        "question_toks": [
            "How",
            "many",
            "documents",
            "in",
            "different",
            "starting",
            "date",
            "?",
            "Return",
            "a",
            "line",
            "chart",
            "binning",
            "starting",
            "date",
            "by",
            "year",
            "interval",
            "."
        ],
        "query": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Location_From",
            ",",
            "COUNT",
            "(",
            "Date_in_Location_From",
            ")",
            "FROM",
            "Document_locations",
            "BIN",
            "Date_in_Location_From",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , order from low to high by the date_from please .",
        "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
        "db_id": "tracking_grants_for_research",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR'}",
        "record_name": "2964@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me the trend about the date_from attributes of all researchers , and bin the date into Year interval , order from low to high by the date_from please .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "date_from",
            "attributes",
            "of",
            "all",
            "researchers",
            ",",
            "and",
            "bin",
            "the",
            "date",
            "into",
            "Year",
            "interval",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "date_from",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff ORDER BY date_from ASC BIN date_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_from",
            ",",
            "COUNT",
            "(",
            "date_from",
            ")",
            "FROM",
            "Project_Staff",
            "ORDER",
            "BY",
            "date_from",
            "ASC",
            "BIN",
            "date_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
        "choose_schema_rat_link": "project_staff.date_from@SEP@project_staff.date_to"
    },
    {
        "nl_queries": "Give me a tendency forwhat is the average weight of cars each year ? , display in desc by the Year .",
        "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC",
        "db_id": "car_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC'}",
        "record_name": "415@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Give me a tendency forwhat is the average weight of cars each year ? , display in desc by the Year .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "tendency",
            "forwhat",
            "is",
            "the",
            "average",
            "weight",
            "of",
            "cars",
            "each",
            "year",
            "?",
            ",",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "Year",
            "."
        ],
        "query": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "avg",
            "(",
            "Weight",
            ")",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "Year",
            "DESC"
        ],
        "choose_schema": "Table cars_data, columns = [*,Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year]",
        "choose_schema_rat_link": "cars_data.weight@SEP@cars_data.year"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Sex and the average of Weight , and group by attribute Sex , I want to rank in asc by the y-axis .",
        "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC'}",
        "record_name": "383@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Sex and the average of Weight , and group by attribute Sex , I want to rank in asc by the y-axis .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "average",
            "of",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "AVG",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Weight",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "Show me about the distribution of Sex and the sum of Weight , and group by attribute Sex in a bar chart , list in desc by the x axis .",
        "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC'}",
        "record_name": "382@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Sex and the sum of Weight , and group by attribute Sex in a bar chart , list in desc by the x axis .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "sum",
            "of",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "Find the pixel aspect ratio and the nation of the tv channels that do not use English Show the number of different pixel aspect ratios with a bar chart , list X-axis from high to low order .",
        "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
        "db_id": "tvshow",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC\"}",
        "record_name": "3062@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the pixel aspect ratio and the nation of the tv channels that do not use English Show the number of different pixel aspect ratios with a bar chart , list X-axis from high to low order .",
        "question_toks": [
            "Find",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "the",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "Show",
            "the",
            "number",
            "of",
            "different",
            "pixel",
            "aspect",
            "ratios",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "X-axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "COUNT",
            "(",
            "Pixel_aspect_ratio_PAR",
            ")",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English'",
            "GROUP",
            "BY",
            "Pixel_aspect_ratio_PAR",
            "ORDER",
            "BY",
            "Pixel_aspect_ratio_PAR",
            "DESC"
        ],
        "choose_schema": "Table TV_Channel, columns = [*,id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "choose_schema_rat_link": "tv_channel.pixel_aspect_ratio_par@SEP@tv_series.channel@SEP@cartoon.channel"
    },
    {
        "nl_queries": "Show the product ids and the number of unique orders containing each product . Plot them as scatter chart .",
        "VQL": "Visualize SCATTER SELECT product_id , count(DISTINCT order_id) FROM Order_items",
        "db_id": "customers_and_invoices",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT product_id , count(DISTINCT order_id) FROM Order_items', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT product_id , count(DISTINCT order_id) FROM Order_items'}",
        "record_name": "966",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                44,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the product ids and the number of unique orders containing each product . Plot them as scatter chart .",
        "question_toks": [
            "Show",
            "the",
            "product",
            "ids",
            "and",
            "the",
            "number",
            "of",
            "unique",
            "orders",
            "containing",
            "each",
            "product",
            ".",
            "Plot",
            "them",
            "as",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT product_id , count(DISTINCT order_id) FROM Order_items",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "product_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "order_id",
            ")",
            "FROM",
            "Order_items"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size]@SEP@Table Order_Items, columns = [*,order_item_id, order_id, product_id, product_quantity, other_order_item_details]@SEP@Table Invoice_Line_Items, columns = [*,order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost]",
        "choose_schema_rat_link": "products.product_id@SEP@order_items.product_id@SEP@invoice_line_items.product_id@SEP@product_categories.product_type_description@SEP@products.product_name@SEP@products.product_color@SEP@products.product_size@SEP@order_items.product_quantity@SEP@invoice_line_items.product_title@SEP@invoice_line_items.product_quantity@SEP@invoice_line_items.product_price@SEP@orders.order_id@SEP@orders.order_details@SEP@invoices.order_id@SEP@order_items.order_item_id@SEP@order_items.order_id@SEP@invoice_line_items.order_item_id"
    },
    {
        "nl_queries": "Give me a histogram for what is the number of players who have points less than 30 for each position ? , and I want to sort bars in descending order .",
        "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
        "db_id": "sports_competition",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC'}",
        "record_name": "2818@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a histogram for what is the number of players who have points less than 30 for each position ? , and I want to sort bars in descending order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "histogram",
            "for",
            "what",
            "is",
            "the",
            "number",
            "of",
            "players",
            "who",
            "have",
            "points",
            "less",
            "than",
            "30",
            "for",
            "each",
            "position",
            "?",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "bars",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Position",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "points",
            "<",
            "30",
            "GROUP",
            "BY",
            "POSITION",
            "ORDER",
            "BY",
            "Position",
            "DESC"
        ],
        "choose_schema": "Table player, columns = [*,Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "choose_schema_rat_link": "player.player_id@SEP@player.points@SEP@player.position"
    },
    {
        "nl_queries": "Bar chart x axis document name y axis the number of document name , rank X-axis in descending order .",
        "VQL": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC'}",
        "record_name": "809@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis document name y axis the number of document name , rank X-axis in descending order .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "document",
            "name",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "document",
            "name",
            ",",
            "rank",
            "X-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Document_Name",
            ",",
            "COUNT",
            "(",
            "Document_Name",
            ")",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "Document_Name",
            "ORDER",
            "BY",
            "Document_Name",
            "DESC"
        ],
        "choose_schema": "Table Documents, columns = [*,Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]",
        "choose_schema_rat_link": "documents.document_name@SEP@documents.document_id@SEP@documents.document_type_code@SEP@documents.document_date@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "List the snatch score and clean jerk score of body builders in ascending order of snatch score in a scatter chart",
        "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Snatch , Clean_Jerk FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder'}",
        "record_name": "362",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score in a scatter chart",
        "question_toks": [
            "List",
            "the",
            "snatch",
            "score",
            "and",
            "clean",
            "jerk",
            "score",
            "of",
            "body",
            "builders",
            "in",
            "ascending",
            "order",
            "of",
            "snatch",
            "score",
            "in",
            "a",
            "scatter",
            "chart"
        ],
        "query": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Snatch",
            ",",
            "Clean_Jerk",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]",
        "choose_schema_rat_link": "body_builder.clean_jerk@SEP@body_builder.body_builder_id@SEP@body_builder.snatch"
    },
    {
        "nl_queries": "Show me about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time in a bar chart , list in descending by the x axis please .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC'}",
        "record_name": "1345@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time in a bar chart , list in descending by the x axis please .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "x",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Is_full_time",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "List the number of games in each season and group by away team in a group line chart , could you sort x-axis in desc order ?",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
        "record_name": "1484@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ],
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "List the number of games in each season and group by away team in a group line chart , could you sort x-axis in desc order ?",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "games",
            "in",
            "each",
            "season",
            "and",
            "group",
            "by",
            "away",
            "team",
            "in",
            "a",
            "group",
            "line",
            "chart",
            ",",
            "could",
            "you",
            "sort",
            "x-axis",
            "in",
            "desc",
            "order",
            "?"
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Away_team",
            ",",
            "Season",
            "ORDER",
            "BY",
            "Season",
            "DESC"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.away_team@SEP@injury_accident.game_id@SEP@game.season"
    },
    {
        "nl_queries": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart , and order from low to high by the X please .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2906@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart , and order from low to high by the X please .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\" , and count them by a bar chart , I want to sort in ascending by the y axis .",
        "VQL": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY",
        "db_id": "e_learning",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC', 'binning': 'BIN date_of_latest_logon BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY'}",
        "record_name": "1248@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Jaskolski\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Langosh\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                12,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\" , and count them by a bar chart , I want to sort in ascending by the y axis .",
        "question_toks": [
            "Find",
            "the",
            "latest",
            "logon",
            "date",
            "of",
            "the",
            "students",
            "whose",
            "family",
            "name",
            "is",
            "\"Jaskolski\"",
            "or",
            "\"Langosh\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_of_latest_logon",
            ",",
            "COUNT",
            "(",
            "date_of_latest_logon",
            ")",
            "FROM",
            "Students",
            "WHERE",
            "family_name",
            "=",
            "\"Jaskolski\"",
            "OR",
            "family_name",
            "=",
            "\"Langosh\"",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_of_latest_logon",
            ")",
            "ASC",
            "BIN",
            "date_of_latest_logon",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@course_authors_and_tutors.family_name@SEP@students.family_name@SEP@student_tests_taken.date_test_taken@SEP@students.student_id@SEP@student_course_enrolment.student_id"
    },
    {
        "nl_queries": "Show me a line chart of how how many booking end date change over the booking end date",
        "VQL": "Visualize LINE SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date', 'binning': ''}, 'VQL': 'Visualize LINE SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date'}",
        "record_name": "87",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show me a line chart of how how many booking end date change over the booking end date",
        "question_toks": [
            "Show",
            "me",
            "a",
            "line",
            "chart",
            "of",
            "how",
            "how",
            "many",
            "booking",
            "end",
            "date",
            "change",
            "over",
            "the",
            "booking",
            "end",
            "date"
        ],
        "query": "Visualize LINE SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings GROUP BY booking_end_date",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "booking_end_date",
            ",",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "GROUP",
            "BY",
            "booking_end_date"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.booking_end_date@SEP@apartment_bookings.booking_status_code@SEP@apartment_bookings.booking_start_date@SEP@guests.date_of_birth"
    },
    {
        "nl_queries": "A bar chart showing the minimum weight for each gender .",
        "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , min(weight) FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex'}",
        "record_name": "406",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart showing the minimum weight for each gender .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "showing",
            "the",
            "minimum",
            "weight",
            "for",
            "each",
            "gender",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "min",
            "(",
            "weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight"
    },
    {
        "nl_queries": "Bar chart x axis state y axis the number of state",
        "VQL": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state",
        "db_id": "voter_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state'}",
        "record_name": "3204",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis state y axis the number of state",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "state",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "state"
        ],
        "query": "Visualize BAR SELECT DISTINCT state , COUNT(state) FROM votes GROUP BY state",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DISTINCT",
            "state",
            ",",
            "COUNT",
            "(",
            "state",
            ")",
            "FROM",
            "votes",
            "GROUP",
            "BY",
            "state"
        ],
        "choose_schema": "Table AREA_CODE_STATE, columns = [*,area_code, state]@SEP@Table VOTES, columns = [*,vote_id, phone_number, state, contestant_number, created]",
        "choose_schema_rat_link": "area_code_state.state@SEP@votes.state"
    },
    {
        "nl_queries": "Find ACC_Regular_Season and School_ID , and visualize them by a bar chart , sort in descending by the bars .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC'}",
        "record_name": "3113@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find ACC_Regular_Season and School_ID , and visualize them by a bar chart , sort in descending by the bars .",
        "question_toks": [
            "Find",
            "ACC_Regular_Season",
            "and",
            "School_ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "in",
            "descending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "ACC_Regular_Season",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Give me a bar chart about the average of number_of_platforms in different locations , and rank total number in descending order .",
        "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC'}",
        "record_name": "3046@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart about the average of number_of_platforms in different locations , and rank total number in descending order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "average",
            "of",
            "number_of_platforms",
            "in",
            "different",
            "locations",
            ",",
            "and",
            "rank",
            "total",
            "number",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location@SEP@station.total_passengers"
    },
    {
        "nl_queries": "Find meter_200 and the amount of meter_200 , and group by attribute meter_200 , and visualize them by a bar chart , rank in desc by the total number .",
        "VQL": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY COUNT(meter_200) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY COUNT(meter_200) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY COUNT(meter_200) DESC'}",
        "record_name": "2929@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find meter_200 and the amount of meter_200 , and group by attribute meter_200 , and visualize them by a bar chart , rank in desc by the total number .",
        "question_toks": [
            "Find",
            "meter_200",
            "and",
            "the",
            "amount",
            "of",
            "meter_200",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "in",
            "desc",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200 ORDER BY COUNT(meter_200) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "COUNT",
            "(",
            "meter_200",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "meter_200",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Draw a scatterplot of school id vs all_games_percent where school id is on the x-axis and points are colored by All_Home",
        "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3078",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatterplot of school id vs all_games_percent where school id is on the x-axis and points are colored by All_Home",
        "question_toks": [
            "Draw",
            "a",
            "scatterplot",
            "of",
            "school",
            "id",
            "vs",
            "all_games_percent",
            "where",
            "school",
            "id",
            "is",
            "on",
            "the",
            "x-axis",
            "and",
            "points",
            "are",
            "colored",
            "by",
            "All_Home"
        ],
        "query": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.school_id@SEP@university.school_id@SEP@university.school"
    },
    {
        "nl_queries": "Find Nationality and the amount of Nationality , and group by attribute Nationality , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality'}",
        "record_name": "2928",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find Nationality and the amount of Nationality , and group by attribute Nationality , and visualize them by a bar chart .",
        "question_toks": [
            "Find",
            "Nationality",
            "and",
            "the",
            "amount",
            "of",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality"
    },
    {
        "nl_queries": "Return a histogram on how old is the average person for each job ? , and display y axis in asc order .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC'}",
        "record_name": "2459@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on how old is the average person for each job ? , and display y axis in asc order .",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "how",
            "old",
            "is",
            "the",
            "average",
            "person",
            "for",
            "each",
            "job",
            "?",
            ",",
            "and",
            "display",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.job"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_700 and meter_100 .",
        "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , meter_100 FROM swimmer', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , meter_100 FROM swimmer'}",
        "record_name": "2925",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_700 and meter_100 .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_700",
            "and",
            "meter_100",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "meter_100",
            "FROM",
            "swimmer"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "List the dates and vote percents of elections in a bar chart , and I want to order by the y-axis in desc .",
        "VQL": "Visualize BAR SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC",
        "db_id": "election_representative",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC'}",
        "record_name": "1326@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the dates and vote percents of elections in a bar chart , and I want to order by the y-axis in desc .",
        "question_toks": [
            "List",
            "the",
            "dates",
            "and",
            "vote",
            "percents",
            "of",
            "elections",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "y-axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date",
            ",",
            "Vote_Percent",
            "FROM",
            "election",
            "ORDER",
            "BY",
            "Vote_Percent",
            "DESC"
        ],
        "choose_schema": "Table election, columns = [*,Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place]",
        "choose_schema_rat_link": "election.vote_percent@SEP@election.date@SEP@election.votes@SEP@election.election_id"
    },
    {
        "nl_queries": "Please give me a bar chart that bins the installation date of stations into the day of week interval as the X-axis , and count for showing how many stations are installed each year , display by the Y-axis in descending .",
        "VQL": "Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC BIN installation_date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC', 'binning': 'BIN installation_date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC BIN installation_date BY WEEKDAY'}",
        "record_name": "318@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                7,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Please give me a bar chart that bins the installation date of stations into the day of week interval as the X-axis , and count for showing how many stations are installed each year , display by the Y-axis in descending .",
        "question_toks": [
            "Please",
            "give",
            "me",
            "a",
            "bar",
            "chart",
            "that",
            "bins",
            "the",
            "installation",
            "date",
            "of",
            "stations",
            "into",
            "the",
            "day",
            "of",
            "week",
            "interval",
            "as",
            "the",
            "X-axis",
            ",",
            "and",
            "count",
            "for",
            "showing",
            "how",
            "many",
            "stations",
            "are",
            "installed",
            "each",
            "year",
            ",",
            "display",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT installation_date , COUNT(installation_date) FROM station  ORDER BY COUNT(installation_date) DESC BIN installation_date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "installation_date",
            ",",
            "COUNT",
            "(",
            "installation_date",
            ")",
            "FROM",
            "station",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "installation_date",
            ")",
            "DESC",
            "BIN",
            "installation_date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table station, columns = [*,id, name, lat, long, dock_count, city, installation_date]",
        "choose_schema_rat_link": "station.installation_date@SEP@weather.date@SEP@status.station_id"
    },
    {
        "nl_queries": "Compare the total number of captains with different classes using a bar graph , show by the Class in ascending .",
        "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC'}",
        "record_name": "2753@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Compare the total number of captains with different classes using a bar graph , show by the Class in ascending .",
        "question_toks": [
            "Compare",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "with",
            "different",
            "classes",
            "using",
            "a",
            "bar",
            "graph",
            ",",
            "show",
            "by",
            "the",
            "Class",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "COUNT",
            "(",
            "Class",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Class",
            "ORDER",
            "BY",
            "Class",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "What are the names and the accumulated prices of all products in the store Plot them as a bar chart , I want to show by the x-axis in ascending please .",
        "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC'}",
        "record_name": "2178@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names and the accumulated prices of all products in the store Plot them as a bar chart , I want to show by the x-axis in ascending please .",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "the",
            "accumulated",
            "prices",
            "of",
            "all",
            "products",
            "in",
            "the",
            "store",
            "Plot",
            "them",
            "as",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "x-axis",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "SUM",
            "(",
            "Price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Nationality and the average of ID , and group by attribute Nationality , and I want to display in ascending by the x axis .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2907@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Nationality and the average of ID , and group by attribute Nationality , and I want to display in ascending by the x axis .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "average",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "How many sections does each course has Visualize by bar chart , could you display in ascending by the X-axis please ?",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC'}",
        "record_name": "553@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many sections does each course has Visualize by bar chart , could you display in ascending by the X-axis please ?",
        "question_toks": [
            "How",
            "many",
            "sections",
            "does",
            "each",
            "course",
            "has",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code",
            "ORDER",
            "BY",
            "CRS_CODE",
            "ASC"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "class.crs_code@SEP@course.crs_code@SEP@course.crs_description@SEP@course.crs_credit"
    },
    {
        "nl_queries": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0 in a scatter chart",
        "VQL": "Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
        "db_id": "tracking_share_transactions",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id'}",
        "record_name": "3024",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"SALE\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0 in a scatter chart",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "transactions",
            "with",
            "transaction",
            "type",
            "code",
            "\"SALE\"",
            "for",
            "different",
            "investors",
            "if",
            "it",
            "is",
            "larger",
            "than",
            "0",
            "in",
            "a",
            "scatter",
            "chart"
        ],
        "query": "Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" GROUP BY investor_id",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "investor_id",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "\"SALE\"",
            "GROUP",
            "BY",
            "investor_id"
        ],
        "choose_schema": "Table Investors, columns = [*,investor_id, Investor_details]@SEP@Table Lots, columns = [*,lot_id, investor_id, lot_details]@SEP@Table Ref_Transaction_Types, columns = [*,transaction_type_code, transaction_type_description]@SEP@Table Transactions, columns = [*,transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "choose_schema_rat_link": "transactions.transaction_type_code@SEP@transactions.transaction_id@SEP@transactions_lots.transaction_id@SEP@sales.sales_transaction_id@SEP@sales.sales_details@SEP@investors.investor_id@SEP@investors.investor_details@SEP@lots.investor_id@SEP@transactions.investor_id"
    },
    {
        "nl_queries": "Show the names and total passengers for all train stations not in London with a bar chart .",
        "VQL": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
        "db_id": "train_station",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'\"}",
        "record_name": "3050",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"London\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the names and total passengers for all train stations not in London with a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "names",
            "and",
            "total",
            "passengers",
            "for",
            "all",
            "train",
            "stations",
            "not",
            "in",
            "London",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Total_Passengers",
            "FROM",
            "station",
            "WHERE",
            "LOCATION",
            "!",
            "=",
            "'London'"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]@SEP@Table train, columns = [*,Train_ID, Name, Time, Service]",
        "choose_schema_rat_link": "station.total_passengers@SEP@station.name@SEP@train.name@SEP@train.train_id@SEP@train_station.train_id@SEP@station.station_id@SEP@train_station.station_id"
    },
    {
        "nl_queries": "What is the number of singers for each country ? Show a bar chart , and I want to rank y-axis in desc order .",
        "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
        "db_id": "concert_singer",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC'}",
        "record_name": "693@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of singers for each country ? Show a bar chart , and I want to rank y-axis in desc order .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "singers",
            "for",
            "each",
            "country",
            "?",
            "Show",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "y-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Country",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Country",
            ")",
            "DESC"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.singer_id@SEP@singer_in_concert.singer_id@SEP@singer.country"
    },
    {
        "nl_queries": "Find All_Road and Team_ID , and visualize them by a bar chart , I want to order y axis from high to low order .",
        "VQL": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID DESC'}",
        "record_name": "3116@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Road and Team_ID , and visualize them by a bar chart , I want to order y axis from high to low order .",
        "question_toks": [
            "Find",
            "All_Road",
            "and",
            "Team_ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "order",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_ID",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "List the grape and winery of the wines whose price is bigger than 100 , the x-axis is winery and group the grape , and y-axis is the number of wineries , and display by the total number from low to high .",
        "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
        "db_id": "wine_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC'}",
        "record_name": "3235@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    100.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ],
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the grape and winery of the wines whose price is bigger than 100 , the x-axis is winery and group the grape , and y-axis is the number of wineries , and display by the total number from low to high .",
        "question_toks": [
            "List",
            "the",
            "grape",
            "and",
            "winery",
            "of",
            "the",
            "wines",
            "whose",
            "price",
            "is",
            "bigger",
            "than",
            "100",
            ",",
            "the",
            "x-axis",
            "is",
            "winery",
            "and",
            "group",
            "the",
            "grape",
            ",",
            "and",
            "y-axis",
            "is",
            "the",
            "number",
            "of",
            "wineries",
            ",",
            "and",
            "display",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Winery",
            ",",
            "COUNT",
            "(",
            "Winery",
            ")",
            "FROM",
            "WINE",
            "WHERE",
            "Price",
            ">",
            "100",
            "GROUP",
            "BY",
            "Grape",
            ",",
            "Winery",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Winery",
            ")",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape@SEP@wine.winery@SEP@wine.price"
    },
    {
        "nl_queries": "Find All_Road and School_ID , and visualize them by a bar chart , could you show y-axis in desc order please ?",
        "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC'}",
        "record_name": "3117@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Road and School_ID , and visualize them by a bar chart , could you show y-axis in desc order please ?",
        "question_toks": [
            "Find",
            "All_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "show",
            "y-axis",
            "in",
            "desc",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "School_ID",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "What is the average age for each gender of student ? Return a bar chart , and order by the total number in descending .",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC'}",
        "record_name": "1237@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average age for each gender of student ? Return a bar chart , and order by the total number in descending .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "gender",
            "of",
            "student",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "by",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@dorm.gender@SEP@student.stuid@SEP@dorm.student_capacity@SEP@lives_in.stuid"
    },
    {
        "nl_queries": "Show the proportion of the total number of passengers in each location with a pie chart .",
        "VQL": "Visualize PIE SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION",
        "db_id": "train_station",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION'}",
        "record_name": "3054",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the proportion of the total number of passengers in each location with a pie chart .",
        "question_toks": [
            "Show",
            "the",
            "proportion",
            "of",
            "the",
            "total",
            "number",
            "of",
            "passengers",
            "in",
            "each",
            "location",
            "with",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Location",
            ",",
            "sum",
            "(",
            "total_passengers",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.total_passengers@SEP@station.location"
    },
    {
        "nl_queries": "How many documents in different ending date ? Return a line chart grouping by ending date , and display in desc by the X .",
        "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC'}",
        "record_name": "773@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "How many documents in different ending date ? Return a line chart grouping by ending date , and display in desc by the X .",
        "question_toks": [
            "How",
            "many",
            "documents",
            "in",
            "different",
            "ending",
            "date",
            "?",
            "Return",
            "a",
            "line",
            "chart",
            "grouping",
            "by",
            "ending",
            "date",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Locaton_To",
            ",",
            "COUNT",
            "(",
            "Date_in_Locaton_To",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Date_in_Locaton_To",
            "ORDER",
            "BY",
            "Date_in_Locaton_To",
            "DESC"
        ],
        "choose_schema": "Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "Scatterplot of all_games_percent vs acc percent by All_Home",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3097",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Scatterplot of all_games_percent vs acc percent by All_Home",
        "question_toks": [
            "Scatterplot",
            "of",
            "all_games_percent",
            "vs",
            "acc",
            "percent",
            "by",
            "All_Home"
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_percent@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex , and display in ascending by the Y .",
        "VQL": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC'}",
        "record_name": "380@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Sex and the average of Height , and group by attribute Sex , and display in ascending by the Y .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "average",
            "of",
            "Height",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , AVG(Height) FROM people GROUP BY Sex ORDER BY AVG(Height) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "AVG",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Height",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.height"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the amount of hire_date bin hire_date by time , list by the Y from low to high please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1538@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the amount of hire_date bin hire_date by time , list by the Y from low to high please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "amount",
            "of",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "list",
            "by",
            "the",
            "Y",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , give me the comparison about price over the name , and sort Price in descending order .",
        "VQL": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC'}",
        "record_name": "2191@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , give me the comparison about price over the name , and sort Price in descending order .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "price",
            "over",
            "the",
            "name",
            ",",
            "and",
            "sort",
            "Price",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Price",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Price",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "Draw a scatter chart about the correlation between Team_ID and All_Games_Percent .",
        "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match'}",
        "record_name": "3106",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatter chart about the correlation between Team_ID and All_Games_Percent .",
        "question_toks": [
            "Draw",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "All_Games_Percent",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "List all the possible ways to get to attractions , together with the number of attractions accessible by these methods Visualize by bar chart , list in desc by the bars .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC",
        "db_id": "cre_Theme_park",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC'}",
        "record_name": "888@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all the possible ways to get to attractions , together with the number of attractions accessible by these methods Visualize by bar chart , list in desc by the bars .",
        "question_toks": [
            "List",
            "all",
            "the",
            "possible",
            "ways",
            "to",
            "get",
            "to",
            "attractions",
            ",",
            "together",
            "with",
            "the",
            "number",
            "of",
            "attractions",
            "accessible",
            "by",
            "these",
            "methods",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There",
            "ORDER",
            "BY",
            "How_to_Get_There",
            "DESC"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "ref_attraction_types.attraction_type_code@SEP@ref_attraction_types.attraction_type_description@SEP@tourist_attractions.attraction_type_code"
    },
    {
        "nl_queries": "Show me a bar chart for what is the total rating of channel for each channel owner ? , and show in ascending by the total number .",
        "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC",
        "db_id": "program_share",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC'}",
        "record_name": "2625@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart for what is the total rating of channel for each channel owner ? , and show in ascending by the total number .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "total",
            "rating",
            "of",
            "channel",
            "for",
            "each",
            "channel",
            "owner",
            "?",
            ",",
            "and",
            "show",
            "in",
            "ascending",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Owner",
            ",",
            "sum",
            "(",
            "Rating_in_percent",
            ")",
            "FROM",
            "channel",
            "GROUP",
            "BY",
            "OWNER",
            "ORDER",
            "BY",
            "sum",
            "(",
            "Rating_in_percent",
            ")",
            "ASC"
        ],
        "choose_schema": "Table program, columns = [*,Program_ID, Name, Origin, Launch, Owner]@SEP@Table channel, columns = [*,Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]",
        "choose_schema_rat_link": "channel.rating_in_percent@SEP@channel.channel_id@SEP@broadcast.channel_id@SEP@broadcast_share.channel_id@SEP@program.owner@SEP@channel.owner"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart , I want to order total number of employee id in asc order .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC'}",
        "record_name": "1600@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart , I want to order total number of employee id in asc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "order",
            "total",
            "number",
            "of",
            "employee",
            "id",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3100",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of employee_id bin hire_date by time , and visualize them by a bar chart , order in desc by the Y .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1756@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of employee_id bin hire_date by time , and visualize them by a bar chart , order in desc by the Y .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those female students with age is older than 18 who are not majoring in 600 , tell me how many students of different first names using a bar chart , rank by the how many fname in desc please .",
        "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
        "db_id": "restaurant_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC\"}",
        "record_name": "2662@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    18.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    600.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those female students with age is older than 18 who are not majoring in 600 , tell me how many students of different first names using a bar chart , rank by the how many fname in desc please .",
        "question_toks": [
            "For",
            "those",
            "female",
            "students",
            "with",
            "age",
            "is",
            "older",
            "than",
            "18",
            "who",
            "are",
            "not",
            "majoring",
            "in",
            "600",
            ",",
            "tell",
            "me",
            "how",
            "many",
            "students",
            "of",
            "different",
            "first",
            "names",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "how",
            "many",
            "fname",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Fname",
            ",",
            "COUNT",
            "(",
            "Fname",
            ")",
            "FROM",
            "Student",
            "WHERE",
            "Age",
            ">",
            "18",
            "AND",
            "Major",
            "!",
            "=",
            "600",
            "AND",
            "Sex",
            "=",
            "'F'",
            "GROUP",
            "BY",
            "Fname",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Fname",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.fname@SEP@student.stuid@SEP@visits_restaurant.stuid@SEP@student.age@SEP@student.major"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1545",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "time",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between People_ID and Clean_Jerk .",
        "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Clean_Jerk FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder'}",
        "record_name": "361",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between People_ID and Clean_Jerk .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "People_ID",
            "and",
            "Clean_Jerk",
            "."
        ],
        "query": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Clean_Jerk",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "choose_schema_rat_link": "body_builder.people_id@SEP@people.people_id@SEP@body_builder.clean_jerk"
    },
    {
        "nl_queries": "What are the nationalities and their average ages of journalists Show me a bar chart , and list x-axis from low to high order .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "news_report",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2488@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the nationalities and their average ages of journalists Show me a bar chart , and list x-axis from low to high order .",
        "question_toks": [
            "What",
            "are",
            "the",
            "nationalities",
            "and",
            "their",
            "average",
            "ages",
            "of",
            "journalists",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "x-axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "Age",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.age@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "Show me the average of capacity by openning year in a histogram , and order in ascending by the the average of capacity .",
        "VQL": "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC'}",
        "record_name": "469@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the average of capacity by openning year in a histogram , and order in ascending by the the average of capacity .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "average",
            "of",
            "capacity",
            "by",
            "openning",
            "year",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "order",
            "in",
            "ascending",
            "by",
            "the",
            "the",
            "average",
            "of",
            "capacity",
            "."
        ],
        "query": "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Openning_year",
            ",",
            "AVG",
            "(",
            "Capacity",
            ")",
            "FROM",
            "cinema",
            "GROUP",
            "BY",
            "Openning_year",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Capacity",
            ")",
            "ASC"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "cinema.openning_year@SEP@schedule.show_times_per_day@SEP@cinema.capacity"
    },
    {
        "nl_queries": "What is average age of male for different job title . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job\"}",
        "record_name": "2461",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"male\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is average age of male for different job title . Visualize by bar chart .",
        "question_toks": [
            "What",
            "is",
            "average",
            "age",
            "of",
            "male",
            "for",
            "different",
            "job",
            "title",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "WHERE",
            "gender",
            "=",
            "'male'",
            "GROUP",
            "BY",
            "job"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by time , I want to show total number from high to low order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1542@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by time , I want to show total number from high to low order .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "I",
            "want",
            "to",
            "show",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "How many sections does each course has Visualize by bar chart , and list in descending by the X-axis .",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC'}",
        "record_name": "553@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many sections does each course has Visualize by bar chart , and list in descending by the X-axis .",
        "question_toks": [
            "How",
            "many",
            "sections",
            "does",
            "each",
            "course",
            "has",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code",
            "ORDER",
            "BY",
            "CRS_CODE",
            "DESC"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "class.crs_code@SEP@course.crs_code@SEP@course.crs_description@SEP@course.crs_credit"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Time and ID , could you show by the X-axis from high to low please ?",
        "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time , ID FROM swimmer ORDER BY Time DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC'}",
        "record_name": "2926@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Time and ID , could you show by the X-axis from high to low please ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Time",
            "and",
            "ID",
            ",",
            "could",
            "you",
            "show",
            "by",
            "the",
            "X-axis",
            "from",
            "high",
            "to",
            "low",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "Time",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.time@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Display a pie chart for what is minimum age for different job title ?",
        "VQL": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT job , min(age) FROM Person GROUP BY job', 'binning': ''}, 'VQL': 'Visualize PIE SELECT job , min(age) FROM Person GROUP BY job'}",
        "record_name": "2462",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Display a pie chart for what is minimum age for different job title ?",
        "question_toks": [
            "Display",
            "a",
            "pie",
            "chart",
            "for",
            "what",
            "is",
            "minimum",
            "age",
            "for",
            "different",
            "job",
            "title",
            "?"
        ],
        "query": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "job",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "Group and count the name attribute for visualizing a bar chart , and display in descending by the names .",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
        "db_id": "journal_committee",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC'}",
        "record_name": "2055@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Group and count the name attribute for visualizing a bar chart , and display in descending by the names .",
        "question_toks": [
            "Group",
            "and",
            "count",
            "the",
            "name",
            "attribute",
            "for",
            "visualizing",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "descending",
            "by",
            "the",
            "names",
            "."
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "editor",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table editor, columns = [*,Editor_ID, Name, Age]",
        "choose_schema_rat_link": "editor.name"
    },
    {
        "nl_queries": "Give me the comparison about the average of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and could you sort from low to high by the names ?",
        "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3101@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and could you sort from low to high by the names ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "School_ID",
            "over",
            "the",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "names",
            "?"
        ],
        "query": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "AVG",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Give me the dates when the max temperature was higher than 85 , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR'}",
        "record_name": "314",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "Give me the dates when the max temperature was higher than 85 , and count them by a bar chart",
        "question_toks": [
            "Give",
            "me",
            "the",
            "dates",
            "when",
            "the",
            "max",
            "temperature",
            "was",
            "higher",
            "than",
            "85",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.max_temperature_f@SEP@weather.date@SEP@weather.max_dew_point_f@SEP@weather.max_humidity@SEP@weather.max_sea_level_pressure_inches@SEP@weather.max_visibility_miles@SEP@weather.max_wind_speed_mph@SEP@weather.max_gust_speed_mph"
    },
    {
        "nl_queries": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English , I want to rank by the y-axis in descending .",
        "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
        "db_id": "tvshow",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC\"}",
        "record_name": "3062@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English , I want to rank by the y-axis in descending .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "comparison",
            "of",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "the",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "COUNT",
            "(",
            "Pixel_aspect_ratio_PAR",
            ")",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English'",
            "GROUP",
            "BY",
            "Pixel_aspect_ratio_PAR",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Pixel_aspect_ratio_PAR",
            ")",
            "DESC"
        ],
        "choose_schema": "Table TV_Channel, columns = [*,id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "choose_schema_rat_link": "tv_channel.pixel_aspect_ratio_par@SEP@tv_series.channel@SEP@cartoon.channel"
    },
    {
        "nl_queries": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , sort start_station_id from high to low order .",
        "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id DESC",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id DESC'}",
        "record_name": "310@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , sort start_station_id from high to low order .",
        "question_toks": [
            "what",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "all",
            "start",
            "stations",
            "that",
            "were",
            "the",
            "beginning",
            "of",
            "at",
            "least",
            "200",
            "trips",
            "?",
            ",",
            "sort",
            "start_station_id",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "start_station_name",
            ",",
            "start_station_id",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "start_station_id",
            "DESC"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "trip.start_station_name@SEP@trip.start_station_id@SEP@station.id@SEP@trip.id@SEP@station.name@SEP@trip.start_date@SEP@status.station_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Start_from and the average of Employee_ID bin start_from by weekday , and show in asc by the Y-axis .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC BIN Start_from BY WEEKDAY'}",
        "record_name": "1343@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Start_from and the average of Employee_ID bin start_from by weekday , and show in asc by the Y-axis .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "average",
            "of",
            "Employee_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "and",
            "show",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) ASC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between School_ID and All_Games_Percent , and group by attribute All_Games .",
        "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games'}",
        "record_name": "3176",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between School_ID and All_Games_Percent , and group by attribute All_Games .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "School_ID",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Games",
            "."
        ],
        "query": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Games"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "What are the names and distances for all airplanes . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT name , distance FROM Aircraft",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , distance FROM Aircraft', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , distance FROM Aircraft'}",
        "record_name": "1414",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names and distances for all airplanes . Visualize by bar chart .",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "distances",
            "for",
            "all",
            "airplanes",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT name , distance FROM Aircraft",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]@SEP@Table aircraft, columns = [*,aid, name, distance]@SEP@Table employee, columns = [*,eid, name, salary]",
        "choose_schema_rat_link": "aircraft.name@SEP@employee.name@SEP@flight.distance@SEP@aircraft.distance"
    },
    {
        "nl_queries": "Return a pie chart about the proportion of ACC_Road and the sum of Team_ID .",
        "VQL": "Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3131",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Return a pie chart about the proportion of ACC_Road and the sum of Team_ID .",
        "question_toks": [
            "Return",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            "."
        ],
        "query": "Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Show the average share count of transactions each each investor , ordered by average share count . Visualize by scatter chart .",
        "VQL": "Visualize SCATTER SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
        "db_id": "tracking_share_transactions",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)'}",
        "record_name": "2984",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the average share count of transactions each each investor , ordered by average share count . Visualize by scatter chart .",
        "question_toks": [
            "Show",
            "the",
            "average",
            "share",
            "count",
            "of",
            "transactions",
            "each",
            "each",
            "investor",
            ",",
            "ordered",
            "by",
            "average",
            "share",
            "count",
            ".",
            "Visualize",
            "by",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT investor_id , avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "investor_id",
            ",",
            "avg",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "investor_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "share_count",
            ")"
        ],
        "choose_schema": "Table Investors, columns = [*,investor_id, Investor_details]@SEP@Table Lots, columns = [*,lot_id, investor_id, lot_details]@SEP@Table Transactions, columns = [*,transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "choose_schema_rat_link": "transactions.share_count@SEP@transactions.transaction_id@SEP@transactions.transaction_type_code@SEP@transactions_lots.transaction_id@SEP@investors.investor_id@SEP@investors.investor_details@SEP@lots.investor_id@SEP@transactions.investor_id"
    },
    {
        "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , show Headquarters in descending order .",
        "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC'}",
        "record_name": "1498@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all headquarters and the number of companies in each headquarter with a bar chart , show Headquarters in descending order .",
        "question_toks": [
            "List",
            "all",
            "headquarters",
            "and",
            "the",
            "number",
            "of",
            "companies",
            "in",
            "each",
            "headquarter",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "show",
            "Headquarters",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters",
            "ORDER",
            "BY",
            "Headquarters",
            "DESC"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.headquarters@SEP@company.company@SEP@company.company_id@SEP@station_company.company_id"
    },
    {
        "nl_queries": "Show me about the distribution of All_Road and All_Games_Percent in a bar chart , and rank by the Y in asc .",
        "VQL": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC'}",
        "record_name": "3143@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of All_Road and All_Games_Percent in a bar chart , and rank by the Y in asc .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "All_Road",
            "and",
            "All_Games_Percent",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "Y",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Just show the first name of the employee and list their department's id in the Y-axis of the bar chart , and sort names in ascending order .",
        "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC'}",
        "record_name": "1898@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Just show the first name of the employee and list their department's id in the Y-axis of the bar chart , and sort names in ascending order .",
        "question_toks": [
            "Just",
            "show",
            "the",
            "first",
            "name",
            "of",
            "the",
            "employee",
            "and",
            "list",
            "their",
            "department's",
            "id",
            "in",
            "the",
            "Y-axis",
            "of",
            "the",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "names",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "FIRST_NAME",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , could you list by the x-axis from high to low ?",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC'}",
        "record_name": "1347@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , could you list by the x-axis from high to low ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "could",
            "you",
            "list",
            "by",
            "the",
            "x-axis",
            "from",
            "high",
            "to",
            "low",
            "?"
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Is_full_time",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "What is the relationship between Team_ID and All_Games_Percent , and group by attribute ACC_Regular_Season ?",
        "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season'}",
        "record_name": "3168",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between Team_ID and All_Games_Percent , and group by attribute ACC_Regular_Season ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "Team_ID",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Regular_Season",
            "?"
        ],
        "query": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Regular_Season"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Count different addresses of each school Show bar chart , and could you show by the total number from low to high ?",
        "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC'}",
        "record_name": "543@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            15,
                            true
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count different addresses of each school Show bar chart , and could you show by the total number from low to high ?",
        "question_toks": [
            "Count",
            "different",
            "addresses",
            "of",
            "each",
            "school",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "show",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "SCHOOL_CODE",
            ",",
            "count",
            "(",
            "DISTINCT",
            "dept_address",
            ")",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "count",
            "(",
            "DISTINCT",
            "dept_address",
            ")",
            "ASC"
        ],
        "choose_schema": "Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]",
        "choose_schema_rat_link": "department.school_code"
    },
    {
        "nl_queries": "Show me about the distribution of meter_600 and ID in a bar chart , and rank by the meter_600 from high to low .",
        "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC'}",
        "record_name": "2922@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_600 and ID in a bar chart , and rank by the meter_600 from high to low .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_600",
            "and",
            "ID",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "meter_600",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY meter_600 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_600",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_600",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Create a bar chart showing sum student capacity across gender , could you display from high to low by the names please ?",
        "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender DESC'}",
        "record_name": "1211@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing sum student capacity across gender , could you display from high to low by the names please ?",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "sum",
            "student",
            "capacity",
            "across",
            "gender",
            ",",
            "could",
            "you",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "names",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "sum",
            "(",
            "student_capacity",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "DESC"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.student_capacity@SEP@student.stuid@SEP@lives_in.stuid@SEP@dorm.gender"
    },
    {
        "nl_queries": "Find Sex and the sum of Weight , and group by attribute Sex , and visualize them by a bar chart , could you show Sex in desc order ?",
        "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC'}",
        "record_name": "382@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find Sex and the sum of Weight , and group by attribute Sex , and visualize them by a bar chart , could you show Sex in desc order ?",
        "question_toks": [
            "Find",
            "Sex",
            "and",
            "the",
            "sum",
            "of",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "show",
            "Sex",
            "in",
            "desc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , order in asc by the Y .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC'}",
        "record_name": "1604@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , order in asc by the Y .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "A line chart for giveing me the number of the dates when the max temperature was higher than 85 , I want to rank by the X in asc .",
        "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC'}",
        "record_name": "316@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "A line chart for giveing me the number of the dates when the max temperature was higher than 85 , I want to rank by the X in asc .",
        "question_toks": [
            "A",
            "line",
            "chart",
            "for",
            "giveing",
            "me",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "when",
            "the",
            "max",
            "temperature",
            "was",
            "higher",
            "than",
            "85",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "X",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 GROUP BY date ORDER BY date ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "GROUP",
            "BY",
            "date",
            "ORDER",
            "BY",
            "date",
            "ASC"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.max_temperature_f@SEP@weather.date@SEP@weather.max_dew_point_f@SEP@weather.max_humidity@SEP@weather.max_sea_level_pressure_inches@SEP@weather.max_visibility_miles@SEP@weather.max_wind_speed_mph@SEP@weather.max_gust_speed_mph"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and code , and could you rank by the x-axis in desc please ?",
        "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC'}",
        "record_name": "2189@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and code , and could you rank by the x-axis in desc please ?",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "code",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "by",
            "the",
            "x-axis",
            "in",
            "desc",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Code",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@manufacturers.code@SEP@products.code"
    },
    {
        "nl_queries": "Bar chart of the total number from each city , I want to display X-axis in ascending order .",
        "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC'}",
        "record_name": "1363@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of the total number from each city , I want to display X-axis in ascending order .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "the",
            "total",
            "number",
            "from",
            "each",
            "city",
            ",",
            "I",
            "want",
            "to",
            "display",
            "X-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "City",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee",
            "GROUP",
            "BY",
            "city",
            "ORDER",
            "BY",
            "City",
            "ASC"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]",
        "choose_schema_rat_link": "shop.number_products@SEP@employee.city"
    },
    {
        "nl_queries": "Show how many date departed from each date departed , and rank in desc by the x axis please .",
        "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC'}",
        "record_name": "1182@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show how many date departed from each date departed , and rank in desc by the x axis please .",
        "question_toks": [
            "Show",
            "how",
            "many",
            "date",
            "departed",
            "from",
            "each",
            "date",
            "departed",
            ",",
            "and",
            "rank",
            "in",
            "desc",
            "by",
            "the",
            "x",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_departed",
            ",",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "date_departed",
            "ORDER",
            "BY",
            "date_departed",
            "DESC"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.date_departed@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "Which tests have \"Pass\" results ? Return the dates when the tests were taken , and count them by a line chart",
        "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY",
        "db_id": "e_learning",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"', 'binning': 'BIN date_test_taken BY DAY'}, 'VQL': 'Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY'}",
        "record_name": "1285",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ],
                    "\"Pass\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                31,
                "day"
            ],
            "vis": 2
        },
        "question": "Which tests have \"Pass\" results ? Return the dates when the tests were taken , and count them by a line chart",
        "question_toks": [
            "Which",
            "tests",
            "have",
            "\"Pass\"",
            "results",
            "?",
            "Return",
            "the",
            "dates",
            "when",
            "the",
            "tests",
            "were",
            "taken",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "line",
            "chart"
        ],
        "query": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_test_taken",
            ",",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "FROM",
            "Student_Tests_Taken",
            "WHERE",
            "test_result",
            "=",
            "\"Pass\"",
            "BIN",
            "date_test_taken",
            "BY",
            "DAY"
        ],
        "choose_schema": "Table Student_Tests_Taken, columns = [*,registration_id, date_test_taken, test_result]",
        "choose_schema_rat_link": "student_tests_taken.test_result@SEP@students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@student_tests_taken.date_test_taken"
    },
    {
        "nl_queries": "Show the total number from each payment method code",
        "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "db_id": "driving_school",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code'}",
        "record_name": "1247",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    31,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the total number from each payment method code",
        "question_toks": [
            "Show",
            "the",
            "total",
            "number",
            "from",
            "each",
            "payment",
            "method",
            "code"
        ],
        "query": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "choose_schema": "Table Customer_Payments, columns = [*,customer_id, datetime_payment, payment_method_code, amount_payment]",
        "choose_schema_rat_link": "customer_payments.payment_method_code"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Start_from and the sum of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday , show y axis from high to low order .",
        "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY'}",
        "record_name": "1331@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Start_from and the sum of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday , show y axis from high to low order .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "show",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "DESC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Draw a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by time .",
        "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR'}",
        "record_name": "1349",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Draw a line chart about the change of the amount of Start_from over Start_from , and group by attribute Is_full_time and bin start_from by time .",
        "question_toks": [
            "Draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "the",
            "amount",
            "of",
            "Start_from",
            "over",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "time",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from"
    },
    {
        "nl_queries": "Give me the comparison about the average of Weight over the Sex , and group by attribute Sex by a bar chart , and show by the Y-axis from low to high .",
        "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC'}",
        "record_name": "383@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of Weight over the Sex , and group by attribute Sex by a bar chart , and show by the Y-axis from low to high .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Weight",
            "over",
            "the",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "by",
            "the",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "AVG",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Weight",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "Give me a bar chart showing the number of films for each director , and display bar in asc order .",
        "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC'}",
        "record_name": "443@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart showing the number of films for each director , and display bar in asc order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "number",
            "of",
            "films",
            "for",
            "each",
            "director",
            ",",
            "and",
            "display",
            "bar",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Directed_by",
            ",",
            "COUNT",
            "(",
            "Directed_by",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "Directed_by",
            "ORDER",
            "BY",
            "Directed_by",
            "ASC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code]",
        "choose_schema_rat_link": "schedule.show_times_per_day@SEP@film.number_in_season@SEP@film.film_id@SEP@schedule.film_id"
    },
    {
        "nl_queries": "Plot all_games_percent by grouped by all games as a bar graph , order y axis in desc order .",
        "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC'}",
        "record_name": "3140@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot all_games_percent by grouped by all games as a bar graph , order y axis in desc order .",
        "question_toks": [
            "Plot",
            "all_games_percent",
            "by",
            "grouped",
            "by",
            "all",
            "games",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "order",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.all_games@SEP@basketball_match.all_games_percent"
    },
    {
        "nl_queries": "Use a histogram to show the department's id and corresponding employees' first name .",
        "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT FIRST_NAME , DEPARTMENT_ID FROM employees', 'binning': ''}, 'VQL': 'Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees'}",
        "record_name": "1899",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Use a histogram to show the department's id and corresponding employees' first name .",
        "question_toks": [
            "Use",
            "a",
            "histogram",
            "to",
            "show",
            "the",
            "department's",
            "id",
            "and",
            "corresponding",
            "employees'",
            "first",
            "name",
            "."
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.employee_id@SEP@job_history.employee_id"
    },
    {
        "nl_queries": "How many apartment bookings in each year ? Show me a bar chart binning booking end date by year .",
        "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings', 'binning': 'BIN booking_end_date BY YEAR'}, 'VQL': 'Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY YEAR'}",
        "record_name": "83",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "year"
            ],
            "vis": 0
        },
        "question": "How many apartment bookings in each year ? Show me a bar chart binning booking end date by year .",
        "question_toks": [
            "How",
            "many",
            "apartment",
            "bookings",
            "in",
            "each",
            "year",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "binning",
            "booking",
            "end",
            "date",
            "by",
            "year",
            "."
        ],
        "query": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_end_date",
            ",",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "BIN",
            "booking_end_date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.apt_booking_id@SEP@view_unit_status.apt_booking_id@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@guests.date_of_birth"
    },
    {
        "nl_queries": "A bar chart showing the number of those wines with a price is bigger than 100 and order by year .",
        "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR'}",
        "record_name": "3230",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    100.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart showing the number of those wines with a price is bigger than 100 and order by year .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "showing",
            "the",
            "number",
            "of",
            "those",
            "wines",
            "with",
            "a",
            "price",
            "is",
            "bigger",
            "than",
            "100",
            "and",
            "order",
            "by",
            "year",
            "."
        ],
        "query": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Year",
            ",",
            "COUNT",
            "(",
            "Year",
            ")",
            "FROM",
            "WINE",
            "WHERE",
            "Price",
            ">",
            "100",
            "GROUP",
            "BY",
            "Year",
            "ORDER",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.year"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of salary over the hire_date bin hire_date by time , and rank by the Y-axis in descending please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1759@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of salary over the hire_date bin hire_date by time , and rank by the Y-axis in descending please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "salary",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "Show all the buildings along with the number of faculty members the buildings have in a pie chart .",
        "VQL": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building",
        "db_id": "activity_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Building , count(*) FROM Faculty GROUP BY building', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building'}",
        "record_name": "6",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    22,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show all the buildings along with the number of faculty members the buildings have in a pie chart .",
        "question_toks": [
            "Show",
            "all",
            "the",
            "buildings",
            "along",
            "with",
            "the",
            "number",
            "of",
            "faculty",
            "members",
            "the",
            "buildings",
            "have",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Building",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "building"
        ],
        "choose_schema": "Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "faculty.building@SEP@faculty_participates_in.facid@SEP@faculty.facid"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the change of salary over hire_date in a line chart , and could you rank by the X-axis from low to high ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC\"}",
        "record_name": "1790@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the change of salary over hire_date in a line chart , and could you rank by the X-axis from low to high ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "change",
            "of",
            "salary",
            "over",
            "hire_date",
            "in",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "by",
            "the",
            "X-axis",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , order by the x axis in desc .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1564@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , order by the x axis in desc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of meter_500 and ID , list by the meter_500 in descending .",
        "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC'}",
        "record_name": "2920@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of meter_500 and ID , list by the meter_500 in descending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_500",
            "and",
            "ID",
            ",",
            "list",
            "by",
            "the",
            "meter_500",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY meter_500 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_500",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_500",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show the number of flights in each destination city with a bar chart , rank by the X from low to high .",
        "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
        "db_id": "flight_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC'}",
        "record_name": "1407@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of flights in each destination city with a bar chart , rank by the X from low to high .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "flights",
            "in",
            "each",
            "destination",
            "city",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "X",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "destination",
            ",",
            "COUNT",
            "(",
            "destination",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "destination",
            "ASC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.flno@SEP@flight.destination"
    },
    {
        "nl_queries": "Show the number of apartment bookings in each weekday and bin booking start date by weekday with a bar chart .",
        "VQL": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings BIN booking_start_date BY WEEKDAY",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings', 'binning': 'BIN booking_start_date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings BIN booking_start_date BY WEEKDAY'}",
        "record_name": "86",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Show the number of apartment bookings in each weekday and bin booking start date by weekday with a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "apartment",
            "bookings",
            "in",
            "each",
            "weekday",
            "and",
            "bin",
            "booking",
            "start",
            "date",
            "by",
            "weekday",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings BIN booking_start_date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_start_date",
            ",",
            "COUNT",
            "(",
            "booking_start_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "BIN",
            "booking_start_date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.apt_booking_id@SEP@view_unit_status.apt_booking_id@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@guests.date_of_birth"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart , show Y-axis in desc order .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\"}",
        "record_name": "1780@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart , show Y-axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "show",
            "Y-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Find the maximum weight for each type of pet List the maximum weight and pet type Visualize by bar chart , and order by the x axis from high to low .",
        "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC'}",
        "record_name": "2558@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the maximum weight for each type of pet List the maximum weight and pet type Visualize by bar chart , and order by the x axis from high to low .",
        "question_toks": [
            "Find",
            "the",
            "maximum",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "pet",
            "type",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "max",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "PetType",
            "ORDER",
            "BY",
            "PetType",
            "DESC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.pettype@SEP@pets.weight@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pet_age"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time , and list y axis in desc order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1583@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time , and list y axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "list",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "What are the number of books for each year , ordered by year descending ? Return a bar chart .",
        "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM book_club  ORDER BY YEAR DESC BIN Year BY YEAR",
        "db_id": "culture_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Year , COUNT(Year) FROM book_club  ORDER BY YEAR DESC', 'binning': 'BIN Year BY YEAR'}, 'VQL': 'Visualize BAR SELECT Year , COUNT(Year) FROM book_club  ORDER BY YEAR DESC BIN Year BY YEAR'}",
        "record_name": "899",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                2,
                "year"
            ],
            "vis": 0
        },
        "question": "What are the number of books for each year , ordered by year descending ? Return a bar chart .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "books",
            "for",
            "each",
            "year",
            ",",
            "ordered",
            "by",
            "year",
            "descending",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Year , COUNT(Year) FROM book_club  ORDER BY YEAR DESC BIN Year BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Year",
            ",",
            "COUNT",
            "(",
            "Year",
            ")",
            "FROM",
            "book_club",
            "ORDER",
            "BY",
            "YEAR",
            "DESC",
            "BIN",
            "Year",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]@SEP@Table movie, columns = [*,movie_id, Title, Year, Director, Budget_million, Gross_worldwide]",
        "choose_schema_rat_link": "book_club.book_club_id@SEP@book_club.book_title@SEP@culture_company.book_club_id@SEP@book_club.year@SEP@movie.year"
    },
    {
        "nl_queries": "Show employee_id from each email , display y axis in asc order .",
        "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC'}",
        "record_name": "1909@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show employee_id from each email , display y axis in asc order .",
        "question_toks": [
            "Show",
            "employee_id",
            "from",
            "each",
            "email",
            ",",
            "display",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMPLOYEE_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "EMAIL",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "EMPLOYEE_ID",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.email"
    },
    {
        "nl_queries": "Create a bar chart showing capacity across name",
        "VQL": "Visualize BAR SELECT Name , Capacity FROM cinema",
        "db_id": "cinema",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Capacity FROM cinema', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Capacity FROM cinema'}",
        "record_name": "474",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing capacity across name",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "capacity",
            "across",
            "name"
        ],
        "query": "Visualize BAR SELECT Name , Capacity FROM cinema",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Capacity",
            "FROM",
            "cinema"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "schedule.show_times_per_day@SEP@cinema.capacity@SEP@cinema.name"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by time , and rank y axis from high to low order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1540@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by time , and rank y axis from high to low order .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "rank",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex , and could you display y axis in descending order ?",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC'}",
        "record_name": "376@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex , and could you display y axis in descending order ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "amount",
            "of",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "could",
            "you",
            "display",
            "y",
            "axis",
            "in",
            "descending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Sex",
            ")",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1345",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Draw a scatter chart about the correlation between School_ID and All_Games_Percent , and group by attribute All_Road .",
        "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road'}",
        "record_name": "3182",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatter chart about the correlation between School_ID and All_Games_Percent , and group by attribute All_Road .",
        "question_toks": [
            "Draw",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "School_ID",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Road",
            "."
        ],
        "query": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "List the number of enrolment students in each day and bin date of enrolment by weekday with a bar chart .",
        "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment', 'binning': 'BIN date_of_enrolment BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY'}",
        "record_name": "1299",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                28,
                "weekday"
            ],
            "vis": 0
        },
        "question": "List the number of enrolment students in each day and bin date of enrolment by weekday with a bar chart .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "enrolment",
            "students",
            "in",
            "each",
            "day",
            "and",
            "bin",
            "date",
            "of",
            "enrolment",
            "by",
            "weekday",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_of_enrolment",
            ",",
            "COUNT",
            "(",
            "date_of_enrolment",
            ")",
            "FROM",
            "Student_Course_Enrolment",
            "BIN",
            "date_of_enrolment",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Student_Course_Enrolment, columns = [*,registration_id, student_id, course_id, date_of_enrolment, date_of_completion]",
        "choose_schema_rat_link": "student_course_enrolment.date_of_enrolment@SEP@students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_completion@SEP@students.student_id@SEP@student_course_enrolment.student_id@SEP@student_tests_taken.date_test_taken"
    },
    {
        "nl_queries": "Create a bar chart showing the total number across rank , display Y in descending order .",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
        "db_id": "activity_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC'}",
        "record_name": "24@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing the total number across rank , display Y in descending order .",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "total",
            "number",
            "across",
            "rank",
            ",",
            "display",
            "Y",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "rank",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "faculty.rank"
    },
    {
        "nl_queries": "Show me the trend about the maximum price of wines for each year , order by the x-axis in ascending .",
        "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC'}",
        "record_name": "3256@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show me the trend about the maximum price of wines for each year , order by the x-axis in ascending .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "maximum",
            "price",
            "of",
            "wines",
            "for",
            "each",
            "year",
            ",",
            "order",
            "by",
            "the",
            "x-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "max",
            "(",
            "Price",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Year",
            "ORDER",
            "BY",
            "Year",
            "ASC"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.year"
    },
    {
        "nl_queries": "Show me about the correlation between Team_ID and School_ID , and group by attribute ACC_Road in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3094",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between Team_ID and School_ID , and group by attribute ACC_Road in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show me about the correlation between Instructor and DNO in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "db_id": "college_3",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Instructor , DNO FROM COURSE ORDER BY Credits', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits'}",
        "record_name": "672",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between Instructor and DNO in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "Instructor",
            "and",
            "DNO",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Instructor",
            ",",
            "DNO",
            "FROM",
            "COURSE",
            "ORDER",
            "BY",
            "Credits"
        ],
        "choose_schema": "Table Department, columns = [*,DNO, Division, DName, Room, Building, DPhone]@SEP@Table Member_of, columns = [*,FacID, DNO, Appt_Type]@SEP@Table Course, columns = [*,CID, CName, Credits, Instructor, Days, Hours, DNO]@SEP@Table Minor_in, columns = [*,StuID, DNO]",
        "choose_schema_rat_link": "course.instructor"
    },
    {
        "nl_queries": "Show me a scatter plot of people id and weight for .",
        "VQL": "Visualize SCATTER SELECT People_ID , Weight FROM people",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Weight FROM people', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Weight FROM people'}",
        "record_name": "391",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me a scatter plot of people id and weight for .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "scatter",
            "plot",
            "of",
            "people",
            "id",
            "and",
            "weight",
            "for",
            "."
        ],
        "query": "Visualize SCATTER SELECT People_ID , Weight FROM people",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Weight",
            "FROM",
            "people"
        ],
        "choose_schema": "Table candidate, columns = [*,Candidate_ID, People_ID, Poll_Source, Date, Support_rate, Consider_rate, Oppose_rate, Unsure_rate]@SEP@Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.weight"
    },
    {
        "nl_queries": "Find Start_from and the sum of Shop_ID bin start_from by weekday , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Shop_ID) FROM hiring', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY'}",
        "record_name": "1340",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Find Start_from and the sum of Shop_ID bin start_from by weekday , and visualize them by a bar chart .",
        "question_toks": [
            "Find",
            "Start_from",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Bar chart of sum crs credit from each dept code , list from high to low by the X .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC'}",
        "record_name": "586@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of sum crs credit from each dept code , list from high to low by the X .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "sum",
            "crs",
            "credit",
            "from",
            "each",
            "dept",
            "code",
            ",",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "sum",
            "(",
            "crs_credit",
            ")",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table EMPLOYEE, columns = [*,EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]@SEP@Table ENROLL, columns = [*,CLASS_CODE, STU_NUM, ENROLL_GRADE]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]"
    },
    {
        "nl_queries": "What is the code of each location and the number of documents in that location . Visualize by pie chart .",
        "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code'}",
        "record_name": "790",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "What is the code of each location and the number of documents in that location . Visualize by pie chart .",
        "question_toks": [
            "What",
            "is",
            "the",
            "code",
            "of",
            "each",
            "location",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "that",
            "location",
            ".",
            "Visualize",
            "by",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Location_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "location_code"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id"
    },
    {
        "nl_queries": "Find Name and Height , and visualize them by a bar chart , I want to sort bars in asc order .",
        "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Height FROM people ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC'}",
        "record_name": "394@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find Name and Height , and visualize them by a bar chart , I want to sort bars in asc order .",
        "question_toks": [
            "Find",
            "Name",
            "and",
            "Height",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "bars",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Height",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.name@SEP@people.height"
    },
    {
        "nl_queries": "For the average of Shop_ID , Start_from , visualize the trend .",
        "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR'}",
        "record_name": "1359",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "For the average of Shop_ID , Start_from , visualize the trend .",
        "question_toks": [
            "For",
            "the",
            "average",
            "of",
            "Shop_ID",
            ",",
            "Start_from",
            ",",
            "visualize",
            "the",
            "trend",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart .",
        "VQL": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
        "db_id": "tracking_grants_for_research",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR'}",
        "record_name": "2964",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "year"
            ],
            "vis": 2
        },
        "question": "When do all the researcher role staff start to work ? Bin the time into YEAR interval and count them with a line chart .",
        "question_toks": [
            "When",
            "do",
            "all",
            "the",
            "researcher",
            "role",
            "staff",
            "start",
            "to",
            "work",
            "?",
            "Bin",
            "the",
            "time",
            "into",
            "YEAR",
            "interval",
            "and",
            "count",
            "them",
            "with",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_from",
            ",",
            "COUNT",
            "(",
            "date_from",
            ")",
            "FROM",
            "Project_Staff",
            "BIN",
            "date_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
        "choose_schema_rat_link": "project_staff.role_code@SEP@staff_roles.role_code@SEP@staff_roles.role_description@SEP@project_staff.staff_id@SEP@research_staff.staff_id@SEP@research_staff.staff_details"
    },
    {
        "nl_queries": "Show me the correlation between the number of platforms and the number of total_passengers in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION'}",
        "record_name": "3055",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me the correlation between the number of platforms and the number of total_passengers in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "correlation",
            "between",
            "the",
            "number",
            "of",
            "platforms",
            "and",
            "the",
            "number",
            "of",
            "total_passengers",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "sum",
            "(",
            "number_of_platforms",
            ")",
            ",",
            "sum",
            "(",
            "total_passengers",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.total_passengers"
    },
    {
        "nl_queries": "I want to see trend the number of date in locaton to over date in locaton to by Location_Code , could you sort in descending by the Date_in_Locaton_To please ?",
        "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC'}",
        "record_name": "778@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ],
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "I want to see trend the number of date in locaton to over date in locaton to by Location_Code , could you sort in descending by the Date_in_Locaton_To please ?",
        "question_toks": [
            "I",
            "want",
            "to",
            "see",
            "trend",
            "the",
            "number",
            "of",
            "date",
            "in",
            "locaton",
            "to",
            "over",
            "date",
            "in",
            "locaton",
            "to",
            "by",
            "Location_Code",
            ",",
            "could",
            "you",
            "sort",
            "in",
            "descending",
            "by",
            "the",
            "Date_in_Locaton_To",
            "please",
            "?"
        ],
        "query": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Locaton_To",
            ",",
            "COUNT",
            "(",
            "Date_in_Locaton_To",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            ",",
            "Date_in_Locaton_To",
            "ORDER",
            "BY",
            "Date_in_Locaton_To",
            "DESC"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.date_in_locaton_to@SEP@document_locations.date_in_location_from@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.location_code"
    },
    {
        "nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "db_id": "cre_Theme_park",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There'}",
        "record_name": "888",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart .",
        "question_toks": [
            "Show",
            "different",
            "ways",
            "to",
            "get",
            "to",
            "attractions",
            "and",
            "the",
            "number",
            "of",
            "attractions",
            "that",
            "can",
            "be",
            "accessed",
            "in",
            "the",
            "corresponding",
            "way",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "ref_attraction_types.attraction_type_code@SEP@ref_attraction_types.attraction_type_description@SEP@tourist_attractions.attraction_type_code"
    },
    {
        "nl_queries": "What is the sum of capacity of cinemas open for each year ? Return a line chart , and could you display by the x-axis in ascending ?",
        "VQL": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC', 'binning': 'BIN Openning_year BY YEAR'}, 'VQL': 'Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR'}",
        "record_name": "470@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                10,
                "year"
            ],
            "vis": 2
        },
        "question": "What is the sum of capacity of cinemas open for each year ? Return a line chart , and could you display by the x-axis in ascending ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "sum",
            "of",
            "capacity",
            "of",
            "cinemas",
            "open",
            "for",
            "each",
            "year",
            "?",
            "Return",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "x-axis",
            "in",
            "ascending",
            "?"
        ],
        "query": "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Openning_year",
            ",",
            "SUM",
            "(",
            "Capacity",
            ")",
            "FROM",
            "cinema",
            "ORDER",
            "BY",
            "Openning_year",
            "ASC",
            "BIN",
            "Openning_year",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "cinema.capacity@SEP@cinema.cinema_id@SEP@schedule.cinema_id"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between Team_ID and School_ID , and group by attribute All_Road .",
        "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road'}",
        "record_name": "3178",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between Team_ID and School_ID , and group by attribute All_Road .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Road",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , and display in asc by the Y-axis .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC'}",
        "record_name": "2910@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , and display in asc by the Y-axis .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "and",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , and rank total number in descending order please .",
        "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC'}",
        "record_name": "2751@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart comparing the total number of captains in each rank , and rank total number in descending order please .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "comparing",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "in",
            "each",
            "rank",
            ",",
            "and",
            "rank",
            "total",
            "number",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "COUNT",
            "(",
            "Rank",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Rank",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Rank",
            ")",
            "DESC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a line chart shows the trend of department_id over hire_date , I want to show in asc by the HIRE_DATE .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC\"}",
        "record_name": "1557@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For all employees who have the letters D or S in their first name , a line chart shows the trend of department_id over hire_date , I want to show in asc by the HIRE_DATE .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "trend",
            "of",
            "department_id",
            "over",
            "hire_date",
            ",",
            "I",
            "want",
            "to",
            "show",
            "in",
            "asc",
            "by",
            "the",
            "HIRE_DATE",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1770",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by weekday .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of hire_date and the average of salary bin hire_date by time .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH'}",
        "record_name": "1585",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of hire_date and the average of salary bin hire_date by time .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show different teams of technicians and the number of technicians in each team . Show a pie chart .",
        "VQL": "Visualize PIE SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "db_id": "machine_repair",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Team , COUNT(*) FROM technician GROUP BY Team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Team , COUNT(*) FROM technician GROUP BY Team'}",
        "record_name": "2168",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show different teams of technicians and the number of technicians in each team . Show a pie chart .",
        "question_toks": [
            "Show",
            "different",
            "teams",
            "of",
            "technicians",
            "and",
            "the",
            "number",
            "of",
            "technicians",
            "in",
            "each",
            "team",
            ".",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "technician",
            "GROUP",
            "BY",
            "Team"
        ],
        "choose_schema": "Table machine, columns = [*,Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank]@SEP@Table technician, columns = [*,technician_id, Name, Team, Starting_Year, Age]",
        "choose_schema_rat_link": "machine.team@SEP@technician.team@SEP@technician.technician_id@SEP@repair_assignment.technician_id"
    },
    {
        "nl_queries": "Show me about the distribution of meter_200 and the amount of meter_200 , and group by attribute meter_200 in a bar chart .",
        "VQL": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200'}",
        "record_name": "2929",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_200 and the amount of meter_200 , and group by attribute meter_200 in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "amount",
            "of",
            "meter_200",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , COUNT(meter_200) FROM swimmer GROUP BY meter_200",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "COUNT",
            "(",
            "meter_200",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Show the average transaction amount for different transaction types , show in ascending by the X-axis .",
        "VQL": "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
        "db_id": "tracking_share_transactions",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC'}",
        "record_name": "3005@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the average transaction amount for different transaction types , show in ascending by the X-axis .",
        "question_toks": [
            "Show",
            "the",
            "average",
            "transaction",
            "amount",
            "for",
            "different",
            "transaction",
            "types",
            ",",
            "show",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "transaction_type_code",
            ",",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "transaction_type_code",
            "ORDER",
            "BY",
            "transaction_type_code",
            "ASC"
        ],
        "choose_schema": "Table Ref_Transaction_Types, columns = [*,transaction_type_code, transaction_type_description]@SEP@Table Transactions, columns = [*,transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "choose_schema_rat_link": "transactions.transaction_type_code@SEP@transactions.transaction_id@SEP@transactions_lots.transaction_id@SEP@transactions.amount_of_transaction"
    },
    {
        "nl_queries": "Return a pie chart on what are the number of rooms for each bed type ?",
        "VQL": "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "db_id": "inn_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT bedType , count(*) FROM Rooms GROUP BY bedType', 'binning': ''}, 'VQL': 'Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType'}",
        "record_name": "1966",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Return a pie chart on what are the number of rooms for each bed type ?",
        "question_toks": [
            "Return",
            "a",
            "pie",
            "chart",
            "on",
            "what",
            "are",
            "the",
            "number",
            "of",
            "rooms",
            "for",
            "each",
            "bed",
            "type",
            "?"
        ],
        "query": "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "bedType",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.bedtype@SEP@reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds"
    },
    {
        "nl_queries": "Bar chart x axis type y axis the total number , display Y-axis in asc order .",
        "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
        "db_id": "store_product",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC'}",
        "record_name": "2862@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis type y axis the total number , display Y-axis in asc order .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "type",
            "y",
            "axis",
            "the",
            "total",
            "number",
            ",",
            "display",
            "Y-axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "store",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table store, columns = [*,Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]",
        "choose_schema_rat_link": "store.type@SEP@store.number_of_product_category"
    },
    {
        "nl_queries": "what is the average weight for each type of pet ? , could you order by the total number from low to high ?",
        "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) ASC",
        "db_id": "pets_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) ASC'}",
        "record_name": "2560@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what is the average weight for each type of pet ? , could you order by the total number from low to high ?",
        "question_toks": [
            "what",
            "is",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "?",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY avg(weight) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "avg",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype",
            "ORDER",
            "BY",
            "avg",
            "(",
            "weight",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.weight@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@pets.pet_age"
    },
    {
        "nl_queries": "List the number of dogs departed in each day with a bar chart that bins departed date by weekday , could you show total number in ascending order ?",
        "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC', 'binning': 'BIN date_departed BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY'}",
        "record_name": "1185@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                32,
                "weekday"
            ],
            "vis": 0
        },
        "question": "List the number of dogs departed in each day with a bar chart that bins departed date by weekday , could you show total number in ascending order ?",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "dogs",
            "departed",
            "in",
            "each",
            "day",
            "with",
            "a",
            "bar",
            "chart",
            "that",
            "bins",
            "departed",
            "date",
            "by",
            "weekday",
            ",",
            "could",
            "you",
            "show",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_departed",
            ",",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "FROM",
            "Dogs",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "ASC",
            "BIN",
            "date_departed",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@dogs.date_departed@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "List each language and the number of TV Channels using it in a bar chart , and display in descending by the total number .",
        "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
        "db_id": "tvshow",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC'}",
        "record_name": "3058@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List each language and the number of TV Channels using it in a bar chart , and display in descending by the total number .",
        "question_toks": [
            "List",
            "each",
            "language",
            "and",
            "the",
            "number",
            "of",
            "TV",
            "Channels",
            "using",
            "it",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "descending",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table TV_Channel, columns = [*,id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "choose_schema_rat_link": "tv_channel.language@SEP@tv_series.channel@SEP@cartoon.channel"
    },
    {
        "nl_queries": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , could you list in ascending by the x-axis ?",
        "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
        "db_id": "ship_mission",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC'}",
        "record_name": "2756@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a stacked bar chart for showing the total number of each ship type and categorize it by ship nationality , could you list in ascending by the x-axis ?",
        "question_toks": [
            "Give",
            "me",
            "a",
            "stacked",
            "bar",
            "chart",
            "for",
            "showing",
            "the",
            "total",
            "number",
            "of",
            "each",
            "ship",
            "type",
            "and",
            "categorize",
            "it",
            "by",
            "ship",
            "nationality",
            ",",
            "could",
            "you",
            "list",
            "in",
            "ascending",
            "by",
            "the",
            "x-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "Type",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Nationality",
            ",",
            "Type",
            "ORDER",
            "BY",
            "Type",
            "ASC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "mission.ship_id@SEP@ship.ship_id@SEP@ship.type@SEP@ship.nationality"
    },
    {
        "nl_queries": "List all directors along with the number of films directed by each director in a bar chart , and I want to rank by the bars in ascending please .",
        "VQL": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC'}",
        "record_name": "445@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all directors along with the number of films directed by each director in a bar chart , and I want to rank by the bars in ascending please .",
        "question_toks": [
            "List",
            "all",
            "directors",
            "along",
            "with",
            "the",
            "number",
            "of",
            "films",
            "directed",
            "by",
            "each",
            "director",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "bars",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Directed_by",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "directed_by",
            "ORDER",
            "BY",
            "Directed_by",
            "ASC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code]",
        "choose_schema_rat_link": "film.directed_by@SEP@film.number_in_season@SEP@film.film_id@SEP@schedule.film_id@SEP@film.rank_in_series"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a line chart about the change of salary over hire_date , and rank in descending by the x axis .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1790@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , return a line chart about the change of salary over hire_date , and rank in descending by the x axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "salary",
            "over",
            "hire_date",
            ",",
            "and",
            "rank",
            "in",
            "descending",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , and list Y-axis from low to high order please .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC'}",
        "record_name": "1602@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , and list Y-axis from low to high order please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "list",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "SALARY",
            ")",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Show the name and age for all drivers with a bar chart .",
        "VQL": "Visualize BAR SELECT Name , Age FROM driver",
        "db_id": "school_bus",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM driver', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM driver'}",
        "record_name": "2699",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the name and age for all drivers with a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "age",
            "for",
            "all",
            "drivers",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Age FROM driver",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Age",
            "FROM",
            "driver"
        ],
        "choose_schema": "Table driver, columns = [*,Driver_ID, Name, Party, Home_city, Age]",
        "choose_schema_rat_link": "driver.name@SEP@driver.age@SEP@driver.driver_id@SEP@school_bus.driver_id"
    },
    {
        "nl_queries": "Draw a bar chart of owner versus total number of rating in percent , and sort Y-axis in asc order .",
        "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC",
        "db_id": "program_share",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC'}",
        "record_name": "2625@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of owner versus total number of rating in percent , and sort Y-axis in asc order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "owner",
            "versus",
            "total",
            "number",
            "of",
            "rating",
            "in",
            "percent",
            ",",
            "and",
            "sort",
            "Y-axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY sum(Rating_in_percent) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Owner",
            ",",
            "sum",
            "(",
            "Rating_in_percent",
            ")",
            "FROM",
            "channel",
            "GROUP",
            "BY",
            "OWNER",
            "ORDER",
            "BY",
            "sum",
            "(",
            "Rating_in_percent",
            ")",
            "ASC"
        ],
        "choose_schema": "Table program, columns = [*,Program_ID, Name, Origin, Launch, Owner]@SEP@Table channel, columns = [*,Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]",
        "choose_schema_rat_link": "channel.rating_in_percent@SEP@program.owner@SEP@channel.owner"
    },
    {
        "nl_queries": "Show the total number from each payment method code , and I want to show y-axis in ascending order .",
        "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC",
        "db_id": "driving_school",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC'}",
        "record_name": "1247@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    31,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the total number from each payment method code , and I want to show y-axis in ascending order .",
        "question_toks": [
            "Show",
            "the",
            "total",
            "number",
            "from",
            "each",
            "payment",
            "method",
            "code",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "y-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Customer_Payments, columns = [*,customer_id, datetime_payment, payment_method_code, amount_payment]",
        "choose_schema_rat_link": "customer_payments.payment_method_code"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday , I want to order y axis in ascending order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1771@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday , I want to order y axis in ascending order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "I",
            "want",
            "to",
            "order",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1760",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "manager_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show me the proportion of cities of the branch table .",
        "VQL": "Visualize PIE SELECT City , COUNT(City) FROM branch GROUP BY City",
        "db_id": "shop_membership",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT City , COUNT(City) FROM branch GROUP BY City', 'binning': ''}, 'VQL': 'Visualize PIE SELECT City , COUNT(City) FROM branch GROUP BY City'}",
        "record_name": "2767",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show me the proportion of cities of the branch table .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "proportion",
            "of",
            "cities",
            "of",
            "the",
            "branch",
            "table",
            "."
        ],
        "query": "Visualize PIE SELECT City , COUNT(City) FROM branch GROUP BY City",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "City",
            ",",
            "COUNT",
            "(",
            "City",
            ")",
            "FROM",
            "branch",
            "GROUP",
            "BY",
            "City"
        ],
        "choose_schema": "Table branch, columns = [*,Branch_ID, Name, Open_year, Address_road, City, membership_amount]",
        "choose_schema_rat_link": "branch.city@SEP@branch.branch_id@SEP@membership_register_branch.branch_id@SEP@purchase.branch_id"
    },
    {
        "nl_queries": "Give me a bar chart for the number of year of each year , and rank total number in desc order .",
        "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC', 'binning': 'BIN Year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY'}",
        "record_name": "3239@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                16,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Give me a bar chart for the number of year of each year , and rank total number in desc order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "number",
            "of",
            "year",
            "of",
            "each",
            "year",
            ",",
            "and",
            "rank",
            "total",
            "number",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Year",
            ",",
            "COUNT",
            "(",
            "Year",
            ")",
            "FROM",
            "WINE",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Year",
            ")",
            "DESC",
            "BIN",
            "Year",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.year"
    },
    {
        "nl_queries": "Display a bar chart for the names and the ages of editors .",
        "VQL": "Visualize BAR SELECT Name , Age FROM editor",
        "db_id": "journal_committee",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM editor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM editor'}",
        "record_name": "2053",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Display a bar chart for the names and the ages of editors .",
        "question_toks": [
            "Display",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "names",
            "and",
            "the",
            "ages",
            "of",
            "editors",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Age FROM editor",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Age",
            "FROM",
            "editor"
        ],
        "choose_schema": "Table editor, columns = [*,Editor_ID, Name, Age]",
        "choose_schema_rat_link": "editor.name@SEP@editor.age@SEP@editor.editor_id@SEP@journal_committee.editor_id"
    },
    {
        "nl_queries": "Give me the comparison about ID over the name , display by the Y-axis in asc .",
        "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY ID ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , ID FROM swimmer ORDER BY ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , ID FROM swimmer ORDER BY ID ASC'}",
        "record_name": "2914@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about ID over the name , display by the Y-axis in asc .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "ID",
            "over",
            "the",
            "name",
            ",",
            "display",
            "by",
            "the",
            "Y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.name@SEP@stadium.name@SEP@event.name"
    },
    {
        "nl_queries": "Show the number of teams in elimination in a bar chart , and order in desc by the total number .",
        "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC",
        "db_id": "wrestler",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC'}",
        "record_name": "3283@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of teams in elimination in a bar chart , and order in desc by the total number .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "teams",
            "in",
            "elimination",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY COUNT(Team) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "Team",
            ")",
            "FROM",
            "elimination",
            "GROUP",
            "BY",
            "Team",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Team",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Elimination, columns = [*,Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "choose_schema_rat_link": "elimination.team@SEP@elimination.elimination_id@SEP@elimination.elimination_move"
    },
    {
        "nl_queries": "I want to see trend of the number of season by season",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
        "db_id": "game_injury",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season'}",
        "record_name": "1494",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "I want to see trend of the number of season by season",
        "question_toks": [
            "I",
            "want",
            "to",
            "see",
            "trend",
            "of",
            "the",
            "number",
            "of",
            "season",
            "by",
            "season"
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Season"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.season"
    },
    {
        "nl_queries": "List all the possible ways to get to attractions , together with the number of attractions accessible by these methods in a bar chart .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "db_id": "cre_Theme_park",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There'}",
        "record_name": "888",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all the possible ways to get to attractions , together with the number of attractions accessible by these methods in a bar chart .",
        "question_toks": [
            "List",
            "all",
            "the",
            "possible",
            "ways",
            "to",
            "get",
            "to",
            "attractions",
            ",",
            "together",
            "with",
            "the",
            "number",
            "of",
            "attractions",
            "accessible",
            "by",
            "these",
            "methods",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "ref_attraction_types.attraction_type_code@SEP@ref_attraction_types.attraction_type_description@SEP@tourist_attractions.attraction_type_code"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of meter_700 and ID , and rank meter_700 in desc order .",
        "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 DESC'}",
        "record_name": "2924@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of meter_700 and ID , and rank meter_700 in desc order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_700",
            "and",
            "ID",
            ",",
            "and",
            "rank",
            "meter_700",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY meter_700 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_700",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For each origin , how many flights came from there Show bar chart , I want to show from high to low by the the total number .",
        "VQL": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC",
        "db_id": "flight_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC'}",
        "record_name": "1411@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each origin , how many flights came from there Show bar chart , I want to show from high to low by the the total number .",
        "question_toks": [
            "For",
            "each",
            "origin",
            ",",
            "how",
            "many",
            "flights",
            "came",
            "from",
            "there",
            "Show",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT origin , count(*) FROM Flight GROUP BY origin ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "origin",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.origin@SEP@flight.flno"
    },
    {
        "nl_queries": "Show the number of documents for each location code in a bar chart , I want to order from high to low by the bars .",
        "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC'}",
        "record_name": "769@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of documents for each location code in a bar chart , I want to order from high to low by the bars .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "documents",
            "for",
            "each",
            "location",
            "code",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "order",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location_Code",
            ",",
            "COUNT",
            "(",
            "Location_Code",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "ORDER",
            "BY",
            "Location_Code",
            "DESC"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id"
    },
    {
        "nl_queries": "Show me a pie chart for what are the memories and carriers of phones ?",
        "VQL": "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
        "db_id": "phone_market",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier'}",
        "record_name": "2571",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show me a pie chart for what are the memories and carriers of phones ?",
        "question_toks": [
            "Show",
            "me",
            "a",
            "pie",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "memories",
            "and",
            "carriers",
            "of",
            "phones",
            "?"
        ],
        "query": "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Carrier",
            ",",
            "SUM",
            "(",
            "Memory_in_G",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier"
        ],
        "choose_schema": "Table phone, columns = [*,Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "choose_schema_rat_link": "phone.memory_in_g@SEP@phone.carrier@SEP@phone.phone_id@SEP@phone_market.phone_id"
    },
    {
        "nl_queries": "Draw a bar chart of is full time versus how many is full time , sort by the Y from high to low .",
        "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC'}",
        "record_name": "1335@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of is full time versus how many is full time , sort by the Y from high to low .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "is",
            "full",
            "time",
            "versus",
            "how",
            "many",
            "is",
            "full",
            "time",
            ",",
            "sort",
            "by",
            "the",
            "Y",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "COUNT",
            "(",
            "Is_full_time",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Is_full_time",
            ")",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.is_full_time"
    },
    {
        "nl_queries": "What are the different ship flags , and how many ships have each Plot them as bar chart , and order x-axis in desc order .",
        "VQL": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC'}",
        "record_name": "2739@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the different ship flags , and how many ships have each Plot them as bar chart , and order x-axis in desc order .",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "ship",
            "flags",
            ",",
            "and",
            "how",
            "many",
            "ships",
            "have",
            "each",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "x-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Flag",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "flag",
            "ORDER",
            "BY",
            "Flag",
            "DESC"
        ],
        "choose_schema": "Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.ship_id@SEP@ship.ship_id@SEP@ship.flag"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the trend about salary over hire_date , and could you rank x axis from high to low order ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC'}",
        "record_name": "1616@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the trend about salary over hire_date , and could you rank x axis from high to low order ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "trend",
            "about",
            "salary",
            "over",
            "hire_date",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show maximal pet age from each pettype",
        "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , max(pet_age) FROM pets GROUP BY PetType', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType'}",
        "record_name": "2547",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show maximal pet age from each pettype",
        "question_toks": [
            "Show",
            "maximal",
            "pet",
            "age",
            "from",
            "each",
            "pettype"
        ],
        "query": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "PetType"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.pet_age@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@student.age"
    },
    {
        "nl_queries": "Give me the comparison about Team_ID over the All_Neutral by a bar chart , and show from low to high by the bar .",
        "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC'}",
        "record_name": "3118@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Team_ID over the All_Neutral by a bar chart , and show from low to high by the bar .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Team_ID",
            "over",
            "the",
            "All_Neutral",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Neutral",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Find the total number of hours have done for all students in each department Visualize by bar chart , could you display Y in desc order please ?",
        "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC'}",
        "record_name": "566@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            37,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the total number of hours have done for all students in each department Visualize by bar chart , could you display Y in desc order please ?",
        "question_toks": [
            "Find",
            "the",
            "total",
            "number",
            "of",
            "hours",
            "have",
            "done",
            "for",
            "all",
            "students",
            "in",
            "each",
            "department",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "display",
            "Y",
            "in",
            "desc",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY sum(stu_hrs) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "sum",
            "(",
            "stu_hrs",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "sum",
            "(",
            "stu_hrs",
            ")",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_gpa@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "What are the memories and carriers of phones Show bar chart , and show by the mean memory in g in descending .",
        "VQL": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY AVG(Memory_in_G) DESC",
        "db_id": "phone_market",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY AVG(Memory_in_G) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY AVG(Memory_in_G) DESC'}",
        "record_name": "2573@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the memories and carriers of phones Show bar chart , and show by the mean memory in g in descending .",
        "question_toks": [
            "What",
            "are",
            "the",
            "memories",
            "and",
            "carriers",
            "of",
            "phones",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "by",
            "the",
            "mean",
            "memory",
            "in",
            "g",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY AVG(Memory_in_G) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Carrier",
            ",",
            "AVG",
            "(",
            "Memory_in_G",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Memory_in_G",
            ")",
            "DESC"
        ],
        "choose_schema": "Table phone, columns = [*,Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "choose_schema_rat_link": "phone.memory_in_g@SEP@phone.carrier@SEP@phone.phone_id@SEP@phone_market.phone_id"
    },
    {
        "nl_queries": "What are the number of the names of all products ? , and show in asc by the Y .",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC'}",
        "record_name": "2180@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the number of the names of all products ? , and show in asc by the Y .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "names",
            "of",
            "all",
            "products",
            "?",
            ",",
            "and",
            "show",
            "in",
            "asc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "Products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Name",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "A bar chart for what are the number of the dates with a maximum temperature higher than 85 ?",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY WEEKDAY'}",
        "record_name": "315",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "A bar chart for what are the number of the dates with a maximum temperature higher than 85 ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "with",
            "a",
            "maximum",
            "temperature",
            "higher",
            "than",
            "85",
            "?"
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "What are the names of products with price at most 200 , and count them by a bar chart , and display in desc by the Name please .",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name DESC",
        "db_id": "manufactory_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name DESC'}",
        "record_name": "2172@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    6,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names of products with price at most 200 , and count them by a bar chart , and display in desc by the Name please .",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "products",
            "with",
            "price",
            "at",
            "most",
            "200",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "Name",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM products WHERE price <= 200 GROUP BY Name ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "products",
            "WHERE",
            "price",
            "<=",
            "200",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , find job_id and the average of department_id , and group by attribute job_id , and visualize them by a bar chart , could you rank in ascending by the names ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC'}",
        "record_name": "1607@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , find job_id and the average of department_id , and group by attribute job_id , and visualize them by a bar chart , could you rank in ascending by the names ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "rank",
            "in",
            "ascending",
            "by",
            "the",
            "names",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Give me the comparison about the average of Employee_ID over the Start_from bin start_from by weekday .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Employee_ID) FROM hiring', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY WEEKDAY'}",
        "record_name": "1343",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Give me the comparison about the average of Employee_ID over the Start_from bin start_from by weekday .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Employee_ID",
            "over",
            "the",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Road and ACC_Percent .",
        "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , ACC_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match'}",
        "record_name": "3141",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Road and ACC_Percent .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Road",
            "and",
            "ACC_Percent",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a bar chart of country versus the total number , and rank from low to high by the X-axis .",
        "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "db_id": "concert_singer",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
        "record_name": "690@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of country versus the total number , and rank from low to high by the X-axis .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "country",
            "versus",
            "the",
            "total",
            "number",
            ",",
            "and",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "country",
            "ORDER",
            "BY",
            "Country",
            "ASC"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.country"
    },
    {
        "nl_queries": "What are the memories and carriers of phones Show bar chart , order in descending by the x-axis .",
        "VQL": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
        "db_id": "phone_market",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC'}",
        "record_name": "2573@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the memories and carriers of phones Show bar chart , order in descending by the x-axis .",
        "question_toks": [
            "What",
            "are",
            "the",
            "memories",
            "and",
            "carriers",
            "of",
            "phones",
            "Show",
            "bar",
            "chart",
            ",",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Carrier",
            ",",
            "AVG",
            "(",
            "Memory_in_G",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier",
            "ORDER",
            "BY",
            "Carrier",
            "DESC"
        ],
        "choose_schema": "Table phone, columns = [*,Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "choose_schema_rat_link": "phone.memory_in_g@SEP@phone.carrier@SEP@phone.phone_id@SEP@phone_market.phone_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of employee_id over the hire_date bin hire_date by weekday by a bar chart , could you sort by the y axis from low to high please ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1591@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of employee_id over the hire_date bin hire_date by weekday by a bar chart , could you sort by the y axis from low to high please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "employee_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "sort",
            "by",
            "the",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Find the number of the dates of the tests taken with result \"Pass\" , sort by the names in asc please .",
        "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
        "db_id": "e_learning",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC'}",
        "record_name": "1284@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ],
                    "\"Pass\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    31,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            31,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of the dates of the tests taken with result \"Pass\" , sort by the names in asc please .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "of",
            "the",
            "tests",
            "taken",
            "with",
            "result",
            "\"Pass\"",
            ",",
            "sort",
            "by",
            "the",
            "names",
            "in",
            "asc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_test_taken",
            ",",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "FROM",
            "Student_Tests_Taken",
            "WHERE",
            "test_result",
            "=",
            "\"Pass\"",
            "GROUP",
            "BY",
            "date_test_taken",
            "ORDER",
            "BY",
            "date_test_taken",
            "ASC"
        ],
        "choose_schema": "Table Student_Tests_Taken, columns = [*,registration_id, date_test_taken, test_result]",
        "choose_schema_rat_link": "students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@student_tests_taken.date_test_taken@SEP@student_tests_taken.test_result"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart , I want to rank in desc by the sum employee id .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1756@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart , I want to rank in desc by the sum employee id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "employee_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "in",
            "desc",
            "by",
            "the",
            "sum",
            "employee",
            "id",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Bar chart x axis duration y axis how many duration , display by the y axis in asc .",
        "VQL": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) ASC",
        "db_id": "musical",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) ASC'}",
        "record_name": "2444@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis duration y axis how many duration , display by the y axis in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "duration",
            "y",
            "axis",
            "how",
            "many",
            "duration",
            ",",
            "display",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Duration",
            ",",
            "COUNT",
            "(",
            "Duration",
            ")",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "Duration",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Duration",
            ")",
            "ASC"
        ],
        "choose_schema": "Table actor, columns = [*,Actor_ID, Name, Musical_ID, Character, Duration, age]",
        "choose_schema_rat_link": "actor.duration"
    },
    {
        "nl_queries": ", I want to list by the bars from low to high please .",
        "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type ASC",
        "db_id": "entertainment_awards",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type ASC'}",
        "record_name": "1369@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": ", I want to list by the bars from low to high please .",
        "question_toks": [
            ",",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "bars",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "artwork",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "Type",
            "ASC"
        ],
        "choose_schema": "Table artwork, columns = [*,Artwork_ID, Type, Name]",
        "choose_schema_rat_link": "Table festival_detail, columns = [*,Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]@SEP@Table artwork, columns = [*,Artwork_ID, Type, Name]@SEP@Table nomination, columns = [*,Artwork_ID, Festival_ID, Result]"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Start_from and the amount of Start_from , and group by attribute Is_full_time and bin start_from by weekday , rank total number in asc order .",
        "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Start_from) ASC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY'}",
        "record_name": "1330@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Start_from and the amount of Start_from , and group by attribute Is_full_time and bin start_from by weekday , rank total number in asc order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "amount",
            "of",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "rank",
            "total",
            "number",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.number_products"
    },
    {
        "nl_queries": "List the maximum weight and type for each type of pet with a bar chart .",
        "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , max(weight) FROM pets GROUP BY PetType', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType'}",
        "record_name": "2558",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the maximum weight and type for each type of pet with a bar chart .",
        "question_toks": [
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "type",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "max",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "PetType"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.weight@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@pets.pet_age"
    },
    {
        "nl_queries": "Scatterplot of acc_percent vs school id by ACC_Regular_Season",
        "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season'}",
        "record_name": "3169",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Scatterplot of acc_percent vs school id by ACC_Regular_Season",
        "question_toks": [
            "Scatterplot",
            "of",
            "acc_percent",
            "vs",
            "school",
            "id",
            "by",
            "ACC_Regular_Season"
        ],
        "query": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Regular_Season"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of manager_id bin hire_date by weekday in a bar chart , and sort in desc by the the average of manager id .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1769@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of manager_id bin hire_date by weekday in a bar chart , and sort in desc by the the average of manager id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "in",
            "desc",
            "by",
            "the",
            "the",
            "average",
            "of",
            "manager",
            "id",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "departments.manager_id@SEP@employees.manager_id@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Bar chart x axis location code y axis how many location code , and show by the Y-axis in ascending .",
        "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC'}",
        "record_name": "769@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis location code y axis how many location code , and show by the Y-axis in ascending .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "location",
            "code",
            "y",
            "axis",
            "how",
            "many",
            "location",
            "code",
            ",",
            "and",
            "show",
            "by",
            "the",
            "Y-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location_Code",
            ",",
            "COUNT",
            "(",
            "Location_Code",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Location_Code",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code"
    },
    {
        "nl_queries": "A bar chart shows the distribution of Sex and the sum of Height , and group by attribute Sex , show in ascending by the bars .",
        "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC'}",
        "record_name": "379@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of Sex and the sum of Height , and group by attribute Sex , show in ascending by the bars .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "sum",
            "of",
            "Height",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "show",
            "in",
            "ascending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.height"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , for department_id , hire_date , visualize the trend , I want to sort by the X-axis from low to high .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC'}",
        "record_name": "1617@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , for department_id , hire_date , visualize the trend , I want to sort by the X-axis from low to high .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "for",
            "department_id",
            ",",
            "hire_date",
            ",",
            "visualize",
            "the",
            "trend",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "X-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Stacked bar chart of how many nationality for with each Type in each nationality",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
        "db_id": "ship_mission",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality'}",
        "record_name": "2755",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stacked bar chart of how many nationality for with each Type in each nationality",
        "question_toks": [
            "Stacked",
            "bar",
            "chart",
            "of",
            "how",
            "many",
            "nationality",
            "for",
            "with",
            "each",
            "Type",
            "in",
            "each",
            "nationality"
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Type",
            ",",
            "Nationality"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.nationality@SEP@ship.type"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time , show by the Y-axis from low to high .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1580@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time , show by the Y-axis from low to high .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "amount",
            "of",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "show",
            "by",
            "the",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show the number of documents in different ending date . Bin ending date by weekday and group by location code with a stacked bar chart .",
        "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code', 'binning': 'BIN Date_in_Locaton_To BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY'}",
        "record_name": "780",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Show the number of documents in different ending date . Bin ending date by weekday and group by location code with a stacked bar chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "different",
            "ending",
            "date",
            ".",
            "Bin",
            "ending",
            "date",
            "by",
            "weekday",
            "and",
            "group",
            "by",
            "location",
            "code",
            "with",
            "a",
            "stacked",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_in_Locaton_To",
            ",",
            "COUNT",
            "(",
            "Date_in_Locaton_To",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "BIN",
            "Date_in_Locaton_To",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "The trend about the the number of season of different Home_team over the season , and rank from high to low by the Season .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
        "db_id": "game_injury",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR'}",
        "record_name": "1489@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "year"
            ],
            "vis": 2
        },
        "question": "The trend about the the number of season of different Home_team over the season , and rank from high to low by the Season .",
        "question_toks": [
            "The",
            "trend",
            "about",
            "the",
            "the",
            "number",
            "of",
            "season",
            "of",
            "different",
            "Home_team",
            "over",
            "the",
            "season",
            ",",
            "and",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "Season",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Home_team ORDER BY Season DESC BIN Season BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Home_team",
            "ORDER",
            "BY",
            "Season",
            "DESC",
            "BIN",
            "Season",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.season@SEP@stadium.home_games@SEP@game.home_team"
    },
    {
        "nl_queries": "How many documents in different ending date ? Return a line chart grouping by ending date .",
        "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To'}",
        "record_name": "773",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "How many documents in different ending date ? Return a line chart grouping by ending date .",
        "question_toks": [
            "How",
            "many",
            "documents",
            "in",
            "different",
            "ending",
            "date",
            "?",
            "Return",
            "a",
            "line",
            "chart",
            "grouping",
            "by",
            "ending",
            "date",
            "."
        ],
        "query": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Locaton_To",
            ",",
            "COUNT",
            "(",
            "Date_in_Locaton_To",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Date_in_Locaton_To"
        ],
        "choose_schema": "Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "Show me about the distribution of Team_Name and School_ID in a bar chart , and I want to rank by the total number in ascending .",
        "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC'}",
        "record_name": "3111@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Team_Name and School_ID in a bar chart , and I want to rank by the total number in ascending .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Team_Name",
            "and",
            "School_ID",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team_Name",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "The trend about the the number of start from of different Is_full_time over the start from",
        "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR'}",
        "record_name": "1349",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "The trend about the the number of start from of different Is_full_time over the start from",
        "question_toks": [
            "The",
            "trend",
            "about",
            "the",
            "the",
            "number",
            "of",
            "start",
            "from",
            "of",
            "different",
            "Is_full_time",
            "over",
            "the",
            "start",
            "from"
        ],
        "query": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.number_products"
    },
    {
        "nl_queries": "Bar graph to show how many nationality from different nationality",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
        "db_id": "ship_mission",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality'}",
        "record_name": "2760",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show how many nationality from different nationality",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "how",
            "many",
            "nationality",
            "from",
            "different",
            "nationality"
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.nationality"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of salary over the job_id , and group by attribute job_id , sort by the bar in ascending .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC'}",
        "record_name": "1602@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of salary over the job_id , and group by attribute job_id , sort by the bar in ascending .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "salary",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "sort",
            "by",
            "the",
            "bar",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Bar graph to show minimal room count from different apt type code , and I want to display from high to low by the y-axis .",
        "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC'}",
        "record_name": "96@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            2,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show minimal room count from different apt type code , and I want to display from high to low by the y-axis .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "minimal",
            "room",
            "count",
            "from",
            "different",
            "apt",
            "type",
            "code",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY min(room_count) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "apt_type_code",
            ",",
            "min",
            "(",
            "room_count",
            ")",
            "FROM",
            "Apartments",
            "GROUP",
            "BY",
            "apt_type_code",
            "ORDER",
            "BY",
            "min",
            "(",
            "room_count",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Apartments, columns = [*,apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "choose_schema_rat_link": "apartments.room_count"
    },
    {
        "nl_queries": "How many departments are in each school . Show bar chart .",
        "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department', 'binning': ''}, 'VQL': 'Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department'}",
        "record_name": "515",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many departments are in each school . Show bar chart .",
        "question_toks": [
            "How",
            "many",
            "departments",
            "are",
            "in",
            "each",
            "school",
            ".",
            "Show",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "SCHOOL_CODE",
            ",",
            "count",
            "(",
            "DISTINCT",
            "dept_name",
            ")",
            "FROM",
            "department"
        ],
        "choose_schema": "Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]",
        "choose_schema_rat_link": "course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code@SEP@department.school_code"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Start_from and the amount of Start_from bin start_from by weekday , and list in asc by the y axis .",
        "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY'}",
        "record_name": "1337@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Start_from and the amount of Start_from bin start_from by weekday , and list in asc by the y axis .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "amount",
            "of",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "and",
            "list",
            "in",
            "asc",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY COUNT(Start_from) ASC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from"
    },
    {
        "nl_queries": "Show the proportion of the number of customers for each payment method code in a pie chart .",
        "VQL": "Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code",
        "db_id": "customers_and_products_contacts",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code'}",
        "record_name": "1004",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the proportion of the number of customers for each payment method code in a pie chart .",
        "question_toks": [
            "Show",
            "the",
            "proportion",
            "of",
            "the",
            "number",
            "of",
            "customers",
            "for",
            "each",
            "payment",
            "method",
            "code",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "payment_method_code",
            ",",
            "COUNT",
            "(",
            "payment_method_code",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "choose_schema_rat_link": "customers.payment_method_code@SEP@customers.customer_id@SEP@customers.customer_number@SEP@customers.customer_name@SEP@customers.customer_address@SEP@customers.customer_phone@SEP@customers.customer_email@SEP@contacts.customer_id@SEP@customer_address_history.customer_id@SEP@customer_orders.customer_id"
    },
    {
        "nl_queries": "Find the dates of the tests taken with result \"Pass\" , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
        "db_id": "e_learning",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"', 'binning': 'BIN date_test_taken BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY'}",
        "record_name": "1286",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ],
                    "\"Pass\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                31,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Find the dates of the tests taken with result \"Pass\" , and count them by a bar chart",
        "question_toks": [
            "Find",
            "the",
            "dates",
            "of",
            "the",
            "tests",
            "taken",
            "with",
            "result",
            "\"Pass\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_test_taken",
            ",",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "FROM",
            "Student_Tests_Taken",
            "WHERE",
            "test_result",
            "=",
            "\"Pass\"",
            "BIN",
            "date_test_taken",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Student_Tests_Taken, columns = [*,registration_id, date_test_taken, test_result]",
        "choose_schema_rat_link": "students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@student_tests_taken.date_test_taken@SEP@student_tests_taken.test_result"
    },
    {
        "nl_queries": "Stacked bar chart of team_id for with each ACC_Road in each all home , I want to sort from low to high by the x-axis .",
        "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC'}",
        "record_name": "3086@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stacked bar chart of team_id for with each ACC_Road in each all home , I want to sort from low to high by the x-axis .",
        "question_toks": [
            "Stacked",
            "bar",
            "chart",
            "of",
            "team_id",
            "for",
            "with",
            "each",
            "ACC_Road",
            "in",
            "each",
            "all",
            "home",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.all_home@SEP@basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Road and the average of Team_ID , and group by attribute ACC_Road in a bar chart , order in asc by the the average of team id .",
        "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC'}",
        "record_name": "3099@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Road and the average of Team_ID , and group by attribute ACC_Road in a bar chart , order in asc by the the average of team id .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "average",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "the",
            "average",
            "of",
            "team",
            "id",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "What is the relationship between ACC_Percent and All_Games_Percent , and group by attribute ACC_Home ?",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home'}",
        "record_name": "3085",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between ACC_Percent and All_Games_Percent , and group by attribute ACC_Home ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "ACC_Percent",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            "?"
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a pie chart about the proportion of All_Neutral and Team_ID .",
        "VQL": "Visualize PIE SELECT All_Neutral , Team_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Neutral , Team_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Neutral , Team_ID FROM basketball_match'}",
        "record_name": "3130",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart about the proportion of All_Neutral and Team_ID .",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "All_Neutral",
            "and",
            "Team_ID",
            "."
        ],
        "query": "Visualize PIE SELECT All_Neutral , Team_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Neutral",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "What is the average number of attendance at home games for each year Plot them as line chart , and could you display year in desc order ?",
        "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
        "db_id": "baseball_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
        "record_name": "171@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        13
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                153,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                161,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    153,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            153,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "What is the average number of attendance at home games for each year Plot them as line chart , and could you display year in desc order ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "number",
            "of",
            "attendance",
            "at",
            "home",
            "games",
            "for",
            "each",
            "year",
            "Plot",
            "them",
            "as",
            "line",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "year",
            "in",
            "desc",
            "order",
            "?"
        ],
        "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "year",
            ",",
            "avg",
            "(",
            "attendance",
            ")",
            "FROM",
            "home_game",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "year",
            "DESC"
        ],
        "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "choose_schema_rat_link": "home_game.attendance@SEP@team.attendance@SEP@home_game.games@SEP@all_star.game_num@SEP@all_star.game_id@SEP@all_star.year@SEP@appearances.year@SEP@manager_award.year@SEP@player_award.year@SEP@manager_award_vote.year@SEP@player_award_vote.year@SEP@batting.year@SEP@batting_postseason.year@SEP@player_college.year@SEP@fielding.year@SEP@fielding_outfield.year@SEP@fielding_postseason.year@SEP@home_game.year@SEP@manager.year@SEP@manager_half.year@SEP@pitching.year@SEP@pitching_postseason.year@SEP@salary.year@SEP@postseason.year@SEP@team.year@SEP@team_half.year"
    },
    {
        "nl_queries": "Visualize a bar chart to show editors' names and their ages , could you show total number from low to high order ?",
        "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC",
        "db_id": "journal_committee",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM editor ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC'}",
        "record_name": "2053@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart to show editors' names and their ages , could you show total number from low to high order ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "to",
            "show",
            "editors'",
            "names",
            "and",
            "their",
            "ages",
            ",",
            "could",
            "you",
            "show",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Age ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Age",
            "FROM",
            "editor",
            "ORDER",
            "BY",
            "Age",
            "ASC"
        ],
        "choose_schema": "Table editor, columns = [*,Editor_ID, Name, Age]",
        "choose_schema_rat_link": "editor.editor_id@SEP@journal_committee.editor_id@SEP@editor.name@SEP@editor.age"
    },
    {
        "nl_queries": "Please show me how many employees working on different countries using a bar chart , and could you display from low to high by the x axis please ?",
        "VQL": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME ASC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME ASC'}",
        "record_name": "1797@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please show me how many employees working on different countries using a bar chart , and could you display from low to high by the x axis please ?",
        "question_toks": [
            "Please",
            "show",
            "me",
            "how",
            "many",
            "employees",
            "working",
            "on",
            "different",
            "countries",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x",
            "axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "COUNTRY_NAME",
            ",",
            "COUNT",
            "(",
            "COUNTRY_NAME",
            ")",
            "FROM",
            "countries",
            "GROUP",
            "BY",
            "COUNTRY_NAME",
            "ORDER",
            "BY",
            "COUNTRY_NAME",
            "ASC"
        ],
        "choose_schema": "Table countries, columns = [*,COUNTRY_ID, COUNTRY_NAME, REGION_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@countries.country_id@SEP@countries.country_name@SEP@locations.country_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of password and gender_mf .",
        "VQL": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1263",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of password and gender_mf .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "password",
            "and",
            "gender_mf",
            "."
        ],
        "query": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "password",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "course_authors_and_tutors.password@SEP@students.password@SEP@course_authors_and_tutors.gender_mf"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id , and could you rank X-axis from high to low order ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1565@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id , and could you rank X-axis from high to low order ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "X-axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id , I want to sort by the sum department id from low to high .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC\"}",
        "record_name": "1566@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id , I want to sort by the sum department id from low to high .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "sum",
            "department",
            "id",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@departments.department_id@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_name"
    },
    {
        "nl_queries": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart , sort in asc by the y axis please .",
        "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC",
        "db_id": "storm_record",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC'}",
        "record_name": "2868@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all storms with at least 1 death , show me the name and the total number of deaths with a bar chart , sort in asc by the y axis please .",
        "question_toks": [
            "For",
            "all",
            "storms",
            "with",
            "at",
            "least",
            "1",
            "death",
            ",",
            "show",
            "me",
            "the",
            "name",
            "and",
            "the",
            "total",
            "number",
            "of",
            "deaths",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "in",
            "asc",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Number_Deaths",
            "FROM",
            "storm",
            "WHERE",
            "number_deaths",
            ">=",
            "1",
            "ORDER",
            "BY",
            "Number_Deaths",
            "ASC"
        ],
        "choose_schema": "Table storm, columns = [*,Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths]",
        "choose_schema_rat_link": "storm.storm_id@SEP@affected_region.storm_id@SEP@storm.name@SEP@storm.number_deaths@SEP@affected_region.number_city_affected"
    },
    {
        "nl_queries": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart , and sort X in asc order .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3089@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart , and sort X in asc order .",
        "question_toks": [
            "Find",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "X",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Draw a bar chart of meter 200 versus the average of id , and display bars from low to high order .",
        "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC'}",
        "record_name": "2911@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of meter 200 versus the average of id , and display bars from low to high order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "meter",
            "200",
            "versus",
            "the",
            "average",
            "of",
            "id",
            ",",
            "and",
            "display",
            "bars",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_200@SEP@swimmer.meter_100@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show me about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time in a line chart , and display in ascending by the X .",
        "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1353@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Show me about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time in a line chart , and display in ascending by the X .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "change",
            "of",
            "the",
            "average",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "time",
            "in",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , a pie chart shows the proportion of name and manufacturer .",
        "VQL": "Visualize PIE SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120",
        "db_id": "manufactory_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120'}",
        "record_name": "2193",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "For those products with a price between 60 and 120 , a pie chart shows the proportion of name and manufacturer .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "a",
            "pie",
            "chart",
            "shows",
            "the",
            "proportion",
            "of",
            "name",
            "and",
            "manufacturer",
            "."
        ],
        "query": "Visualize PIE SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Name",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@products.manufacturer"
    },
    {
        "nl_queries": "What is the relationship between Body_Builder_ID and Snatch ?",
        "VQL": "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Body_Builder_ID , Snatch FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder'}",
        "record_name": "355",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between Body_Builder_ID and Snatch ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "Body_Builder_ID",
            "and",
            "Snatch",
            "?"
        ],
        "query": "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Body_Builder_ID",
            ",",
            "Snatch",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]",
        "choose_schema_rat_link": "body_builder.body_builder_id@SEP@body_builder.snatch"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , draw a bar chart about the distribution of name and code , and rank by the y axis in asc please .",
        "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC'}",
        "record_name": "2189@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , draw a bar chart about the distribution of name and code , and rank by the y axis in asc please .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "code",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "asc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Code",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Code",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@manufacturers.code@SEP@products.code"
    },
    {
        "nl_queries": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , sort from low to high by the x-axis .",
        "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
        "db_id": "music_4",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC'}",
        "record_name": "2439@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Awarded\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\" , sort from low to high by the x-axis .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "for",
            "returning",
            "the",
            "number",
            "of",
            "the",
            "categories",
            "of",
            "music",
            "festivals",
            "that",
            "have",
            "the",
            "result",
            "\"Awarded\"",
            ",",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "COUNT",
            "(",
            "Category",
            ")",
            "FROM",
            "music_festival",
            "WHERE",
            "RESULT",
            "=",
            "\"Awarded\"",
            "GROUP",
            "BY",
            "Category",
            "ORDER",
            "BY",
            "Category",
            "ASC"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.music_festival@SEP@music_festival.category@SEP@music_festival.result"
    },
    {
        "nl_queries": "Show me a bar chart for what are the nationalities and total ages of journalists ? , and display from low to high by the total number .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "db_id": "news_report",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC'}",
        "record_name": "2487@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart for what are the nationalities and total ages of journalists ? , and display from low to high by the total number .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "nationalities",
            "and",
            "total",
            "ages",
            "of",
            "journalists",
            "?",
            ",",
            "and",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "Age",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.age@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "Show the capacity for each cinema in a bar chart , and sort from high to low by the y axis .",
        "VQL": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "db_id": "cinema",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC'}",
        "record_name": "474@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the capacity for each cinema in a bar chart , and sort from high to low by the y axis .",
        "question_toks": [
            "Show",
            "the",
            "capacity",
            "for",
            "each",
            "cinema",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Capacity",
            "FROM",
            "cinema",
            "ORDER",
            "BY",
            "Capacity",
            "DESC"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "schedule.show_times_per_day@SEP@cinema.capacity@SEP@cinema.cinema_id@SEP@schedule.cinema_id"
    },
    {
        "nl_queries": "Visualize a bar chart showing each location's total number of passengers .",
        "VQL": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION",
        "db_id": "train_station",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION'}",
        "record_name": "3053",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart showing each location's total number of passengers .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "showing",
            "each",
            "location's",
            "total",
            "number",
            "of",
            "passengers",
            "."
        ],
        "query": "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "sum",
            "(",
            "total_passengers",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location@SEP@station.total_passengers"
    },
    {
        "nl_queries": "Return a histogram on how many invoices were billed from each state ? , order in descending by the bars .",
        "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
        "db_id": "store_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC'}",
        "record_name": "2856@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            44,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    43,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on how many invoices were billed from each state ? , order in descending by the bars .",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "how",
            "many",
            "invoices",
            "were",
            "billed",
            "from",
            "each",
            "state",
            "?",
            ",",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "\"USA\"",
            "GROUP",
            "BY",
            "billing_state",
            "ORDER",
            "BY",
            "billing_state",
            "DESC"
        ],
        "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
        "choose_schema_rat_link": "invoices.invoice_date@SEP@invoice_lines.invoice_id@SEP@invoices.billing_city@SEP@employees.state@SEP@customers.state"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the average of department_id bin hire_date by weekday , display by the the average of department id in asc .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1555@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the average of department_id bin hire_date by weekday , display by the the average of department id in asc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "display",
            "by",
            "the",
            "the",
            "average",
            "of",
            "department",
            "id",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@departments.department_id@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_name"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , and could you display by the X in descending ?",
        "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3123@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , and could you display by the X in descending ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "amount",
            "of",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "X",
            "in",
            "descending",
            "?"
        ],
        "query": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Please give me a bar chart showing institution types , along with the total enrollment for each type , order total number in desc order .",
        "VQL": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
        "db_id": "protein_institute",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC'}",
        "record_name": "2631@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please give me a bar chart showing institution types , along with the total enrollment for each type , order total number in desc order .",
        "question_toks": [
            "Please",
            "give",
            "me",
            "a",
            "bar",
            "chart",
            "showing",
            "institution",
            "types",
            ",",
            "along",
            "with",
            "the",
            "total",
            "enrollment",
            "for",
            "each",
            "type",
            ",",
            "order",
            "total",
            "number",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "sum",
            "(",
            "enrollment",
            ")",
            "FROM",
            "institution",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "sum",
            "(",
            "enrollment",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Institution, columns = [*,Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]",
        "choose_schema_rat_link": "institution.institution@SEP@institution.institution_id@SEP@protein.institution_id@SEP@institution.type@SEP@institution.enrollment"
    },
    {
        "nl_queries": "Give me a histogram for what is the number of players who have points less than 30 for each position ? , list by the y axis in desc please .",
        "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "db_id": "sports_competition",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC'}",
        "record_name": "2818@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a histogram for what is the number of players who have points less than 30 for each position ? , list by the y axis in desc please .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "histogram",
            "for",
            "what",
            "is",
            "the",
            "number",
            "of",
            "players",
            "who",
            "have",
            "points",
            "less",
            "than",
            "30",
            "for",
            "each",
            "position",
            "?",
            ",",
            "list",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Position",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "points",
            "<",
            "30",
            "GROUP",
            "BY",
            "POSITION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table player, columns = [*,Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "choose_schema_rat_link": "player.player_id@SEP@player.points@SEP@player.position"
    },
    {
        "nl_queries": "Show the number of opening years for three churches that opened most recently in a bar chart .",
        "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church GROUP BY Open_Date ORDER BY open_date DESC LIMIT 3",
        "db_id": "wedding",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Open_Date , COUNT(Open_Date) FROM church GROUP BY Open_Date ORDER BY open_date DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church GROUP BY Open_Date ORDER BY open_date DESC LIMIT 3'}",
        "record_name": "3211",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of opening years for three churches that opened most recently in a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "opening",
            "years",
            "for",
            "three",
            "churches",
            "that",
            "opened",
            "most",
            "recently",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church GROUP BY Open_Date ORDER BY open_date DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Open_Date",
            ",",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "FROM",
            "church",
            "GROUP",
            "BY",
            "Open_Date",
            "ORDER",
            "BY",
            "open_date",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table church, columns = [*,Church_ID, Name, Organized_by, Open_Date, Continuation_of]",
        "choose_schema_rat_link": "church.open_date@SEP@wedding.year@SEP@church.church_id@SEP@wedding.church_id"
    },
    {
        "nl_queries": "List the final tables made and the best finishes of poker players . Show the correlation .",
        "VQL": "Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "db_id": "poker_player",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Final_Table_Made , Best_Finish FROM poker_player', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player'}",
        "record_name": "2592",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "List the final tables made and the best finishes of poker players . Show the correlation .",
        "question_toks": [
            "List",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "the",
            "best",
            "finishes",
            "of",
            "poker",
            "players",
            ".",
            "Show",
            "the",
            "correlation",
            "."
        ],
        "query": "Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "choose_schema": "Table poker_player, columns = [*,Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "choose_schema_rat_link": "poker_player.final_table_made@SEP@poker_player.best_finish@SEP@poker_player.poker_player_id"
    },
    {
        "nl_queries": "Bar chart x axis customer status code y axis the total number",
        "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "db_id": "driving_school",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code'}",
        "record_name": "1245",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis customer status code y axis the total number",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "customer",
            "status",
            "code",
            "y",
            "axis",
            "the",
            "total",
            "number"
        ],
        "query": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "customer_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]",
        "choose_schema_rat_link": "customers.customer_status_code@SEP@customers.customer_id@SEP@customers.customer_address_id@SEP@customer_payments.customer_id@SEP@lessons.customer_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home .",
        "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
        "db_id": "university_basketball",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home'}",
        "record_name": "3092",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute ACC_Regular_Season .",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season'}",
        "record_name": "3171",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute ACC_Regular_Season .",
        "question_toks": [
            "Draw",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "ACC_Percent",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Regular_Season",
            "."
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Regular_Season"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and list x-axis in descending order .",
        "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
        "db_id": "ship_mission",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC'}",
        "record_name": "2756@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart showing the total number of every ship type by categorizing by nationality , and list x-axis in descending order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "total",
            "number",
            "of",
            "every",
            "ship",
            "type",
            "by",
            "categorizing",
            "by",
            "nationality",
            ",",
            "and",
            "list",
            "x-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY Type DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "Type",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Nationality",
            ",",
            "Type",
            "ORDER",
            "BY",
            "Type",
            "DESC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "mission.ship_id@SEP@ship.ship_id@SEP@ship.type@SEP@ship.nationality"
    },
    {
        "nl_queries": "Show me maximal stu gpa by dept code in a histogram , and display in desc by the bars .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC'}",
        "record_name": "531@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me maximal stu gpa by dept code in a histogram , and display in desc by the bars .",
        "question_toks": [
            "Show",
            "me",
            "maximal",
            "stu",
            "gpa",
            "by",
            "dept",
            "code",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "max",
            "(",
            "stu_gpa",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "DEPT_CODE",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table EMPLOYEE, columns = [*,EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]@SEP@Table ENROLL, columns = [*,CLASS_CODE, STU_NUM, ENROLL_GRADE]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]"
    },
    {
        "nl_queries": "Stacked bar chart of the number of left office for with each Minister in each left office",
        "VQL": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
        "db_id": "party_people",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister', 'binning': 'BIN Left_office BY YEAR'}, 'VQL': 'Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR'}",
        "record_name": "2521",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                10,
                "year"
            ],
            "vis": 0
        },
        "question": "Stacked bar chart of the number of left office for with each Minister in each left office",
        "question_toks": [
            "Stacked",
            "bar",
            "chart",
            "of",
            "the",
            "number",
            "of",
            "left",
            "office",
            "for",
            "with",
            "each",
            "Minister",
            "in",
            "each",
            "left",
            "office"
        ],
        "query": "Visualize BAR SELECT Left_office , COUNT(Left_office) FROM party GROUP BY Minister BIN Left_office BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Left_office",
            ",",
            "COUNT",
            "(",
            "Left_office",
            ")",
            "FROM",
            "party",
            "GROUP",
            "BY",
            "Minister",
            "BIN",
            "Left_office",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.left_office@SEP@party.minister"
    },
    {
        "nl_queries": "Count the number of people of each sex who have a weight higher than 85 . Show a pie chart .",
        "VQL": "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex'}",
        "record_name": "402",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Count the number of people of each sex who have a weight higher than 85 . Show a pie chart .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "people",
            "of",
            "each",
            "sex",
            "who",
            "have",
            "a",
            "weight",
            "higher",
            "than",
            "85",
            ".",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Sex",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "WHERE",
            "weight",
            ">",
            "85",
            "GROUP",
            "BY",
            "sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "what are the different statement ids on accounts , and the number of accounts for each ?",
        "VQL": "Visualize SCATTER SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID'}",
        "record_name": "831",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "what are the different statement ids on accounts , and the number of accounts for each ?",
        "question_toks": [
            "what",
            "are",
            "the",
            "different",
            "statement",
            "ids",
            "on",
            "accounts",
            ",",
            "and",
            "the",
            "number",
            "of",
            "accounts",
            "for",
            "each",
            "?"
        ],
        "query": "Visualize SCATTER SELECT Statement_ID , count(*) FROM Accounts GROUP BY STATEMENT_ID",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Statement_ID",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "STATEMENT_ID"
        ],
        "choose_schema": "Table Statements, columns = [*,Statement_ID, Statement_Details]@SEP@Table Accounts, columns = [*,Account_ID, Statement_ID, Account_Details]",
        "choose_schema_rat_link": "statements.statement_id@SEP@accounts.statement_id@SEP@statements.statement_details@SEP@accounts.account_id@SEP@accounts.account_details"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , and order y-axis in descending order please .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC\"}",
        "record_name": "1778@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , and order y-axis in descending order please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "order",
            "y-axis",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Plot the total number by grouped by how to get there as a bar graph , and rank from high to low by the x axis .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC",
        "db_id": "cre_Theme_park",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC'}",
        "record_name": "888@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the total number by grouped by how to get there as a bar graph , and rank from high to low by the x axis .",
        "question_toks": [
            "Plot",
            "the",
            "total",
            "number",
            "by",
            "grouped",
            "by",
            "how",
            "to",
            "get",
            "there",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There",
            "ORDER",
            "BY",
            "How_to_Get_There",
            "DESC"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "tourist_attractions.how_to_get_there"
    },
    {
        "nl_queries": "Give me a histogram for how many musicals has each nominee been nominated for ? , and display from low to high by the x axis .",
        "VQL": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
        "db_id": "musical",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC'}",
        "record_name": "2450@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a histogram for how many musicals has each nominee been nominated for ? , and display from low to high by the x axis .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "histogram",
            "for",
            "how",
            "many",
            "musicals",
            "has",
            "each",
            "nominee",
            "been",
            "nominated",
            "for",
            "?",
            ",",
            "and",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nominee",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "musical",
            "GROUP",
            "BY",
            "Nominee",
            "ORDER",
            "BY",
            "Nominee",
            "ASC"
        ],
        "choose_schema": "Table musical, columns = [*,Musical_ID, Name, Year, Award, Category, Nominee, Result]",
        "choose_schema_rat_link": "musical.musical_id@SEP@actor.musical_id@SEP@musical.nominee"
    },
    {
        "nl_queries": "Bar chart x axis lot details y axis the number of lot details , and sort by the names in asc .",
        "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
        "db_id": "tracking_share_transactions",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC'}",
        "record_name": "2993@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis lot details y axis the number of lot details , and sort by the names in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "lot",
            "details",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "lot",
            "details",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "names",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "lot_details",
            ",",
            "COUNT",
            "(",
            "lot_details",
            ")",
            "FROM",
            "LOTS",
            "GROUP",
            "BY",
            "lot_details",
            "ORDER",
            "BY",
            "lot_details",
            "ASC"
        ],
        "choose_schema": "Table Lots, columns = [*,lot_id, investor_id, lot_details]",
        "choose_schema_rat_link": "lots.lot_details@SEP@lots.lot_id@SEP@transactions_lots.lot_id"
    },
    {
        "nl_queries": "Compute the total sum student capacity across gender as a pie chart .",
        "VQL": "Visualize PIE SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender",
        "db_id": "dorm_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize PIE SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender'}",
        "record_name": "1213",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Compute the total sum student capacity across gender as a pie chart .",
        "question_toks": [
            "Compute",
            "the",
            "total",
            "sum",
            "student",
            "capacity",
            "across",
            "gender",
            "as",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "gender",
            ",",
            "sum",
            "(",
            "student_capacity",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.student_capacity@SEP@student.stuid@SEP@lives_in.stuid@SEP@dorm.gender"
    },
    {
        "nl_queries": "Return a histogram on what are the names and distances for all airplanes ? , could you order by the x-axis in desc ?",
        "VQL": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , distance FROM Aircraft ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC'}",
        "record_name": "1414@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on what are the names and distances for all airplanes ? , could you order by the x-axis in desc ?",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "what",
            "are",
            "the",
            "names",
            "and",
            "distances",
            "for",
            "all",
            "airplanes",
            "?",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "x-axis",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft",
            "ORDER",
            "BY",
            "name",
            "DESC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]@SEP@Table aircraft, columns = [*,aid, name, distance]@SEP@Table employee, columns = [*,eid, name, salary]",
        "choose_schema_rat_link": "aircraft.name@SEP@employee.name@SEP@flight.distance@SEP@aircraft.distance"
    },
    {
        "nl_queries": "What are the category of music festivals with result \"Awarded\" , and count them by a pie chart",
        "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
        "db_id": "music_4",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
        "record_name": "2438",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Awarded\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "What are the category of music festivals with result \"Awarded\" , and count them by a pie chart",
        "question_toks": [
            "What",
            "are",
            "the",
            "category",
            "of",
            "music",
            "festivals",
            "with",
            "result",
            "\"Awarded\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "pie",
            "chart"
        ],
        "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Category",
            ",",
            "COUNT",
            "(",
            "Category",
            ")",
            "FROM",
            "music_festival",
            "WHERE",
            "RESULT",
            "=",
            "\"Awarded\"",
            "GROUP",
            "BY",
            "Category"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.music_festival@SEP@music_festival.category@SEP@music_festival.result"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , find hire_date and the average of manager_id bin hire_date by time , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1545",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , find hire_date and the average of manager_id bin hire_date by time , and visualize them by a bar chart .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "What is the total number of captains with different classes ? , sort by the bars in desc .",
        "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC'}",
        "record_name": "2753@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the total number of captains with different classes ? , sort by the bars in desc .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "with",
            "different",
            "classes",
            "?",
            ",",
            "sort",
            "by",
            "the",
            "bars",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "COUNT",
            "(",
            "Class",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Class",
            "ORDER",
            "BY",
            "Class",
            "DESC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "Use a histogram to show the department's id and corresponding employees' first name , list from high to low by the FIRST_NAME .",
        "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC'}",
        "record_name": "1899@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Use a histogram to show the department's id and corresponding employees' first name , list from high to low by the FIRST_NAME .",
        "question_toks": [
            "Use",
            "a",
            "histogram",
            "to",
            "show",
            "the",
            "department's",
            "id",
            "and",
            "corresponding",
            "employees'",
            "first",
            "name",
            ",",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "FIRST_NAME",
            "."
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "FIRST_NAME",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.employee_id@SEP@job_history.employee_id"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match'}",
        "record_name": "3137",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Regular_Season",
            "and",
            "All_Games_Percent",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "List all the participant ids and their details using a bar chart , and sort Y in asc order .",
        "VQL": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC",
        "db_id": "local_govt_in_alabama",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC'}",
        "record_name": "2130@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all the participant ids and their details using a bar chart , and sort Y in asc order .",
        "question_toks": [
            "List",
            "all",
            "the",
            "participant",
            "ids",
            "and",
            "their",
            "details",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "Y",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Participant_Details",
            ",",
            "Participant_ID",
            "FROM",
            "Participants",
            "ORDER",
            "BY",
            "Participant_ID",
            "ASC"
        ],
        "choose_schema": "Table Participants, columns = [*,Participant_ID, Participant_Type_Code, Participant_Details]@SEP@Table Participants_in_Events, columns = [*,Event_ID, Participant_ID]",
        "choose_schema_rat_link": "participants.participant_id@SEP@participants_in_events.participant_id@SEP@participants.participant_type_code@SEP@participants.participant_details"
    },
    {
        "nl_queries": "What is the minimum price of the rooms for each different decor ? Show me a bar chart ! , I want to sort in descending by the bars .",
        "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "db_id": "inn_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC'}",
        "record_name": "1970@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the minimum price of the rooms for each different decor ? Show me a bar chart ! , I want to sort in descending by the bars .",
        "question_toks": [
            "What",
            "is",
            "the",
            "minimum",
            "price",
            "of",
            "the",
            "rooms",
            "for",
            "each",
            "different",
            "decor",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "!",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "in",
            "descending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "min",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "decor",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.decor"
    },
    {
        "nl_queries": "Create a bar chart showing sum student capacity across gender , and rank total number in ascending order please .",
        "VQL": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) ASC'}",
        "record_name": "1211@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing sum student capacity across gender , and rank total number in ascending order please .",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "sum",
            "student",
            "capacity",
            "across",
            "gender",
            ",",
            "and",
            "rank",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT gender , sum(student_capacity) FROM dorm GROUP BY gender ORDER BY sum(student_capacity) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "sum",
            "(",
            "student_capacity",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "sum",
            "(",
            "student_capacity",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.student_capacity@SEP@student.stuid@SEP@lives_in.stuid@SEP@dorm.gender"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , and show Y-axis in descending order .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\"}",
        "record_name": "1775@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , and show Y-axis in descending order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "show",
            "Y-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of personal_name and author_id .",
        "VQL": "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1264",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of personal_name and author_id .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "personal_name",
            "and",
            "author_id",
            "."
        ],
        "query": "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "personal_name",
            ",",
            "author_id",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]@SEP@Table Courses, columns = [*,course_id, author_id, subject_id, course_name, course_description]",
        "choose_schema_rat_link": "course_authors_and_tutors.personal_name@SEP@students.personal_name@SEP@course_authors_and_tutors.author_id@SEP@course_authors_and_tutors.author_tutor_atb@SEP@courses.author_id"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart , display by the Y in ascending .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC'}",
        "record_name": "3137@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart , display by the Y in ascending .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Regular_Season",
            "and",
            "All_Games_Percent",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "by",
            "the",
            "Y",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , show by the names in asc .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1561@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , show by the names in asc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "show",
            "by",
            "the",
            "names",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Stacked bar chart of the total number for with each Sex in each rank , could you rank in asc by the Y-axis ?",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
        "db_id": "activity_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC'}",
        "record_name": "11@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ],
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stacked bar chart of the total number for with each Sex in each rank , could you rank in asc by the Y-axis ?",
        "question_toks": [
            "Stacked",
            "bar",
            "chart",
            "of",
            "the",
            "total",
            "number",
            "for",
            "with",
            "each",
            "Sex",
            "in",
            "each",
            "rank",
            ",",
            "could",
            "you",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "Sex",
            ",",
            "Rank",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "student.sex@SEP@faculty.sex@SEP@faculty.rank"
    },
    {
        "nl_queries": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , sort by the X in desc please .",
        "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "db_id": "music_4",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC'}",
        "record_name": "2439@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Awarded\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return the categories of music festivals that have the result \"Awarded\" , and count them by a bar chart , sort by the X in desc please .",
        "question_toks": [
            "Return",
            "the",
            "categories",
            "of",
            "music",
            "festivals",
            "that",
            "have",
            "the",
            "result",
            "\"Awarded\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "COUNT",
            "(",
            "Category",
            ")",
            "FROM",
            "music_festival",
            "WHERE",
            "RESULT",
            "=",
            "\"Awarded\"",
            "GROUP",
            "BY",
            "Category",
            "ORDER",
            "BY",
            "Category",
            "DESC"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.music_festival@SEP@music_festival.category@SEP@music_festival.result"
    },
    {
        "nl_queries": "Plot meter_100 by grouped by meter 300 as a bar graph , I want to order by the names in descending .",
        "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC'}",
        "record_name": "2917@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot meter_100 by grouped by meter 300 as a bar graph , I want to order by the names in descending .",
        "question_toks": [
            "Plot",
            "meter_100",
            "by",
            "grouped",
            "by",
            "meter",
            "300",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "names",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_300 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_300",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_300@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.name@SEP@stadium.name@SEP@event.name"
    },
    {
        "nl_queries": "Show maximal pet age from each pettype , I want to order from low to high by the bars .",
        "VQL": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC'}",
        "record_name": "2547@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show maximal pet age from each pettype , I want to order from low to high by the bars .",
        "question_toks": [
            "Show",
            "maximal",
            "pet",
            "age",
            "from",
            "each",
            "pettype",
            ",",
            "I",
            "want",
            "to",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , max(pet_age) FROM pets GROUP BY PetType ORDER BY PetType ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "PetType",
            "ORDER",
            "BY",
            "PetType",
            "ASC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.pet_age@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@student.age"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , visualize a line chart about the change of manager_id over hire_date , and could you display by the X from high to low ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1773@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , visualize a line chart about the change of manager_id over hire_date , and could you display by the X from high to low ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "visualize",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "manager_id",
            "over",
            "hire_date",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "X",
            "from",
            "high",
            "to",
            "low",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "MANAGER_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH'}",
        "record_name": "1585",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Give me a histogram for what are the memories and carriers of phones ? , list bars from low to high order .",
        "VQL": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "db_id": "phone_market",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier ASC'}",
        "record_name": "2573@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a histogram for what are the memories and carriers of phones ? , list bars from low to high order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "histogram",
            "for",
            "what",
            "are",
            "the",
            "memories",
            "and",
            "carriers",
            "of",
            "phones",
            "?",
            ",",
            "list",
            "bars",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Carrier , AVG(Memory_in_G) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Carrier",
            ",",
            "AVG",
            "(",
            "Memory_in_G",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier",
            "ORDER",
            "BY",
            "Carrier",
            "ASC"
        ],
        "choose_schema": "Table phone, columns = [*,Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "choose_schema_rat_link": "phone.memory_in_g@SEP@phone.carrier@SEP@phone.phone_id@SEP@phone_market.phone_id"
    },
    {
        "nl_queries": "Visualize a pie chart about the proportion of All_Road and School_ID .",
        "VQL": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Road , School_ID FROM basketball_match'}",
        "record_name": "3153",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Visualize a pie chart about the proportion of All_Road and School_ID .",
        "question_toks": [
            "Visualize",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "All_Road",
            "and",
            "School_ID",
            "."
        ],
        "query": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "For the transaction dates if share count is smaller than 10 , bin the dates into the year interval , and count them using a line chart , and list in ascending by the x axis please .",
        "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
        "db_id": "tracking_share_transactions",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction ASC', 'binning': 'BIN date_of_transaction BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR'}",
        "record_name": "2988@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                11,
                "year"
            ],
            "vis": 2
        },
        "question": "For the transaction dates if share count is smaller than 10 , bin the dates into the year interval , and count them using a line chart , and list in ascending by the x axis please .",
        "question_toks": [
            "For",
            "the",
            "transaction",
            "dates",
            "if",
            "share",
            "count",
            "is",
            "smaller",
            "than",
            "10",
            ",",
            "bin",
            "the",
            "dates",
            "into",
            "the",
            "year",
            "interval",
            ",",
            "and",
            "count",
            "them",
            "using",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "list",
            "in",
            "ascending",
            "by",
            "the",
            "x",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_of_transaction",
            ",",
            "COUNT",
            "(",
            "date_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "share_count",
            "<",
            "10",
            "ORDER",
            "BY",
            "date_of_transaction",
            "ASC",
            "BIN",
            "date_of_transaction",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Transactions, columns = [*,transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "choose_schema_rat_link": "transactions.share_count@SEP@transactions.transaction_id@SEP@transactions.transaction_type_code@SEP@transactions_lots.transaction_id@SEP@transactions.date_of_transaction"
    },
    {
        "nl_queries": "Return a bar chart on what are the names and prices of all products in the store ? , and I want to sort by the Y-axis in asc .",
        "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) ASC'}",
        "record_name": "2179@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on what are the names and prices of all products in the store ? , and I want to sort by the Y-axis in asc .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "what",
            "are",
            "the",
            "names",
            "and",
            "prices",
            "of",
            "all",
            "products",
            "in",
            "the",
            "store",
            "?",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "Y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY AVG(Price) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "AVG",
            "(",
            "Price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Price",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "A bar chart groups the lot details , and computes the number of each lot details , could you rank bar from high to low order ?",
        "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
        "db_id": "tracking_share_transactions",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC'}",
        "record_name": "2993@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart groups the lot details , and computes the number of each lot details , could you rank bar from high to low order ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "groups",
            "the",
            "lot",
            "details",
            ",",
            "and",
            "computes",
            "the",
            "number",
            "of",
            "each",
            "lot",
            "details",
            ",",
            "could",
            "you",
            "rank",
            "bar",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "lot_details",
            ",",
            "COUNT",
            "(",
            "lot_details",
            ")",
            "FROM",
            "LOTS",
            "GROUP",
            "BY",
            "lot_details",
            "ORDER",
            "BY",
            "lot_details",
            "DESC"
        ],
        "choose_schema": "Table Lots, columns = [*,lot_id, investor_id, lot_details]",
        "choose_schema_rat_link": "lots.lot_details@SEP@lots.lot_id@SEP@transactions_lots.lot_id"
    },
    {
        "nl_queries": "How many singers are from each country , I want to show by the bar from low to high .",
        "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "db_id": "concert_singer",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC'}",
        "record_name": "690@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many singers are from each country , I want to show by the bar from low to high .",
        "question_toks": [
            "How",
            "many",
            "singers",
            "are",
            "from",
            "each",
            "country",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "bar",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "country",
            "ORDER",
            "BY",
            "Country",
            "ASC"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.singer_id@SEP@singer_in_concert.singer_id@SEP@singer.country"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1768",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show me about the correlation between author_id and gender_mf in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1255",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between author_id and gender_mf in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "author_id",
            "and",
            "gender_mf",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "author_id",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]@SEP@Table Courses, columns = [*,course_id, author_id, subject_id, course_name, course_description]",
        "choose_schema_rat_link": "course_authors_and_tutors.author_id@SEP@course_authors_and_tutors.author_tutor_atb@SEP@courses.author_id@SEP@course_authors_and_tutors.gender_mf"
    },
    {
        "nl_queries": "Draw a pie chart for what are the names and prices of products that cost at least 180 , sorted by price decreasing and name ascending ?",
        "VQL": "Visualize PIE SELECT Name , Price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC'}",
        "record_name": "2187",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    180.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart for what are the names and prices of products that cost at least 180 , sorted by price decreasing and name ascending ?",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "names",
            "and",
            "prices",
            "of",
            "products",
            "that",
            "cost",
            "at",
            "least",
            "180",
            ",",
            "sorted",
            "by",
            "price",
            "decreasing",
            "and",
            "name",
            "ascending",
            "?"
        ],
        "query": "Visualize PIE SELECT Name , Price FROM products WHERE price >= 180 ORDER BY price DESC , name ASC",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Name",
            ",",
            "Price",
            "FROM",
            "products",
            "WHERE",
            "price",
            ">=",
            "180",
            "ORDER",
            "BY",
            "price",
            "DESC",
            ",",
            "name",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "What is the number of players who have points less than 30 for each position Plot them as bar chart , order the total number from high to low order .",
        "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "db_id": "sports_competition",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC'}",
        "record_name": "2818@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of players who have points less than 30 for each position Plot them as bar chart , order the total number from high to low order .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "players",
            "who",
            "have",
            "points",
            "less",
            "than",
            "30",
            "for",
            "each",
            "position",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "order",
            "the",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Position",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "points",
            "<",
            "30",
            "GROUP",
            "BY",
            "POSITION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table player, columns = [*,Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "choose_schema_rat_link": "player.player_id@SEP@player.points@SEP@player.position@SEP@club_rank.total"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between Body_Builder_ID and People_ID .",
        "VQL": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Body_Builder_ID , People_ID FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder'}",
        "record_name": "352",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between Body_Builder_ID and People_ID .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "Body_Builder_ID",
            "and",
            "People_ID",
            "."
        ],
        "query": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Body_Builder_ID",
            ",",
            "People_ID",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "choose_schema_rat_link": "body_builder.body_builder_id@SEP@body_builder.people_id@SEP@people.people_id"
    },
    {
        "nl_queries": "Give me line charts of worldwide gross the number of date in location from over year date in location from by major genres Location_Code , and order in descending by the Date_in_Location_From please .",
        "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC', 'binning': 'BIN Date_in_Location_From BY YEAR'}, 'VQL': 'Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR'}",
        "record_name": "776@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me line charts of worldwide gross the number of date in location from over year date in location from by major genres Location_Code , and order in descending by the Date_in_Location_From please .",
        "question_toks": [
            "Give",
            "me",
            "line",
            "charts",
            "of",
            "worldwide",
            "gross",
            "the",
            "number",
            "of",
            "date",
            "in",
            "location",
            "from",
            "over",
            "year",
            "date",
            "in",
            "location",
            "from",
            "by",
            "major",
            "genres",
            "Location_Code",
            ",",
            "and",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "Date_in_Location_From",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Location_From",
            ",",
            "COUNT",
            "(",
            "Date_in_Location_From",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "ORDER",
            "BY",
            "Date_in_Location_From",
            "DESC",
            "BIN",
            "Date_in_Location_From",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.location_code"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , visualize a line chart about the change of employee_id over hire_date .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'\"}",
        "record_name": "1772",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , visualize a line chart about the change of employee_id over hire_date .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "visualize",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "employee_id",
            "over",
            "hire_date",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday , order in desc by the y axis please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1594@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday , order in desc by the y axis please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "What is the relationship between People_ID and Clean_Jerk ?",
        "VQL": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Clean_Jerk FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder'}",
        "record_name": "361",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between People_ID and Clean_Jerk ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "People_ID",
            "and",
            "Clean_Jerk",
            "?"
        ],
        "query": "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Clean_Jerk",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "choose_schema_rat_link": "body_builder.people_id@SEP@people.people_id@SEP@body_builder.clean_jerk"
    },
    {
        "nl_queries": "Give me a pie to show the number of all home from different all home .",
        "VQL": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3159",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Give me a pie to show the number of all home from different all home .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "pie",
            "to",
            "show",
            "the",
            "number",
            "of",
            "all",
            "home",
            "from",
            "different",
            "all",
            "home",
            "."
        ],
        "query": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Home",
            ",",
            "COUNT",
            "(",
            "All_Home",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.all_home"
    },
    {
        "nl_queries": "What are the number of rooms for each bed type Show bar chart , I want to show by the x axis in ascending .",
        "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC'}",
        "record_name": "1967@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the number of rooms for each bed type Show bar chart , I want to show by the x axis in ascending .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "rooms",
            "for",
            "each",
            "bed",
            "type",
            "Show",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY bedType ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType",
            "ORDER",
            "BY",
            "bedType",
            "ASC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.bedtype@SEP@reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds"
    },
    {
        "nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart , I want to rank total number from high to low order .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC",
        "db_id": "cre_Theme_park",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC'}",
        "record_name": "888@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way in a bar chart , I want to rank total number from high to low order .",
        "question_toks": [
            "Show",
            "different",
            "ways",
            "to",
            "get",
            "to",
            "attractions",
            "and",
            "the",
            "number",
            "of",
            "attractions",
            "that",
            "can",
            "be",
            "accessed",
            "in",
            "the",
            "corresponding",
            "way",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "ref_attraction_types.attraction_type_code@SEP@ref_attraction_types.attraction_type_description@SEP@tourist_attractions.attraction_type_code"
    },
    {
        "nl_queries": "Bar chart x axis location y axis the average of number of platforms , and rank total number in descending order .",
        "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC'}",
        "record_name": "3046@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis location y axis the average of number of platforms , and rank total number in descending order .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "location",
            "y",
            "axis",
            "the",
            "average",
            "of",
            "number",
            "of",
            "platforms",
            ",",
            "and",
            "rank",
            "total",
            "number",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location@SEP@station.total_passengers"
    },
    {
        "nl_queries": "Visualize a pie chart with what are the top 5 countries by number of invoices and how many do they have ?",
        "VQL": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "db_id": "store_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5', 'binning': ''}, 'VQL': 'Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5'}",
        "record_name": "2849",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                44,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    44,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Visualize a pie chart with what are the top 5 countries by number of invoices and how many do they have ?",
        "question_toks": [
            "Visualize",
            "a",
            "pie",
            "chart",
            "with",
            "what",
            "are",
            "the",
            "top",
            "5",
            "countries",
            "by",
            "number",
            "of",
            "invoices",
            "and",
            "how",
            "many",
            "do",
            "they",
            "have",
            "?"
        ],
        "query": "Visualize PIE SELECT billing_country , COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "billing_country",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "5"
        ],
        "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
        "choose_schema_rat_link": "employees.country@SEP@customers.country@SEP@invoices.invoice_date@SEP@invoice_lines.invoice_id"
    },
    {
        "nl_queries": "What is the number of films of each director ? Return a bar chart , and could you display by the how many directed by in asc ?",
        "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC'}",
        "record_name": "443@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of films of each director ? Return a bar chart , and could you display by the how many directed by in asc ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "films",
            "of",
            "each",
            "director",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "how",
            "many",
            "directed",
            "by",
            "in",
            "asc",
            "?"
        ],
        "query": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Directed_by",
            ",",
            "COUNT",
            "(",
            "Directed_by",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "Directed_by",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Directed_by",
            ")",
            "ASC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code]",
        "choose_schema_rat_link": "film.directed_by@SEP@film.number_in_season@SEP@film.film_id@SEP@schedule.film_id"
    },
    {
        "nl_queries": "Show me a pie chart comparing the total number of captains in each class .",
        "VQL": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
        "db_id": "ship_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class'}",
        "record_name": "2752",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show me a pie chart comparing the total number of captains in each class .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "pie",
            "chart",
            "comparing",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "in",
            "each",
            "class",
            "."
        ],
        "query": "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Class",
            ",",
            "COUNT",
            "(",
            "Class",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Class"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "What are the distinct move in dates of the residents , and count them by a bar chart , and list by the Y in desc .",
        "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY",
        "db_id": "local_govt_and_lot",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC', 'binning': 'BIN date_moved_in BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY'}",
        "record_name": "2079@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "weekday"
            ],
            "vis": 0
        },
        "question": "What are the distinct move in dates of the residents , and count them by a bar chart , and list by the Y in desc .",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "move",
            "in",
            "dates",
            "of",
            "the",
            "residents",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "by",
            "the",
            "Y",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM residents  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_moved_in",
            ",",
            "COUNT",
            "(",
            "date_moved_in",
            ")",
            "FROM",
            "residents",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_moved_in",
            ")",
            "DESC",
            "BIN",
            "date_moved_in",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Residents, columns = [*,resident_id, property_id, date_moved_in, date_moved_out, other_details]@SEP@Table Residents_Services, columns = [*,resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details]@SEP@Table Customer_Events, columns = [*,Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id]@SEP@Table Customer_Event_Notes, columns = [*,Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in]",
        "choose_schema_rat_link": "residents.date_moved_in@SEP@residents.date_moved_out@SEP@residents_services.date_moved_in@SEP@residents_services.date_requested@SEP@residents_services.date_provided@SEP@customer_events.date_moved_in@SEP@customer_event_notes.date_moved_in@SEP@timed_status_of_things.date_and_date@SEP@timed_locations_of_things.date_and_time@SEP@residents.resident_id@SEP@residents_services.resident_id@SEP@customer_events.resident_id@SEP@customer_event_notes.resident_id"
    },
    {
        "nl_queries": "List the position of players and the average number of points of players of each position by a bar chart .",
        "VQL": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION",
        "db_id": "sports_competition",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , avg(Points) FROM player GROUP BY POSITION', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION'}",
        "record_name": "2827",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the position of players and the average number of points of players of each position by a bar chart .",
        "question_toks": [
            "List",
            "the",
            "position",
            "of",
            "players",
            "and",
            "the",
            "average",
            "number",
            "of",
            "points",
            "of",
            "players",
            "of",
            "each",
            "position",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Position",
            ",",
            "avg",
            "(",
            "Points",
            ")",
            "FROM",
            "player",
            "GROUP",
            "BY",
            "POSITION"
        ],
        "choose_schema": "Table player, columns = [*,Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "choose_schema_rat_link": "player.position@SEP@player.player_id@SEP@player.points"
    },
    {
        "nl_queries": "Show the number of apartment bookings in each year and bin booking end date by year with a bar chart , could you list Y in ascending order please ?",
        "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC', 'binning': 'BIN booking_end_date BY YEAR'}, 'VQL': 'Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR'}",
        "record_name": "83@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            27,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "year"
            ],
            "vis": 0
        },
        "question": "Show the number of apartment bookings in each year and bin booking end date by year with a bar chart , could you list Y in ascending order please ?",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "apartment",
            "bookings",
            "in",
            "each",
            "year",
            "and",
            "bin",
            "booking",
            "end",
            "date",
            "by",
            "year",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "list",
            "Y",
            "in",
            "ascending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_end_date",
            ",",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "ASC",
            "BIN",
            "booking_end_date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.apt_booking_id@SEP@view_unit_status.apt_booking_id@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@guests.date_of_birth"
    },
    {
        "nl_queries": "Give me the comparison about ACC_Percent over the ACC_Regular_Season , sort by the ACC_Percent in ascending .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC'}",
        "record_name": "3135@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about ACC_Percent over the ACC_Regular_Season , sort by the ACC_Percent in ascending .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "ACC_Percent",
            "over",
            "the",
            "ACC_Regular_Season",
            ",",
            "sort",
            "by",
            "the",
            "ACC_Percent",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "ACC_Percent",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Find all types of store and number of them . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
        "db_id": "store_product",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , count(*) FROM store GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE'}",
        "record_name": "2862",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find all types of store and number of them . Visualize by bar chart .",
        "question_toks": [
            "Find",
            "all",
            "types",
            "of",
            "store",
            "and",
            "number",
            "of",
            "them",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "store",
            "GROUP",
            "BY",
            "TYPE"
        ],
        "choose_schema": "Table store, columns = [*,Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]",
        "choose_schema_rat_link": "store.number_of_product_category@SEP@store.type@SEP@store.store_id@SEP@store.store_name@SEP@store_product.store_id@SEP@store_district.store_id"
    },
    {
        "nl_queries": "Give me the comparison about the amount of Start_from over the Start_from bin start_from by weekday .",
        "VQL": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY WEEKDAY'}",
        "record_name": "1337",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Give me the comparison about the amount of Start_from over the Start_from bin start_from by weekday .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "amount",
            "of",
            "Start_from",
            "over",
            "the",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from"
    },
    {
        "nl_queries": "On what dates were employees without the letter M in their first names hired , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1954",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    true,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%M%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "On what dates were employees without the letter M in their first names hired , and count them by a bar chart",
        "question_toks": [
            "On",
            "what",
            "dates",
            "were",
            "employees",
            "without",
            "the",
            "letter",
            "M",
            "in",
            "their",
            "first",
            "names",
            "hired",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'%M%'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Visualize a pie chart with how much does each charge type costs ? List both charge type and amount .",
        "VQL": "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
        "db_id": "dog_kennels",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT charge_type , charge_amount FROM Charges', 'binning': ''}, 'VQL': 'Visualize PIE SELECT charge_type , charge_amount FROM Charges'}",
        "record_name": "1173",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Visualize a pie chart with how much does each charge type costs ? List both charge type and amount .",
        "question_toks": [
            "Visualize",
            "a",
            "pie",
            "chart",
            "with",
            "how",
            "much",
            "does",
            "each",
            "charge",
            "type",
            "costs",
            "?",
            "List",
            "both",
            "charge",
            "type",
            "and",
            "amount",
            "."
        ],
        "query": "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "choose_schema": "Table Charges, columns = [*,charge_id, charge_type, charge_amount]",
        "choose_schema_rat_link": "charges.charge_type@SEP@charges.charge_id@SEP@charges.charge_amount@SEP@treatments.cost_of_treatment"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , sort x axis in desc order please .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1561@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , sort x axis in desc order please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "x",
            "axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the average of department_id over the hire_date bin hire_date by weekday , and sort Y from low to high order please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1555@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the average of department_id over the hire_date bin hire_date by weekday , and sort Y from low to high order please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "department_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "sort",
            "Y",
            "from",
            "low",
            "to",
            "high",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Return a pie chart about the proportion of All_Road and All_Games_Percent .",
        "VQL": "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Road , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match'}",
        "record_name": "3142",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Return a pie chart about the proportion of All_Road and All_Games_Percent .",
        "question_toks": [
            "Return",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "All_Road",
            "and",
            "All_Games_Percent",
            "."
        ],
        "query": "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Road",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Count the number of people of each sex who have a weight higher than 85 by a bar chart .",
        "VQL": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex'}",
        "record_name": "403",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the number of people of each sex who have a weight higher than 85 by a bar chart .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "people",
            "of",
            "each",
            "sex",
            "who",
            "have",
            "a",
            "weight",
            "higher",
            "than",
            "85",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "WHERE",
            "weight",
            ">",
            "85",
            "GROUP",
            "BY",
            "sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "Show the order ids and the number of invoices for each order with a scatter chart .",
        "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
        "db_id": "customers_and_invoices",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT order_id , count(*) FROM Invoices GROUP BY order_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT order_id , count(*) FROM Invoices GROUP BY order_id'}",
        "record_name": "963",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the order ids and the number of invoices for each order with a scatter chart .",
        "question_toks": [
            "Show",
            "the",
            "order",
            "ids",
            "and",
            "the",
            "number",
            "of",
            "invoices",
            "for",
            "each",
            "order",
            "with",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Invoices",
            "GROUP",
            "BY",
            "order_id"
        ],
        "choose_schema": "Table Orders, columns = [*,order_id, customer_id, date_order_placed, order_details]@SEP@Table Invoices, columns = [*,invoice_number, order_id, invoice_date]@SEP@Table Order_Items, columns = [*,order_item_id, order_id, product_id, product_quantity, other_order_item_details]",
        "choose_schema_rat_link": "orders.order_id@SEP@invoices.order_id@SEP@order_items.order_id@SEP@orders.order_details@SEP@order_items.order_item_id@SEP@invoice_line_items.order_item_id@SEP@invoices.invoice_number@SEP@invoices.invoice_date@SEP@financial_transactions.invoice_number@SEP@invoice_line_items.invoice_number"
    },
    {
        "nl_queries": "A line chart shows the change of the sum of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR'}",
        "record_name": "1350",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "A line chart shows the change of the sum of Shop_ID over Start_from , and group by attribute Is_full_time and bin start_from by time",
        "question_toks": [
            "A",
            "line",
            "chart",
            "shows",
            "the",
            "change",
            "of",
            "the",
            "sum",
            "of",
            "Shop_ID",
            "over",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "time"
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Visualize a bar chart for what is the age and hometown of every teacher ?",
        "VQL": "Visualize BAR SELECT Hometown , Age FROM teacher",
        "db_id": "course_teach",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Hometown , Age FROM teacher', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Hometown , Age FROM teacher'}",
        "record_name": "711",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what is the age and hometown of every teacher ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "every",
            "teacher",
            "?"
        ],
        "query": "Visualize BAR SELECT Hometown , Age FROM teacher",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Hometown",
            ",",
            "Age",
            "FROM",
            "teacher"
        ],
        "choose_schema": "Table teacher, columns = [*,Teacher_ID, Name, Age, Hometown]",
        "choose_schema_rat_link": "teacher.age@SEP@teacher.hometown@SEP@teacher.teacher_id@SEP@course_arrange.teacher_id"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between School_ID and ACC_Percent .",
        "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , ACC_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match'}",
        "record_name": "3107",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between School_ID and ACC_Percent .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "School_ID",
            "and",
            "ACC_Percent",
            "."
        ],
        "query": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "what are different nationalities of people and the corresponding number of people from each nation ?",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "db_id": "poker_player",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality'}",
        "record_name": "2594",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what are different nationalities of people and the corresponding number of people from each nation ?",
        "question_toks": [
            "what",
            "are",
            "different",
            "nationalities",
            "of",
            "people",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "people",
            "from",
            "each",
            "nation",
            "?"
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Nationality, Name, Birth_Date, Height]",
        "choose_schema_rat_link": "people.nationality@SEP@poker_player.people_id@SEP@people.people_id"
    },
    {
        "nl_queries": "Create a pie chart showing the number of payment method code across payment method code .",
        "VQL": "Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code",
        "db_id": "customers_and_products_contacts",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code'}",
        "record_name": "1004",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Create a pie chart showing the number of payment method code across payment method code .",
        "question_toks": [
            "Create",
            "a",
            "pie",
            "chart",
            "showing",
            "the",
            "number",
            "of",
            "payment",
            "method",
            "code",
            "across",
            "payment",
            "method",
            "code",
            "."
        ],
        "query": "Visualize PIE SELECT payment_method_code , COUNT(payment_method_code) FROM customers GROUP BY payment_method_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "payment_method_code",
            ",",
            "COUNT",
            "(",
            "payment_method_code",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "choose_schema_rat_link": "customers.payment_method_code"
    },
    {
        "nl_queries": "List the number of games in each season with a line chart , and show x-axis in ascending order .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
        "db_id": "game_injury",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
        "record_name": "1495@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "year"
            ],
            "vis": 2
        },
        "question": "List the number of games in each season with a line chart , and show x-axis in ascending order .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "games",
            "in",
            "each",
            "season",
            "with",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "show",
            "x-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "ORDER",
            "BY",
            "Season",
            "ASC",
            "BIN",
            "Season",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@injury_accident.game_id@SEP@game.season"
    },
    {
        "nl_queries": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way Plot them as bar chart , and could you list the total number in asc order ?",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC",
        "db_id": "cre_Theme_park",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC'}",
        "record_name": "888@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way Plot them as bar chart , and could you list the total number in asc order ?",
        "question_toks": [
            "Show",
            "different",
            "ways",
            "to",
            "get",
            "to",
            "attractions",
            "and",
            "the",
            "number",
            "of",
            "attractions",
            "that",
            "can",
            "be",
            "accessed",
            "in",
            "the",
            "corresponding",
            "way",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "list",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "ref_attraction_types.attraction_type_code@SEP@ref_attraction_types.attraction_type_description@SEP@tourist_attractions.attraction_type_code"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of name and ID , and list by the names from high to low .",
        "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , ID FROM swimmer ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC'}",
        "record_name": "2914@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of name and ID , and list by the names from high to low .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "ID",
            ",",
            "and",
            "list",
            "by",
            "the",
            "names",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "name",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.name@SEP@stadium.name@SEP@event.name@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Plot season by how many season as a line chart , and could you sort by the x-axis in ascending ?",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
        "db_id": "game_injury",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC', 'binning': 'BIN Season BY YEAR'}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR'}",
        "record_name": "1495@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "year"
            ],
            "vis": 2
        },
        "question": "Plot season by how many season as a line chart , and could you sort by the x-axis in ascending ?",
        "question_toks": [
            "Plot",
            "season",
            "by",
            "how",
            "many",
            "season",
            "as",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "sort",
            "by",
            "the",
            "x-axis",
            "in",
            "ascending",
            "?"
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game  ORDER BY Season ASC BIN Season BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "ORDER",
            "BY",
            "Season",
            "ASC",
            "BIN",
            "Season",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "game.season"
    },
    {
        "nl_queries": "Give me the comparison about the sum of Height over the Sex , and group by attribute Sex by a bar chart , and could you rank X from high to low order ?",
        "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC'}",
        "record_name": "379@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of Height over the Sex , and group by attribute Sex by a bar chart , and could you rank X from high to low order ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "Height",
            "over",
            "the",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "X",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.height@SEP@people.sex"
    },
    {
        "nl_queries": "Bar chart x axis location y axis how many location , and rank by the bars in asc .",
        "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
        "db_id": "performance_attendance",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC'}",
        "record_name": "2539@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis location y axis how many location , and rank by the bars in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "location",
            "y",
            "axis",
            "how",
            "many",
            "location",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "bars",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "Location",
            ")",
            "FROM",
            "performance",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "Location",
            "ASC"
        ],
        "choose_schema": "Table performance, columns = [*,Performance_ID, Date, Host, Location, Attendance]",
        "choose_schema_rat_link": "performance.location"
    },
    {
        "nl_queries": "For employees with first names that end with the letter m , give me a bar chart to show their average salary , display from high to low by the bar .",
        "VQL": "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC\"}",
        "record_name": "1804@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%m\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For employees with first names that end with the letter m , give me a bar chart to show their average salary , display from high to low by the bar .",
        "question_toks": [
            "For",
            "employees",
            "with",
            "first",
            "names",
            "that",
            "end",
            "with",
            "the",
            "letter",
            "m",
            ",",
            "give",
            "me",
            "a",
            "bar",
            "chart",
            "to",
            "show",
            "their",
            "average",
            "salary",
            ",",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%m'",
            "GROUP",
            "BY",
            "FIRST_NAME",
            "ORDER",
            "BY",
            "FIRST_NAME",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@job_history.end_date@SEP@employees.salary"
    },
    {
        "nl_queries": "Give me a line chart about each year's maximum score , I want to order x axis from low to high order .",
        "VQL": "Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC'}",
        "record_name": "3247@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Give me a line chart about each year's maximum score , I want to order x axis from low to high order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "line",
            "chart",
            "about",
            "each",
            "year's",
            "maximum",
            "score",
            ",",
            "I",
            "want",
            "to",
            "order",
            "x",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT Year , max(Score) FROM WINE GROUP BY Year ORDER BY Year ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "max",
            "(",
            "Score",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Year",
            "ORDER",
            "BY",
            "Year",
            "ASC"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.year@SEP@wine.score"
    },
    {
        "nl_queries": "What is the average age for each city and what are those cities Show bar chart , could you show bars in asc order ?",
        "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC'}",
        "record_name": "1233@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average age for each city and what are those cities Show bar chart , could you show bars in asc order ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "city",
            "and",
            "what",
            "are",
            "those",
            "cities",
            "Show",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "show",
            "bars",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city_code",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "city_code",
            "ORDER",
            "BY",
            "city_code",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@student.city_code"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of ACC_Road and School_ID , and group by attribute All_Home , and display by the total number in descending .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC'}",
        "record_name": "3089@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of ACC_Road and School_ID , and group by attribute All_Home , and display by the total number in descending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "display",
            "by",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "School_ID",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Bar chart of sum shop id from each is full time",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1345",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of sum shop id from each is full time",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "sum",
            "shop",
            "id",
            "from",
            "each",
            "is",
            "full",
            "time"
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.is_full_time@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Show the number of documents for each receipt date and bin by year with a line chart , sort by the x-axis in desc please .",
        "VQL": "Visualize LINE SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC BIN receipt_date BY YEAR",
        "db_id": "cre_Doc_Control_Systems",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC', 'binning': 'BIN receipt_date BY YEAR'}, 'VQL': 'Visualize LINE SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC BIN receipt_date BY YEAR'}",
        "record_name": "729@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                16,
                "year"
            ],
            "vis": 2
        },
        "question": "Show the number of documents for each receipt date and bin by year with a line chart , sort by the x-axis in desc please .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "documents",
            "for",
            "each",
            "receipt",
            "date",
            "and",
            "bin",
            "by",
            "year",
            "with",
            "a",
            "line",
            "chart",
            ",",
            "sort",
            "by",
            "the",
            "x-axis",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT receipt_date , COUNT(receipt_date) FROM Documents  ORDER BY receipt_date DESC BIN receipt_date BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "receipt_date",
            ",",
            "COUNT",
            "(",
            "receipt_date",
            ")",
            "FROM",
            "Documents",
            "ORDER",
            "BY",
            "receipt_date",
            "DESC",
            "BIN",
            "receipt_date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Documents, columns = [*,document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]",
        "choose_schema_rat_link": "documents.receipt_date@SEP@documents.document_id@SEP@documents.document_status_code@SEP@documents.document_type_code@SEP@document_drafts.document_id@SEP@draft_copies.document_id@SEP@circulation_history.document_id@SEP@documents_mailed.document_id@SEP@documents.receipt_number"
    },
    {
        "nl_queries": "What are the number of the dates with a maximum temperature higher than 85 ? , I want to rank by the y-axis in asc .",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY'}",
        "record_name": "315@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "What are the number of the dates with a maximum temperature higher than 85 ? , I want to rank by the y-axis in asc .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "with",
            "a",
            "maximum",
            "temperature",
            "higher",
            "than",
            "85",
            "?",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date",
            ")",
            "ASC",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "What is the relationship between Body_Builder_ID and People_ID ?",
        "VQL": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Body_Builder_ID , People_ID FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder'}",
        "record_name": "352",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between Body_Builder_ID and People_ID ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "Body_Builder_ID",
            "and",
            "People_ID",
            "?"
        ],
        "query": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Body_Builder_ID",
            ",",
            "People_ID",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "choose_schema_rat_link": "body_builder.body_builder_id@SEP@body_builder.people_id@SEP@people.people_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID'}",
        "record_name": "1607",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "department_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Show sum transaction amount from each transaction type , and list by the total number in asc .",
        "VQL": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC",
        "db_id": "customers_and_invoices",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC'}",
        "record_name": "972@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            40,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show sum transaction amount from each transaction type , and list by the total number in asc .",
        "question_toks": [
            "Show",
            "sum",
            "transaction",
            "amount",
            "from",
            "each",
            "transaction",
            "type",
            ",",
            "and",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "transaction_type",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type",
            "ORDER",
            "BY",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Financial_Transactions, columns = [*,transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]",
        "choose_schema_rat_link": "financial_transactions.transaction_amount@SEP@financial_transactions.transaction_type@SEP@financial_transactions.transaction_id@SEP@financial_transactions.transaction_date@SEP@financial_transactions.transaction_comment"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Home and the average of School_ID , and group by attribute All_Home , order from low to high by the x-axis please .",
        "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC'}",
        "record_name": "3105@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Home and the average of School_ID , and group by attribute All_Home , order from low to high by the x-axis please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "average",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "AVG",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_600 and ID , order in asc by the ID .",
        "VQL": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC'}",
        "record_name": "2922@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_600 and ID , order in asc by the ID .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_600",
            "and",
            "ID",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "ID",
            "."
        ],
        "query": "Visualize BAR SELECT meter_600 , ID FROM swimmer ORDER BY ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_600",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Draw a pie chart for what are the proportion of the teams in elimination ?",
        "VQL": "Visualize PIE SELECT Team , COUNT(Team) FROM elimination GROUP BY Team",
        "db_id": "wrestler",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Team , COUNT(Team) FROM elimination GROUP BY Team', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Team , COUNT(Team) FROM elimination GROUP BY Team'}",
        "record_name": "3282",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart for what are the proportion of the teams in elimination ?",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "proportion",
            "of",
            "the",
            "teams",
            "in",
            "elimination",
            "?"
        ],
        "query": "Visualize PIE SELECT Team , COUNT(Team) FROM elimination GROUP BY Team",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "Team",
            ")",
            "FROM",
            "elimination",
            "GROUP",
            "BY",
            "Team"
        ],
        "choose_schema": "Table Elimination, columns = [*,Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "choose_schema_rat_link": "elimination.team@SEP@elimination.elimination_id@SEP@elimination.elimination_move"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , could you show in desc by the X-axis please ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC'}",
        "record_name": "1601@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , could you show in desc by the X-axis please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "could",
            "you",
            "show",
            "in",
            "desc",
            "by",
            "the",
            "X-axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road'}",
        "record_name": "3089",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart .",
        "question_toks": [
            "Find",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Count the number of captains that have each rank Visualize by bar chart , and order by the y-axis in ascending please .",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC'}",
        "record_name": "2747@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the number of captains that have each rank Visualize by bar chart , and order by the y-axis in ascending please .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "captains",
            "that",
            "have",
            "each",
            "rank",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "by",
            "the",
            "y-axis",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "rank",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality , could you order in descending by the Y-axis please ?",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC'}",
        "record_name": "2906@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality , could you order in descending by the Y-axis please ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "ID",
            "over",
            "the",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "could",
            "you",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "Y-axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "Give me the comparison about the average of Shop_ID over the Start_from , and group by attribute Is_full_time and bin start_from by weekday by a bar chart .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY'}",
        "record_name": "1332",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Give me the comparison about the average of Shop_ID over the Start_from , and group by attribute Is_full_time and bin start_from by weekday by a bar chart .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Shop_ID",
            "over",
            "the",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Draw a scatterplot of school id vs all_games_percent where school id is on the x-axis and points are colored by All_Road",
        "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road'}",
        "record_name": "3182",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatterplot of school id vs all_games_percent where school id is on the x-axis and points are colored by All_Road",
        "question_toks": [
            "Draw",
            "a",
            "scatterplot",
            "of",
            "school",
            "id",
            "vs",
            "all_games_percent",
            "where",
            "school",
            "id",
            "is",
            "on",
            "the",
            "x-axis",
            "and",
            "points",
            "are",
            "colored",
            "by",
            "All_Road"
        ],
        "query": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.school_id@SEP@university.school_id@SEP@university.school"
    },
    {
        "nl_queries": "Give me the comparison about the amount of Nationality over the Nationality , and group by attribute Nationality , and show in ascending by the X-axis .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2928@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the amount of Nationality over the Nationality , and group by attribute Nationality , and show in ascending by the X-axis .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "amount",
            "of",
            "Nationality",
            "over",
            "the",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "show",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of manager_id over the hire_date bin hire_date by time , and I want to order in desc by the total number .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1544@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of manager_id over the hire_date bin hire_date by time , and I want to order in desc by the total number .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "manager_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Draw a line chart about the change of the sum of Shop_ID over Start_from bin start_from by time , and I want to rank in asc by the x-axis .",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1358@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Draw a line chart about the change of the sum of Shop_ID over Start_from bin start_from by time , and I want to rank in asc by the x-axis .",
        "question_toks": [
            "Draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "the",
            "sum",
            "of",
            "Shop_ID",
            "over",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "time",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Give me the comparison about Weight over the Date_of_Birth by a bar chart , and display by the x axis in desc please .",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC'}",
        "record_name": "398@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Weight over the Date_of_Birth by a bar chart , and display by the x axis in desc please .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Weight",
            "over",
            "the",
            "Date_of_Birth",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Weight",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Date_of_Birth",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@candidate.date@SEP@people.date_of_birth"
    },
    {
        "nl_queries": "Bar graph to show meter_100 from different meter 400 , rank by the X in descending please .",
        "VQL": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 DESC'}",
        "record_name": "2919@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show meter_100 from different meter 400 , rank by the X in descending please .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "meter_100",
            "from",
            "different",
            "meter",
            "400",
            ",",
            "rank",
            "by",
            "the",
            "X",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_400 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_400",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_400",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_400@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of salary over the hire_date bin hire_date by weekday by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1592",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of salary over the hire_date bin hire_date by weekday by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "salary",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "What is the total revenue of companies started by founder Plot them as bar chart , and show in desc by the total number of revenue .",
        "VQL": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC'}",
        "record_name": "2201@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the total revenue of companies started by founder Plot them as bar chart , and show in desc by the total number of revenue .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "revenue",
            "of",
            "companies",
            "started",
            "by",
            "founder",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "in",
            "desc",
            "by",
            "the",
            "total",
            "number",
            "of",
            "revenue",
            "."
        ],
        "query": "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Founder",
            ",",
            "sum",
            "(",
            "revenue",
            ")",
            "FROM",
            "manufacturers",
            "GROUP",
            "BY",
            "founder",
            "ORDER",
            "BY",
            "sum",
            "(",
            "revenue",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]",
        "choose_schema_rat_link": "manufacturers.revenue@SEP@manufacturers.founder"
    },
    {
        "nl_queries": "Give me the number of the dates when the max temperature was higher than 85 .",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR'}",
        "record_name": "314",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "Give me the number of the dates when the max temperature was higher than 85 .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "when",
            "the",
            "max",
            "temperature",
            "was",
            "higher",
            "than",
            "85",
            "."
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85 BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.max_temperature_f@SEP@weather.date@SEP@weather.max_dew_point_f@SEP@weather.max_humidity@SEP@weather.max_sea_level_pressure_inches@SEP@weather.max_visibility_miles@SEP@weather.max_wind_speed_mph@SEP@weather.max_gust_speed_mph"
    },
    {
        "nl_queries": "What are the main indstries and total market value for each industry . Plot them as pie chart .",
        "VQL": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
        "db_id": "gas_company",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry'}",
        "record_name": "1507",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "What are the main indstries and total market value for each industry . Plot them as pie chart .",
        "question_toks": [
            "What",
            "are",
            "the",
            "main",
            "indstries",
            "and",
            "total",
            "market",
            "value",
            "for",
            "each",
            "industry",
            ".",
            "Plot",
            "them",
            "as",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Main_Industry , sum(market_value) FROM company GROUP BY main_industry",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Main_Industry",
            ",",
            "sum",
            "(",
            "market_value",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "main_industry"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.market_value@SEP@company.main_industry"
    },
    {
        "nl_queries": "What is the total number of each fate ? Give me the result in a bar graph , list X-axis in asc order .",
        "VQL": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
        "db_id": "ship_mission",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC'}",
        "record_name": "2763@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the total number of each fate ? Give me the result in a bar graph , list X-axis in asc order .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "each",
            "fate",
            "?",
            "Give",
            "me",
            "the",
            "result",
            "in",
            "a",
            "bar",
            "graph",
            ",",
            "list",
            "X-axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Fate , COUNT(Fate) FROM mission GROUP BY Fate ORDER BY Fate ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Fate",
            ",",
            "COUNT",
            "(",
            "Fate",
            ")",
            "FROM",
            "mission",
            "GROUP",
            "BY",
            "Fate",
            "ORDER",
            "BY",
            "Fate",
            "ASC"
        ],
        "choose_schema": "Table mission, columns = [*,Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
        "choose_schema_rat_link": "mission.fate"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart , and rank by the y axis in descending .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1759@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart , and rank by the y axis in descending .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of salary bin hire_date by weekday in a bar chart , and display in descending by the Y-axis please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1767@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the average of salary bin hire_date by weekday in a bar chart , and display in descending by the Y-axis please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "descending",
            "by",
            "the",
            "Y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "Show me salary by last name in a histogram , list from high to low by the bars please .",
        "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME DESC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME DESC'}",
        "record_name": "1903@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me salary by last name in a histogram , list from high to low by the bars please .",
        "question_toks": [
            "Show",
            "me",
            "salary",
            "by",
            "last",
            "name",
            "in",
            "a",
            "histogram",
            ",",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "bars",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "LAST_NAME",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "LAST_NAME",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.last_name@SEP@employees.salary"
    },
    {
        "nl_queries": "Show me minimal weight by sex in a histogram , and display in ascending by the y-axis .",
        "VQL": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) ASC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) ASC'}",
        "record_name": "406@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            2,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me minimal weight by sex in a histogram , and display in ascending by the y-axis .",
        "question_toks": [
            "Show",
            "me",
            "minimal",
            "weight",
            "by",
            "sex",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , min(weight) FROM people GROUP BY Sex ORDER BY min(weight) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "min",
            "(",
            "weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "min",
            "(",
            "weight",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "Bar chart x axis all games y axis team_id , and I want to rank by the names from high to low .",
        "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC'}",
        "record_name": "3114@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis all games y axis team_id , and I want to rank by the names from high to low .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "all",
            "games",
            "y",
            "axis",
            "team_id",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "names",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY All_Games DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.all_games@SEP@basketball_match.all_games_percent@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "How many sections does each course has . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code'}",
        "record_name": "553",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many sections does each course has . Visualize by bar chart .",
        "question_toks": [
            "How",
            "many",
            "sections",
            "does",
            "each",
            "course",
            "has",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "class.crs_code@SEP@course.crs_code@SEP@course.crs_description@SEP@course.crs_credit"
    },
    {
        "nl_queries": "Return a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute All_Home .",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3097",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Return a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute All_Home .",
        "question_toks": [
            "Return",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "ACC_Percent",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            "."
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Bar graph to show how many yearid from different yearid",
        "VQL": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
        "db_id": "baseball_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY'}",
        "record_name": "151",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        12
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                145,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar graph to show how many yearid from different yearid",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "how",
            "many",
            "yearid",
            "from",
            "different",
            "yearid"
        ],
        "query": "Visualize BAR SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "yearid",
            ",",
            "COUNT",
            "(",
            "yearid",
            ")",
            "FROM",
            "hall_of_fame",
            "BIN",
            "yearid",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]",
        "choose_schema_rat_link": "hall_of_fame.yearid"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by time , and rank by the y axis from low to high .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1540@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by time , and rank by the y axis from low to high .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "How many debates are held for each venue ? Show a pie chart .",
        "VQL": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue",
        "db_id": "debate",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue'}",
        "record_name": "1076",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "How many debates are held for each venue ? Show a pie chart .",
        "question_toks": [
            "How",
            "many",
            "debates",
            "are",
            "held",
            "for",
            "each",
            "venue",
            "?",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Venue",
            ",",
            "COUNT",
            "(",
            "Venue",
            ")",
            "FROM",
            "debate",
            "GROUP",
            "BY",
            "Venue"
        ],
        "choose_schema": "Table debate, columns = [*,Debate_ID, Date, Venue, Num_of_Audience]",
        "choose_schema_rat_link": "debate.debate_id@SEP@debate_people.debate_id@SEP@debate.venue"
    },
    {
        "nl_queries": "how old is the youngest person for each job ? , and sort in descending by the X .",
        "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC'}",
        "record_name": "2463@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "how old is the youngest person for each job ? , and sort in descending by the X .",
        "question_toks": [
            "how",
            "old",
            "is",
            "the",
            "youngest",
            "person",
            "for",
            "each",
            "job",
            "?",
            ",",
            "and",
            "sort",
            "in",
            "descending",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "job",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.job"
    },
    {
        "nl_queries": "A bar chart showing how many debates are held for each venue , and show by the X in desc .",
        "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC",
        "db_id": "debate",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC'}",
        "record_name": "1077@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart showing how many debates are held for each venue , and show by the X in desc .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "showing",
            "how",
            "many",
            "debates",
            "are",
            "held",
            "for",
            "each",
            "venue",
            ",",
            "and",
            "show",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Venue",
            ",",
            "COUNT",
            "(",
            "Venue",
            ")",
            "FROM",
            "debate",
            "GROUP",
            "BY",
            "Venue",
            "ORDER",
            "BY",
            "Venue",
            "DESC"
        ],
        "choose_schema": "Table debate, columns = [*,Debate_ID, Date, Venue, Num_of_Audience]",
        "choose_schema_rat_link": "debate.debate_id@SEP@debate_people.debate_id@SEP@debate.venue"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID'}",
        "record_name": "1606",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "How old is each gender , on average Plot them as bar chart , order by the X-axis in ascending .",
        "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC'}",
        "record_name": "2473@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How old is each gender , on average Plot them as bar chart , order by the X-axis in ascending .",
        "question_toks": [
            "How",
            "old",
            "is",
            "each",
            "gender",
            ",",
            "on",
            "average",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "ASC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.gender"
    },
    {
        "nl_queries": "How old is each gender , on average . Plot them as bar chart .",
        "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender'}",
        "record_name": "2473",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How old is each gender , on average . Plot them as bar chart .",
        "question_toks": [
            "How",
            "old",
            "is",
            "each",
            "gender",
            ",",
            "on",
            "average",
            ".",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.gender"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road , and display from low to high by the X-axis .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3100@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of ACC_Road and the sum of School_ID , and group by attribute ACC_Road , and display from low to high by the X-axis .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "and",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Stack bar chart of school_id vs ACC_Home based on all home , list by the names in ascending .",
        "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC'}",
        "record_name": "3093@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stack bar chart of school_id vs ACC_Home based on all home , list by the names in ascending .",
        "question_toks": [
            "Stack",
            "bar",
            "chart",
            "of",
            "school_id",
            "vs",
            "ACC_Home",
            "based",
            "on",
            "all",
            "home",
            ",",
            "list",
            "by",
            "the",
            "names",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.all_home@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , find hire_date and the average of department_id bin hire_date by time , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1547",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , find hire_date and the average of department_id bin hire_date by time , and visualize them by a bar chart .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Return a scatter chart about the correlation between Team_ID and School_ID , and group by attribute All_Games .",
        "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Games",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Games', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Games'}",
        "record_name": "3172",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Return a scatter chart about the correlation between Team_ID and School_ID , and group by attribute All_Games .",
        "question_toks": [
            "Return",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Games",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Games",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Games"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Start_from and the average of Shop_ID bin start_from by weekday , could you display in desc by the Y ?",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY'}",
        "record_name": "1341@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Start_from and the average of Shop_ID bin start_from by weekday , could you display in desc by the Y ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "average",
            "of",
            "Shop_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "could",
            "you",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "Y",
            "?"
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY AVG(Shop_ID) DESC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "DESC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a line chart about the change of salary over hire_date , and display X-axis in asc order .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC'}",
        "record_name": "1616@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a line chart about the change of salary over hire_date , and display X-axis in asc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "salary",
            "over",
            "hire_date",
            ",",
            "and",
            "display",
            "X-axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show me a scatter plot of account id and account_details for .",
        "VQL": "Visualize SCATTER SELECT Account_ID , Account_Details FROM Accounts",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Account_ID , Account_Details FROM Accounts', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Account_ID , Account_Details FROM Accounts'}",
        "record_name": "822",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me a scatter plot of account id and account_details for .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "scatter",
            "plot",
            "of",
            "account",
            "id",
            "and",
            "account_details",
            "for",
            "."
        ],
        "query": "Visualize SCATTER SELECT Account_ID , Account_Details FROM Accounts",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Account_ID",
            ",",
            "Account_Details",
            "FROM",
            "Accounts"
        ],
        "choose_schema": "Table Accounts, columns = [*,Account_ID, Statement_ID, Account_Details]",
        "choose_schema_rat_link": "accounts.account_id@SEP@accounts.account_details"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex'}",
        "record_name": "376",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Sex and the amount of Sex , and group by attribute Sex .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "amount",
            "of",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "Give the proportion of how many students are in each department ?",
        "VQL": "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code'}",
        "record_name": "563",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Give the proportion of how many students are in each department ?",
        "question_toks": [
            "Give",
            "the",
            "proportion",
            "of",
            "how",
            "many",
            "students",
            "are",
            "in",
            "each",
            "department",
            "?"
        ],
        "query": "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "DEPT_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_gpa@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "Return each apartment type code with the number of apartments having that apartment type , in ascending order of the number of apartments by a bar chart .",
        "VQL": "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC'}",
        "record_name": "64",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return each apartment type code with the number of apartments having that apartment type , in ascending order of the number of apartments by a bar chart .",
        "question_toks": [
            "Return",
            "each",
            "apartment",
            "type",
            "code",
            "with",
            "the",
            "number",
            "of",
            "apartments",
            "having",
            "that",
            "apartment",
            "type",
            ",",
            "in",
            "ascending",
            "order",
            "of",
            "the",
            "number",
            "of",
            "apartments",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "apt_type_code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Apartments",
            "GROUP",
            "BY",
            "apt_type_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Apartments, columns = [*,apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "choose_schema_rat_link": "apartments.apt_type_code@SEP@apartments.apt_id@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_booking_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@view_unit_status.apt_booking_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id , and rank by the Y-axis in asc .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC\"}",
        "record_name": "1563@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id , and rank by the Y-axis in asc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "Y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "How many bookings does each booking status have ? List the booking status code and the number of corresponding bookings , and order from high to low by the total number please .",
        "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC'}",
        "record_name": "74@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many bookings does each booking status have ? List the booking status code and the number of corresponding bookings , and order from high to low by the total number please .",
        "question_toks": [
            "How",
            "many",
            "bookings",
            "does",
            "each",
            "booking",
            "status",
            "have",
            "?",
            "List",
            "the",
            "booking",
            "status",
            "code",
            "and",
            "the",
            "number",
            "of",
            "corresponding",
            "bookings",
            ",",
            "and",
            "order",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "total",
            "number",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_status_code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Apartment_Bookings",
            "GROUP",
            "BY",
            "booking_status_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.booking_status_code@SEP@apartment_bookings.booking_start_date@SEP@apartment_bookings.booking_end_date@SEP@view_unit_status.status_date"
    },
    {
        "nl_queries": "Pie . what are the average ages for male and female students ?",
        "VQL": "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
        "db_id": "allergy_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM Student GROUP BY sex', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex'}",
        "record_name": "57",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Pie . what are the average ages for male and female students ?",
        "question_toks": [
            "Pie",
            ".",
            "what",
            "are",
            "the",
            "average",
            "ages",
            "for",
            "male",
            "and",
            "female",
            "students",
            "?"
        ],
        "query": "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "sex"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age"
    },
    {
        "nl_queries": "Display a line chart for what is the average prices of wines for each each ?",
        "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , avg(Price) FROM WINE GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR'}",
        "record_name": "3240",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Display a line chart for what is the average prices of wines for each each ?",
        "question_toks": [
            "Display",
            "a",
            "line",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "average",
            "prices",
            "of",
            "wines",
            "for",
            "each",
            "each",
            "?"
        ],
        "query": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "avg",
            "(",
            "Price",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price"
    },
    {
        "nl_queries": "Show me about the distribution of Date_of_Birth and Height in a bar chart , and list by the total number in asc .",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC'}",
        "record_name": "397@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Date_of_Birth and Height in a bar chart , and list by the total number in asc .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Date_of_Birth",
            "and",
            "Height",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Height",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Height",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.date@SEP@people.date_of_birth@SEP@people.height"
    },
    {
        "nl_queries": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the X-axis in ascending .",
        "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
        "db_id": "ship_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC'}",
        "record_name": "2750@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the total number of captains in each rank and class ? Let class as X-axis , and categorize by rank with a stacked bar chart , rank by the X-axis in ascending .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "in",
            "each",
            "rank",
            "and",
            "class",
            "?",
            "Let",
            "class",
            "as",
            "X-axis",
            ",",
            "and",
            "categorize",
            "by",
            "rank",
            "with",
            "a",
            "stacked",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "COUNT",
            "(",
            "Class",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Rank",
            ",",
            "Class",
            "ORDER",
            "BY",
            "Class",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "Return the apartment number and the number of rooms for each apartment , list in descending by the y-axis .",
        "VQL": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC'}",
        "record_name": "97@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return the apartment number and the number of rooms for each apartment , list in descending by the y-axis .",
        "question_toks": [
            "Return",
            "the",
            "apartment",
            "number",
            "and",
            "the",
            "number",
            "of",
            "rooms",
            "for",
            "each",
            "apartment",
            ",",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY room_count DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "apt_number",
            ",",
            "room_count",
            "FROM",
            "Apartments",
            "ORDER",
            "BY",
            "room_count",
            "DESC"
        ],
        "choose_schema": "Table Apartments, columns = [*,apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "choose_schema_rat_link": "apartments.apt_number@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_booking_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@view_unit_status.apt_booking_id@SEP@apartments.room_count"
    },
    {
        "nl_queries": "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality , and order x axis in asc order please .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2908@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality , and order x axis in asc order please .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "meter_100",
            "over",
            "the",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "order",
            "x",
            "axis",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "Show me about the distribution of meter_200 and the average of ID , and group by attribute meter_200 in a bar chart , and order by the bars from high to low .",
        "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC'}",
        "record_name": "2911@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_200 and the average of ID , and group by attribute meter_200 in a bar chart , and order by the bars from high to low .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "average",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "by",
            "the",
            "bars",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show the number of male and female assistant professors Plot them as bar chart , order Y-axis in ascending order .",
        "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC",
        "db_id": "activity_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC'}",
        "record_name": "22@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"AsstProf\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of male and female assistant professors Plot them as bar chart , order Y-axis in ascending order .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "male",
            "and",
            "female",
            "assistant",
            "professors",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "order",
            "Y-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "WHERE",
            "rank",
            "=",
            "\"AsstProf\"",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "Table Activity, columns = [*,actid, activity_name]@SEP@Table Participates_in, columns = [*,stuid, actid]@SEP@Table Faculty_Participates_in, columns = [*,FacID, actid]@SEP@Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]"
    },
    {
        "nl_queries": "A bar chart shows the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , list by the total number in descending please .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC'}",
        "record_name": "1347@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , list by the total number in descending please .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@shop.number_products"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID'}",
        "record_name": "1605",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "How many captains with younger than 50 are in each rank , display y axis in asc order .",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "db_id": "ship_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC'}",
        "record_name": "2737@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    50.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many captains with younger than 50 are in each rank , display y axis in asc order .",
        "question_toks": [
            "How",
            "many",
            "captains",
            "with",
            "younger",
            "than",
            "50",
            "are",
            "in",
            "each",
            "rank",
            ",",
            "display",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "captain",
            "WHERE",
            "age",
            "<",
            "50",
            "GROUP",
            "BY",
            "rank",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "Bar graph to show how many location from different location , list X-axis in desc order .",
        "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC'}",
        "record_name": "3043@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show how many location from different location , list X-axis in desc order .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "how",
            "many",
            "location",
            "from",
            "different",
            "location",
            ",",
            "list",
            "X-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "Location",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "Location",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.location"
    },
    {
        "nl_queries": "Show different types of ships and the average tonnage of ships of each type .",
        "VQL": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
        "db_id": "ship_mission",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
        "record_name": "2764",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show different types of ships and the average tonnage of ships of each type .",
        "question_toks": [
            "Show",
            "different",
            "types",
            "of",
            "ships",
            "and",
            "the",
            "average",
            "tonnage",
            "of",
            "ships",
            "of",
            "each",
            "type",
            "."
        ],
        "query": "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Type",
            ",",
            "avg",
            "(",
            "Tonnage",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "TYPE"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.type@SEP@mission.ship_id@SEP@ship.ship_id@SEP@ship.tonnage"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the average of department_id , and group by attribute job_id , could you rank by the y-axis from low to high ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC\"}",
        "record_name": "1781@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the average of department_id , and group by attribute job_id , could you rank by the y-axis from low to high ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "could",
            "you",
            "rank",
            "by",
            "the",
            "y-axis",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a line chart shows the change of employee_id over hire_date",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\"}",
        "record_name": "1578",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For all employees who have the letters D or S in their first name , a line chart shows the change of employee_id over hire_date",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "change",
            "of",
            "employee_id",
            "over",
            "hire_date"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "How many dogs departed in each day ? Visualize with a bar chart that bins departed date by weekday , and could you show total number in ascending order ?",
        "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC', 'binning': 'BIN date_departed BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY'}",
        "record_name": "1185@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                32,
                "weekday"
            ],
            "vis": 0
        },
        "question": "How many dogs departed in each day ? Visualize with a bar chart that bins departed date by weekday , and could you show total number in ascending order ?",
        "question_toks": [
            "How",
            "many",
            "dogs",
            "departed",
            "in",
            "each",
            "day",
            "?",
            "Visualize",
            "with",
            "a",
            "bar",
            "chart",
            "that",
            "bins",
            "departed",
            "date",
            "by",
            "weekday",
            ",",
            "and",
            "could",
            "you",
            "show",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_departed",
            ",",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "FROM",
            "Dogs",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "ASC",
            "BIN",
            "date_departed",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@dogs.date_departed@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "Bar chart of mean age from each city code , I want to list by the total number in ascending .",
        "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC'}",
        "record_name": "1232@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of mean age from each city code , I want to list by the total number in ascending .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "mean",
            "age",
            "from",
            "each",
            "city",
            "code",
            ",",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city_code",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "city_code",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.city_code@SEP@student.age"
    },
    {
        "nl_queries": "Return a bar chart for what is the number of areas for all appellations ? , and could you show X-axis in desc order ?",
        "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC'}",
        "record_name": "3224@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart for what is the number of areas for all appellations ? , and could you show X-axis in desc order ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "number",
            "of",
            "areas",
            "for",
            "all",
            "appellations",
            "?",
            ",",
            "and",
            "could",
            "you",
            "show",
            "X-axis",
            "in",
            "desc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY Area DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Area",
            ",",
            "COUNT",
            "(",
            "Area",
            ")",
            "FROM",
            "APPELLATIONS",
            "GROUP",
            "BY",
            "Area",
            "ORDER",
            "BY",
            "Area",
            "DESC"
        ],
        "choose_schema": "Table appellations, columns = [*,No, Appelation, County, State, Area, isAVA]",
        "choose_schema_rat_link": "appellations.area"
    },
    {
        "nl_queries": "how many rooms have king beds ? Report the number for each decor type , and could you list x-axis from high to low order ?",
        "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor DESC",
        "db_id": "inn_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor DESC'}",
        "record_name": "1975@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"King\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "how many rooms have king beds ? Report the number for each decor type , and could you list x-axis from high to low order ?",
        "question_toks": [
            "how",
            "many",
            "rooms",
            "have",
            "king",
            "beds",
            "?",
            "Report",
            "the",
            "number",
            "for",
            "each",
            "decor",
            "type",
            ",",
            "and",
            "could",
            "you",
            "list",
            "x-axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY decor DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "WHERE",
            "bedType",
            "=",
            "\"King\"",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "decor",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds@SEP@rooms.bedtype@SEP@rooms.decor"
    },
    {
        "nl_queries": "Show me the proportion of the number of flights by each origin city with a pie chart .",
        "VQL": "Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT origin , COUNT(origin) FROM Flight GROUP BY origin', 'binning': ''}, 'VQL': 'Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin'}",
        "record_name": "1400",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show me the proportion of the number of flights by each origin city with a pie chart .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "proportion",
            "of",
            "the",
            "number",
            "of",
            "flights",
            "by",
            "each",
            "origin",
            "city",
            "with",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "origin",
            ",",
            "COUNT",
            "(",
            "origin",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.flno@SEP@flight.origin"
    },
    {
        "nl_queries": "Give me a bar chart for the average of salary of each hire date , and sort Y-axis in ascending order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1843@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "Give me a bar chart for the average of salary of each hire date , and sort Y-axis in ascending order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "average",
            "of",
            "salary",
            "of",
            "each",
            "hire",
            "date",
            ",",
            "and",
            "sort",
            "Y-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "Display a bar chart for what are the numbers of wines for different grapes ? , and list from low to high by the bars .",
        "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC'}",
        "record_name": "3238@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Display a bar chart for what are the numbers of wines for different grapes ? , and list from low to high by the bars .",
        "question_toks": [
            "Display",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "numbers",
            "of",
            "wines",
            "for",
            "different",
            "grapes",
            "?",
            ",",
            "and",
            "list",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "Grape",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of meter_300 and ID , and order by the names in ascending .",
        "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC'}",
        "record_name": "2916@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of meter_300 and ID , and order by the names in ascending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_300",
            "and",
            "ID",
            ",",
            "and",
            "order",
            "by",
            "the",
            "names",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_300",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.name@SEP@stadium.name@SEP@event.name"
    },
    {
        "nl_queries": "Bar chart of the total number from each location , I want to sort by the bars from high to low .",
        "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location DESC",
        "db_id": "performance_attendance",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location DESC'}",
        "record_name": "2529@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of the total number from each location , I want to sort by the bars from high to low .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "the",
            "total",
            "number",
            "from",
            "each",
            "location",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "bars",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "performance",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "Location",
            "DESC"
        ],
        "choose_schema": "Table performance, columns = [*,Performance_ID, Date, Host, Location, Attendance]",
        "choose_schema_rat_link": "performance.location"
    },
    {
        "nl_queries": "Give me the comparison about Team_ID over the Team_Name by a bar chart , I want to rank by the X in desc .",
        "VQL": "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC'}",
        "record_name": "3110@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Team_ID over the Team_Name by a bar chart , I want to rank by the X in desc .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Team_ID",
            "over",
            "the",
            "Team_Name",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team_Name",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_Name",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "What is the number of the faculty members for each rank ? Visualize in bar chart , and order in desc by the X .",
        "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "db_id": "activity_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC'}",
        "record_name": "9@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of the faculty members for each rank ? Visualize in bar chart , and order in desc by the X .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "the",
            "faculty",
            "members",
            "for",
            "each",
            "rank",
            "?",
            "Visualize",
            "in",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "COUNT",
            "(",
            "Rank",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "Rank",
            "ORDER",
            "BY",
            "Rank",
            "DESC"
        ],
        "choose_schema": "Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "faculty_participates_in.facid@SEP@faculty.facid@SEP@faculty.rank"
    },
    {
        "nl_queries": "What is average age for different job title . Show the proportion .",
        "VQL": "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job', 'binning': ''}, 'VQL': 'Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job'}",
        "record_name": "2458",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "What is average age for different job title . Show the proportion .",
        "question_toks": [
            "What",
            "is",
            "average",
            "age",
            "for",
            "different",
            "job",
            "title",
            ".",
            "Show",
            "the",
            "proportion",
            "."
        ],
        "query": "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and list Y from low to high order .",
        "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC'}",
        "record_name": "310@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what are the ids and names of all start stations that were the beginning of at least 200 trips ? , and list Y from low to high order .",
        "question_toks": [
            "what",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "all",
            "start",
            "stations",
            "that",
            "were",
            "the",
            "beginning",
            "of",
            "at",
            "least",
            "200",
            "trips",
            "?",
            ",",
            "and",
            "list",
            "Y",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_id ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "start_station_name",
            ",",
            "start_station_id",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "start_station_id",
            "ASC"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "trip.start_station_name@SEP@trip.start_station_id@SEP@station.id@SEP@trip.id@SEP@station.name@SEP@trip.start_date@SEP@status.station_id"
    },
    {
        "nl_queries": "Visualize a bar chart for simply displaying the email address of the employee and the corresponding employee id , and show from high to low by the X-axis .",
        "VQL": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMAIL DESC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMAIL DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMAIL DESC'}",
        "record_name": "1909@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for simply displaying the email address of the employee and the corresponding employee id , and show from high to low by the X-axis .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "simply",
            "displaying",
            "the",
            "email",
            "address",
            "of",
            "the",
            "employee",
            "and",
            "the",
            "corresponding",
            "employee",
            "id",
            ",",
            "and",
            "show",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT EMAIL , EMPLOYEE_ID FROM employees ORDER BY EMAIL DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "EMAIL",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "EMAIL",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.email"
    },
    {
        "nl_queries": "How many invoices were billed from each state Plot them as bar chart , and rank by the the total number in descending please .",
        "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
        "db_id": "store_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC'}",
        "record_name": "2856@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            44,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    43,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many invoices were billed from each state Plot them as bar chart , and rank by the the total number in descending please .",
        "question_toks": [
            "How",
            "many",
            "invoices",
            "were",
            "billed",
            "from",
            "each",
            "state",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "\"USA\"",
            "GROUP",
            "BY",
            "billing_state",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
        "choose_schema_rat_link": "invoices.invoice_date@SEP@invoice_lines.invoice_id@SEP@invoices.billing_city@SEP@employees.state@SEP@customers.state@SEP@invoices.total"
    },
    {
        "nl_queries": "Plot the total number by grouped by carrier as a bar graph , and list in desc by the x axis .",
        "VQL": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
        "db_id": "phone_market",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC'}",
        "record_name": "2568@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the total number by grouped by carrier as a bar graph , and list in desc by the x axis .",
        "question_toks": [
            "Plot",
            "the",
            "total",
            "number",
            "by",
            "grouped",
            "by",
            "carrier",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Carrier",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier",
            "ORDER",
            "BY",
            "Carrier",
            "DESC"
        ],
        "choose_schema": "Table phone, columns = [*,Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "choose_schema_rat_link": "phone.carrier"
    },
    {
        "nl_queries": "Show me about the correlation between Height and Weight in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Height , Weight FROM people",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Height , Weight FROM people', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Height , Weight FROM people'}",
        "record_name": "390",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between Height and Weight in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "Height",
            "and",
            "Weight",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Height , Weight FROM people",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Height",
            ",",
            "Weight",
            "FROM",
            "people"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.height@SEP@people.weight"
    },
    {
        "nl_queries": "Show each employee's salary using a bar chart , note that use the last name of each employee , and sort by the X-axis in ascending .",
        "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC'}",
        "record_name": "1903@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show each employee's salary using a bar chart , note that use the last name of each employee , and sort by the X-axis in ascending .",
        "question_toks": [
            "Show",
            "each",
            "employee's",
            "salary",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "note",
            "that",
            "use",
            "the",
            "last",
            "name",
            "of",
            "each",
            "employee",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "LAST_NAME",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "LAST_NAME",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.last_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary"
    },
    {
        "nl_queries": "Bar chart x axis nationality y axis mean meter 100 , rank from low to high by the bars .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2909@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis nationality y axis mean meter 100 , rank from low to high by the bars .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "nationality",
            "y",
            "axis",
            "mean",
            "meter",
            "100",
            ",",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.nationality@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , and list in descending by the Y-axis .",
        "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC'}",
        "record_name": "3123@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , and list in descending by the Y-axis .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "amount",
            "of",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "and",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "What is the average prices of wines for each each . Visualize by line chart .",
        "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , avg(Price) FROM WINE GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR'}",
        "record_name": "3240",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "What is the average prices of wines for each each . Visualize by line chart .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "prices",
            "of",
            "wines",
            "for",
            "each",
            "each",
            ".",
            "Visualize",
            "by",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "avg",
            "(",
            "Price",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price"
    },
    {
        "nl_queries": "Find All_Road and School_ID , and visualize them by a bar chart , I want to rank School_ID in asc order .",
        "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC'}",
        "record_name": "3117@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Road and School_ID , and visualize them by a bar chart , I want to rank School_ID in asc order .",
        "question_toks": [
            "Find",
            "All_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "School_ID",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Draw a pie chart for how many faculty members does each building have ? List the result with the name of the building .",
        "VQL": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building",
        "db_id": "activity_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Building , count(*) FROM Faculty GROUP BY building', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building'}",
        "record_name": "6",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    22,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart for how many faculty members does each building have ? List the result with the name of the building .",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "for",
            "how",
            "many",
            "faculty",
            "members",
            "does",
            "each",
            "building",
            "have",
            "?",
            "List",
            "the",
            "result",
            "with",
            "the",
            "name",
            "of",
            "the",
            "building",
            "."
        ],
        "query": "Visualize PIE SELECT Building , count(*) FROM Faculty GROUP BY building",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Building",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "building"
        ],
        "choose_schema": "Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "faculty_participates_in.facid@SEP@faculty.facid@SEP@faculty.building"
    },
    {
        "nl_queries": "Plot salary by grouped by email as a bar graph , sort total number in ascending order .",
        "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC'}",
        "record_name": "1910@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot salary by grouped by email as a bar graph , sort total number in ascending order .",
        "question_toks": [
            "Plot",
            "salary",
            "by",
            "grouped",
            "by",
            "email",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "sort",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT EMAIL , SALARY FROM employees ORDER BY SALARY ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "EMAIL",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "SALARY",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.salary@SEP@employees.email"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , show me about the correlation between code and price in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Code , Price FROM products WHERE price BETWEEN 60 AND 120",
        "db_id": "manufactory_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Code , Price FROM products WHERE price BETWEEN 60 AND 120', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Code , Price FROM products WHERE price BETWEEN 60 AND 120'}",
        "record_name": "2195",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those products with a price between 60 and 120 , show me about the correlation between code and price in a scatter chart .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "code",
            "and",
            "price",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Code , Price FROM products WHERE price BETWEEN 60 AND 120",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Code",
            ",",
            "Price",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.code@SEP@products.code"
    },
    {
        "nl_queries": "In zip code 94107 , on which day neither Fog nor Rain was not observed , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY YEAR'}",
        "record_name": "349",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ],
                    94107.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            44,
                            false
                        ],
                        null
                    ],
                    "\"Fog\"",
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            44,
                            false
                        ],
                        null
                    ],
                    "\"Rain\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "In zip code 94107 , on which day neither Fog nor Rain was not observed , and count them by a bar chart",
        "question_toks": [
            "In",
            "zip",
            "code",
            "94107",
            ",",
            "on",
            "which",
            "day",
            "neither",
            "Fog",
            "nor",
            "Rain",
            "was",
            "not",
            "observed",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\" BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "zip_code",
            "=",
            "94107",
            "AND",
            "EVENTS",
            "!",
            "=",
            "\"Fog\"",
            "AND",
            "EVENTS",
            "!",
            "=",
            "\"Rain\"",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]@SEP@Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "trip.zip_code@SEP@weather.zip_code"
    },
    {
        "nl_queries": "how many rooms have king beds ? Report the number for each decor type , and rank by the y axis in ascending .",
        "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC",
        "db_id": "inn_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC'}",
        "record_name": "1975@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"King\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "how many rooms have king beds ? Report the number for each decor type , and rank by the y axis in ascending .",
        "question_toks": [
            "how",
            "many",
            "rooms",
            "have",
            "king",
            "beds",
            "?",
            "Report",
            "the",
            "number",
            "for",
            "each",
            "decor",
            "type",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "WHERE",
            "bedType",
            "=",
            "\"King\"",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds@SEP@rooms.bedtype@SEP@rooms.decor"
    },
    {
        "nl_queries": "Find All_Games and Team_ID , and visualize them by a bar chart , and I want to list by the y-axis in asc .",
        "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC'}",
        "record_name": "3114@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Games and Team_ID , and visualize them by a bar chart , and I want to list by the y-axis in asc .",
        "question_toks": [
            "Find",
            "All_Games",
            "and",
            "Team_ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Visualize a bar chart for the date and mean humidity for the days with the 3 largest maximum gust speeds .",
        "VQL": "Visualize BAR SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3'}",
        "record_name": "286",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for the date and mean humidity for the days with the 3 largest maximum gust speeds .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "date",
            "and",
            "mean",
            "humidity",
            "for",
            "the",
            "days",
            "with",
            "the",
            "3",
            "largest",
            "maximum",
            "gust",
            "speeds",
            "."
        ],
        "query": "Visualize BAR SELECT date , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "mean_humidity",
            "FROM",
            "weather",
            "ORDER",
            "BY",
            "max_gust_speed_mph",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.mean_humidity@SEP@weather.date@SEP@weather.mean_temperature_f@SEP@weather.mean_dew_point_f@SEP@weather.mean_sea_level_pressure_inches@SEP@weather.mean_visibility_miles@SEP@weather.mean_wind_speed_mph"
    },
    {
        "nl_queries": "Give me line charts of worldwide gross sum employee id over year start from by major genres Is_full_time , and I want to sort by the x-axis from low to high .",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1352@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me line charts of worldwide gross sum employee id over year start from by major genres Is_full_time , and I want to sort by the x-axis from low to high .",
        "question_toks": [
            "Give",
            "me",
            "line",
            "charts",
            "of",
            "worldwide",
            "gross",
            "sum",
            "employee",
            "id",
            "over",
            "year",
            "start",
            "from",
            "by",
            "major",
            "genres",
            "Is_full_time",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "x-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from@SEP@evaluation.year_awarded"
    },
    {
        "nl_queries": "Visualize a bar chart for what are the average ages for male and female students ? , and order y axis in desc order .",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC'}",
        "record_name": "58@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what are the average ages for male and female students ? , and order y axis in desc order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "average",
            "ages",
            "for",
            "male",
            "and",
            "female",
            "students",
            "?",
            ",",
            "and",
            "order",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age"
    },
    {
        "nl_queries": "Bar chart of all_games_percent from each all road , and I want to sort bars in asc order .",
        "VQL": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road ASC'}",
        "record_name": "3143@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of all_games_percent from each all road , and I want to sort bars in asc order .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "all_games_percent",
            "from",
            "each",
            "all",
            "road",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "bars",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , All_Games_Percent FROM basketball_match ORDER BY All_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.all_road"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Games and School_ID , and order by the X in descending please .",
        "VQL": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC'}",
        "record_name": "3115@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Games and School_ID , and order by the X in descending please .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Games",
            "and",
            "School_ID",
            ",",
            "and",
            "order",
            "by",
            "the",
            "X",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "How many male and female assistant professors do we have , display in descending by the X-axis .",
        "VQL": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
        "db_id": "activity_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC'}",
        "record_name": "22@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"AsstProf\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many male and female assistant professors do we have , display in descending by the X-axis .",
        "question_toks": [
            "How",
            "many",
            "male",
            "and",
            "female",
            "assistant",
            "professors",
            "do",
            "we",
            "have",
            ",",
            "display",
            "in",
            "descending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Faculty",
            "WHERE",
            "rank",
            "=",
            "\"AsstProf\"",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "Table Activity, columns = [*,actid, activity_name]@SEP@Table Participates_in, columns = [*,stuid, actid]@SEP@Table Faculty_Participates_in, columns = [*,FacID, actid]@SEP@Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]"
    },
    {
        "nl_queries": "Compare the average salary by each hire date (bin it into month interval) of employees using a bar chart , and sort Y-axis in ascending order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1843@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "Compare the average salary by each hire date (bin it into month interval) of employees using a bar chart , and sort Y-axis in ascending order .",
        "question_toks": [
            "Compare",
            "the",
            "average",
            "salary",
            "by",
            "each",
            "hire",
            "date",
            "(bin",
            "it",
            "into",
            "month",
            "interval)",
            "of",
            "employees",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "Y-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.hire_date@SEP@employees.salary@SEP@employees.employee_id@SEP@job_history.employee_id"
    },
    {
        "nl_queries": ", rank in desc by the the total number .",
        "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC",
        "db_id": "entertainment_awards",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC'}",
        "record_name": "1369@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": ", rank in desc by the the total number .",
        "question_toks": [
            ",",
            "rank",
            "in",
            "desc",
            "by",
            "the",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "artwork",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table artwork, columns = [*,Artwork_ID, Type, Name]",
        "choose_schema_rat_link": "Table festival_detail, columns = [*,Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]@SEP@Table artwork, columns = [*,Artwork_ID, Type, Name]@SEP@Table nomination, columns = [*,Artwork_ID, Festival_ID, Result]"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Home and the sum of Team_ID , and group by attribute All_Home .",
        "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3102",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Home and the sum of Team_ID , and group by attribute All_Home .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Show different teams of technicians and the number of technicians in each team with a bar chart .",
        "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "db_id": "machine_repair",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(*) FROM technician GROUP BY Team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team'}",
        "record_name": "2169",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different teams of technicians and the number of technicians in each team with a bar chart .",
        "question_toks": [
            "Show",
            "different",
            "teams",
            "of",
            "technicians",
            "and",
            "the",
            "number",
            "of",
            "technicians",
            "in",
            "each",
            "team",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "technician",
            "GROUP",
            "BY",
            "Team"
        ],
        "choose_schema": "Table machine, columns = [*,Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank]@SEP@Table technician, columns = [*,technician_id, Name, Team, Starting_Year, Age]",
        "choose_schema_rat_link": "machine.team@SEP@technician.team@SEP@technician.technician_id@SEP@repair_assignment.technician_id"
    },
    {
        "nl_queries": "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match'}",
        "record_name": "3146",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart .",
        "question_toks": [
            "Find",
            "All_Neutral",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "I want to see trend of the number of season by season , order by the x-axis in asc .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
        "db_id": "game_injury",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC'}",
        "record_name": "1494@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "I want to see trend of the number of season by season , order by the x-axis in asc .",
        "question_toks": [
            "I",
            "want",
            "to",
            "see",
            "trend",
            "of",
            "the",
            "number",
            "of",
            "season",
            "by",
            "season",
            ",",
            "order",
            "by",
            "the",
            "x-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season ORDER BY Season ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Season",
            "ORDER",
            "BY",
            "Season",
            "ASC"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.season"
    },
    {
        "nl_queries": "Show me about the distribution of Is_full_time and the average of Shop_ID , and group by attribute Is_full_time in a bar chart .",
        "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1346",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Is_full_time and the average of Shop_ID , and group by attribute Is_full_time in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "average",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Show me about the distribution of meter_300 and ID in a bar chart , could you order by the y-axis in descending ?",
        "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC'}",
        "record_name": "2916@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_300 and ID in a bar chart , could you order by the y-axis in descending ?",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_300",
            "and",
            "ID",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "y-axis",
            "in",
            "descending",
            "?"
        ],
        "query": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of department_id over the hire_date bin hire_date by time by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1763",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of department_id over the hire_date bin hire_date by time by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "department_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Draw a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time , and display in asc by the x-axis .",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1360@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Draw a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time , and display in asc by the x-axis .",
        "question_toks": [
            "Draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "the",
            "sum",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "time",
            ",",
            "and",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Bar chart x axis crs code y axis the total number",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code'}",
        "record_name": "553",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis crs code y axis the total number",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "crs",
            "code",
            "y",
            "axis",
            "the",
            "total",
            "number"
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table EMPLOYEE, columns = [*,EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]@SEP@Table ENROLL, columns = [*,CLASS_CODE, STU_NUM, ENROLL_GRADE]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]"
    },
    {
        "nl_queries": "List top 3 highest Rating TV series . List the TV series's Episode and Rating with a pie chart .",
        "VQL": "Visualize PIE SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "db_id": "tvshow",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3'}",
        "record_name": "3059",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "List top 3 highest Rating TV series . List the TV series's Episode and Rating with a pie chart .",
        "question_toks": [
            "List",
            "top",
            "3",
            "highest",
            "Rating",
            "TV",
            "series",
            ".",
            "List",
            "the",
            "TV",
            "series's",
            "Episode",
            "and",
            "Rating",
            "with",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table TV_series, columns = [*,id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel]",
        "choose_schema_rat_link": "tv_series.rating@SEP@tv_channel.series_name@SEP@tv_series.episode"
    },
    {
        "nl_queries": "A pie chart shows the proportion of All_Home and the sum of school id .",
        "VQL": "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3125",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "A pie chart shows the proportion of All_Home and the sum of school id .",
        "question_toks": [
            "A",
            "pie",
            "chart",
            "shows",
            "the",
            "proportion",
            "of",
            "All_Home",
            "and",
            "the",
            "sum",
            "of",
            "school",
            "id",
            "."
        ],
        "query": "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.school_id@SEP@university.school_id@SEP@university.school"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the change of employee_id over hire_date in a line chart , order X-axis in descending order .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1772@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the change of employee_id over hire_date in a line chart , order X-axis in descending order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "change",
            "of",
            "employee_id",
            "over",
            "hire_date",
            "in",
            "a",
            "line",
            "chart",
            ",",
            "order",
            "X-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Find the number of male students (with sex M) from each city in a bar chart .",
        "VQL": "Visualize BAR SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code\"}",
        "record_name": "1219",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"M\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of male students (with sex M) from each city in a bar chart .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "male",
            "students",
            "(with",
            "sex",
            "M)",
            "from",
            "each",
            "city",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT city_code , count(*) FROM student WHERE sex = 'M' GROUP BY city_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "student",
            "WHERE",
            "sex",
            "=",
            "'M'",
            "GROUP",
            "BY",
            "city_code"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.stuid@SEP@dorm.student_capacity@SEP@lives_in.stuid@SEP@student.sex@SEP@student.city_code"
    },
    {
        "nl_queries": "Bar graph to show how many asset make from different asset make",
        "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "db_id": "assets_maintenance",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make', 'binning': ''}, 'VQL': 'Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make'}",
        "record_name": "140",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show how many asset make from different asset make",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "how",
            "many",
            "asset",
            "make",
            "from",
            "different",
            "asset",
            "make"
        ],
        "query": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "asset_make",
            ",",
            "COUNT",
            "(",
            "asset_make",
            ")",
            "FROM",
            "Assets",
            "GROUP",
            "BY",
            "asset_make"
        ],
        "choose_schema": "Table Assets, columns = [*,asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details]",
        "choose_schema_rat_link": "assets.asset_make@SEP@assets.asset_id@SEP@assets.asset_details@SEP@assets.asset_model@SEP@assets.asset_acquired_date@SEP@assets.asset_disposed_date@SEP@asset_parts.asset_id@SEP@fault_log.asset_id"
    },
    {
        "nl_queries": "Plot id by grouped by name as a bar graph , show by the x-axis in descending please .",
        "VQL": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , ID FROM swimmer ORDER BY name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC'}",
        "record_name": "2914@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot id by grouped by name as a bar graph , show by the x-axis in descending please .",
        "question_toks": [
            "Plot",
            "id",
            "by",
            "grouped",
            "by",
            "name",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "show",
            "by",
            "the",
            "x-axis",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT name , ID FROM swimmer ORDER BY name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "name",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.name@SEP@stadium.name@SEP@event.name"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the amount of job_id over the job_id , and group by attribute job_id by a bar chart , sort by the X in desc .",
        "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1783@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the amount of job_id over the job_id , and group by attribute job_id by a bar chart , sort by the X in desc .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "amount",
            "of",
            "job_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "COUNT",
            "(",
            "JOB_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph , and could you display from high to low by the Number_Deaths ?",
        "VQL": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC",
        "db_id": "storm_record",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC'}",
        "record_name": "2868@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all storms with at least 1 death , compare the number of deaths by name with a bar graph , and could you display from high to low by the Number_Deaths ?",
        "question_toks": [
            "For",
            "all",
            "storms",
            "with",
            "at",
            "least",
            "1",
            "death",
            ",",
            "compare",
            "the",
            "number",
            "of",
            "deaths",
            "by",
            "name",
            "with",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "could",
            "you",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "Number_Deaths",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Number_Deaths DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Number_Deaths",
            "FROM",
            "storm",
            "WHERE",
            "number_deaths",
            ">=",
            "1",
            "ORDER",
            "BY",
            "Number_Deaths",
            "DESC"
        ],
        "choose_schema": "Table storm, columns = [*,Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths]",
        "choose_schema_rat_link": "storm.storm_id@SEP@affected_region.storm_id@SEP@storm.number_deaths@SEP@affected_region.number_city_affected@SEP@storm.name"
    },
    {
        "nl_queries": "Show me a scatter plot of code and minimal price for .",
        "VQL": "Visualize SCATTER SELECT Code , min(price) FROM products GROUP BY Code",
        "db_id": "manufactory_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Code , min(price) FROM products GROUP BY Code', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Code , min(price) FROM products GROUP BY Code'}",
        "record_name": "2184",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me a scatter plot of code and minimal price for .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "scatter",
            "plot",
            "of",
            "code",
            "and",
            "minimal",
            "price",
            "for",
            "."
        ],
        "query": "Visualize SCATTER SELECT Code , min(price) FROM products GROUP BY Code",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Code",
            ",",
            "min",
            "(",
            "price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Code"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.code@SEP@products.code@SEP@products.price"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find job_id and the sum of department_id , and group by attribute job_id , and visualize them by a bar chart , display JOB_ID in ascending order .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1780@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find job_id and the sum of department_id , and group by attribute job_id , and visualize them by a bar chart , display JOB_ID in ascending order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "JOB_ID",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "What are the name and population of each county Plot them as bar chart , and list County_name from low to high order please .",
        "VQL": "Visualize BAR SELECT County_name , Population FROM county ORDER BY County_name ASC",
        "db_id": "election",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT County_name , Population FROM county ORDER BY County_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT County_name , Population FROM county ORDER BY County_name ASC'}",
        "record_name": "1304@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the name and population of each county Plot them as bar chart , and list County_name from low to high order please .",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            "and",
            "population",
            "of",
            "each",
            "county",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "County_name",
            "from",
            "low",
            "to",
            "high",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT County_name , Population FROM county ORDER BY County_name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "County_name",
            ",",
            "Population",
            "FROM",
            "county",
            "ORDER",
            "BY",
            "County_name",
            "ASC"
        ],
        "choose_schema": "Table county, columns = [*,County_Id, County_name, Population, Zip_code]",
        "choose_schema_rat_link": "county.population@SEP@county.county_id@SEP@county.county_name@SEP@election.counties_represented"
    },
    {
        "nl_queries": "What is average age for different job title Visualize by bar chart , and rank y axis in ascending order .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC'}",
        "record_name": "2459@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is average age for different job title Visualize by bar chart , and rank y axis in ascending order .",
        "question_toks": [
            "What",
            "is",
            "average",
            "age",
            "for",
            "different",
            "job",
            "title",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find job_id and the average of department_id , and group by attribute job_id , and visualize them by a bar chart , I want to display in ascending by the total number .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC\"}",
        "record_name": "1781@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find job_id and the average of department_id , and group by attribute job_id , and visualize them by a bar chart , I want to display in ascending by the total number .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , a scatter chart shows the correlation between code and manufacturer .",
        "VQL": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120",
        "db_id": "manufactory_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120'}",
        "record_name": "2196",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those products with a price between 60 and 120 , a scatter chart shows the correlation between code and manufacturer .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "a",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "code",
            "and",
            "manufacturer",
            "."
        ],
        "query": "Visualize SCATTER SELECT Code , Manufacturer FROM products WHERE price BETWEEN 60 AND 120",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Code",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.code@SEP@products.code@SEP@products.manufacturer"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , sort total number in descending order .",
        "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC'}",
        "record_name": "3123@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of ACC_Road and the amount of ACC_Road , and group by attribute ACC_Road , sort total number in descending order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "amount",
            "of",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "sort",
            "total",
            "number",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY COUNT(ACC_Road) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "For those days with the 3 largest maximum gust speeds , can you plot a bar chart to compare the total mean temperature of each day of the weeks ?",
        "VQL": "Visualize BAR SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY'}",
        "record_name": "293",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those days with the 3 largest maximum gust speeds , can you plot a bar chart to compare the total mean temperature of each day of the weeks ?",
        "question_toks": [
            "For",
            "those",
            "days",
            "with",
            "the",
            "3",
            "largest",
            "maximum",
            "gust",
            "speeds",
            ",",
            "can",
            "you",
            "plot",
            "a",
            "bar",
            "chart",
            "to",
            "compare",
            "the",
            "total",
            "mean",
            "temperature",
            "of",
            "each",
            "day",
            "of",
            "the",
            "weeks",
            "?"
        ],
        "query": "Visualize BAR SELECT date , SUM(mean_temperature_f) FROM weather  ORDER BY max_gust_speed_mph DESC LIMIT 3 BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "SUM",
            "(",
            "mean_temperature_f",
            ")",
            "FROM",
            "weather",
            "ORDER",
            "BY",
            "max_gust_speed_mph",
            "DESC",
            "LIMIT",
            "3",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.mean_temperature_f@SEP@weather.mean_dew_point_f@SEP@weather.mean_humidity@SEP@weather.mean_sea_level_pressure_inches@SEP@weather.mean_visibility_miles@SEP@weather.mean_wind_speed_mph"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of department_id over the job_id , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\"}",
        "record_name": "1780",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of department_id over the job_id , and group by attribute job_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "department_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Visualize a bar chart for what is the average weight for each type of pet ? , and display by the PetType from low to high .",
        "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC",
        "db_id": "pets_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC'}",
        "record_name": "2560@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what is the average weight for each type of pet ? , and display by the PetType from low to high .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "?",
            ",",
            "and",
            "display",
            "by",
            "the",
            "PetType",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "avg",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype",
            "ORDER",
            "BY",
            "PetType",
            "ASC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.weight@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@pets.pet_age"
    },
    {
        "nl_queries": "Give me the comparison about Team_ID over the ACC_Road , and group by attribute ACC_Home .",
        "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road'}",
        "record_name": "3090",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Team_ID over the ACC_Road , and group by attribute ACC_Home .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Team_ID",
            "over",
            "the",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Give me the comparison about meter_100 over the meter_700 , and I want to rank y axis from low to high order .",
        "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC'}",
        "record_name": "2925@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about meter_100 over the meter_700 , and I want to rank y axis from low to high order .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "meter_100",
            "over",
            "the",
            "meter_700",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_100",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart , and could you order bar in asc order ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC'}",
        "record_name": "1605@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart , and could you order bar in asc order ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "order",
            "bar",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Visualize a bar chart for what are the names and the total prices of all products in the store ? , and display by the y axis in ascending .",
        "VQL": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC'}",
        "record_name": "2178@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what are the names and the total prices of all products in the store ? , and display by the y axis in ascending .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "names",
            "and",
            "the",
            "total",
            "prices",
            "of",
            "all",
            "products",
            "in",
            "the",
            "store",
            "?",
            ",",
            "and",
            "display",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "SUM",
            "(",
            "Price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Price",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "For the attribute All_Road and School_ID , show their proportion by a pie chart .",
        "VQL": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Road , School_ID FROM basketball_match'}",
        "record_name": "3153",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "For the attribute All_Road and School_ID , show their proportion by a pie chart .",
        "question_toks": [
            "For",
            "the",
            "attribute",
            "All_Road",
            "and",
            "School_ID",
            ",",
            "show",
            "their",
            "proportion",
            "by",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Show the trend about salary change over hire date using a line chart .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SALARY FROM employees', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , SALARY FROM employees'}",
        "record_name": "1869",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show the trend about salary change over hire date using a line chart .",
        "question_toks": [
            "Show",
            "the",
            "trend",
            "about",
            "salary",
            "change",
            "over",
            "hire",
            "date",
            "using",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "Give me the comparison about the average of Shop_ID over the Start_from bin start_from by weekday by a bar chart .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY'}",
        "record_name": "1341",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Give me the comparison about the average of Shop_ID over the Start_from bin start_from by weekday by a bar chart .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Shop_ID",
            "over",
            "the",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Show me about the correlation between ACC_Percent and All_Games_Percent in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match'}",
        "record_name": "3121",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between ACC_Percent and All_Games_Percent in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "ACC_Percent",
            "and",
            "All_Games_Percent",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a bar chart of record company versus the total number , rank in descending by the the total number .",
        "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
        "db_id": "orchestra",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC'}",
        "record_name": "2494@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of record company versus the total number , rank in descending by the the total number .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "record",
            "company",
            "versus",
            "the",
            "total",
            "number",
            ",",
            "rank",
            "in",
            "descending",
            "by",
            "the",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Record_Company",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "orchestra",
            "GROUP",
            "BY",
            "Record_Company",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table orchestra, columns = [*,Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format]",
        "choose_schema_rat_link": "orchestra.record_company"
    },
    {
        "nl_queries": "Plot the number of name by grouped by name as a bar graph , and I want to list the number of name in desc order please .",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC'}",
        "record_name": "3038@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the number of name by grouped by name as a bar graph , and I want to list the number of name in desc order please .",
        "question_toks": [
            "Plot",
            "the",
            "number",
            "of",
            "name",
            "by",
            "grouped",
            "by",
            "name",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "the",
            "number",
            "of",
            "name",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY COUNT(Name) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "train",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Name",
            ")",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]@SEP@Table train, columns = [*,Train_ID, Name, Time, Service]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.name@SEP@train.name"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 , rank in ascending by the bar .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC'}",
        "record_name": "2912@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 , rank in ascending by the bar .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "meter_100",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "rank",
            "in",
            "ascending",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Show me about the distribution of Sex and the amount of Sex , and group by attribute Sex in a bar chart , rank y-axis from high to low order .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC'}",
        "record_name": "376@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Sex and the amount of Sex , and group by attribute Sex in a bar chart , rank y-axis from high to low order .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "amount",
            "of",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "y-axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Sex",
            ")",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "how many entrepreneurs correspond to each investor ? , and sort Y in asc order .",
        "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
        "db_id": "entrepreneur",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC'}",
        "record_name": "1371@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "how many entrepreneurs correspond to each investor ? , and sort Y in asc order .",
        "question_toks": [
            "how",
            "many",
            "entrepreneurs",
            "correspond",
            "to",
            "each",
            "investor",
            "?",
            ",",
            "and",
            "sort",
            "Y",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Investor",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "entrepreneur",
            "GROUP",
            "BY",
            "Investor",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
        "choose_schema_rat_link": "entrepreneur.entrepreneur_id@SEP@entrepreneur.investor"
    },
    {
        "nl_queries": "How many delegates in each committee ? Return a bar chart , I want to order in descending by the X .",
        "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
        "db_id": "election",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC'}",
        "record_name": "1320@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many delegates in each committee ? Return a bar chart , I want to order in descending by the X .",
        "question_toks": [
            "How",
            "many",
            "delegates",
            "in",
            "each",
            "committee",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Committee",
            ",",
            "COUNT",
            "(",
            "Committee",
            ")",
            "FROM",
            "election",
            "GROUP",
            "BY",
            "Committee",
            "ORDER",
            "BY",
            "Committee",
            "DESC"
        ],
        "choose_schema": "Table election, columns = [*,Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee]",
        "choose_schema_rat_link": "election.delegate@SEP@election.committee"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id , and list by the Y-axis in descending .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\"}",
        "record_name": "1566@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id , and list by the Y-axis in descending .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "list",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Stacked bar chart of the number of country for with each Competition_type in each country",
        "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country",
        "db_id": "sports_competition",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country'}",
        "record_name": "2815",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ],
                [
                    0,
                    22,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stacked bar chart of the number of country for with each Competition_type in each country",
        "question_toks": [
            "Stacked",
            "bar",
            "chart",
            "of",
            "the",
            "number",
            "of",
            "country",
            "for",
            "with",
            "each",
            "Competition_type",
            "in",
            "each",
            "country"
        ],
        "query": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "competition",
            "GROUP",
            "BY",
            "Competition_type",
            ",",
            "Country"
        ],
        "choose_schema": "Table competition, columns = [*,Competition_ID, Year, Competition_type, Country]",
        "choose_schema_rat_link": "competition.country@SEP@competition.competition_id@SEP@competition.competition_type@SEP@competition_result.competition_id"
    },
    {
        "nl_queries": "Group and count the durations for each actor with a bar graph , and I want to rank Y-axis in desc order .",
        "VQL": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC",
        "db_id": "musical",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC'}",
        "record_name": "2444@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Group and count the durations for each actor with a bar graph , and I want to rank Y-axis in desc order .",
        "question_toks": [
            "Group",
            "and",
            "count",
            "the",
            "durations",
            "for",
            "each",
            "actor",
            "with",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "Y-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Duration , COUNT(Duration) FROM actor GROUP BY Duration ORDER BY COUNT(Duration) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Duration",
            ",",
            "COUNT",
            "(",
            "Duration",
            ")",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "Duration",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Duration",
            ")",
            "DESC"
        ],
        "choose_schema": "Table actor, columns = [*,Actor_ID, Name, Musical_ID, Character, Duration, age]",
        "choose_schema_rat_link": "actor.duration@SEP@actor.actor_id"
    },
    {
        "nl_queries": "Return a histogram on how many entrepreneurs correspond to each investor ?",
        "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
        "db_id": "entrepreneur",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor'}",
        "record_name": "1371",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on how many entrepreneurs correspond to each investor ?",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "how",
            "many",
            "entrepreneurs",
            "correspond",
            "to",
            "each",
            "investor",
            "?"
        ],
        "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Investor",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "entrepreneur",
            "GROUP",
            "BY",
            "Investor"
        ],
        "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
        "choose_schema_rat_link": "entrepreneur.entrepreneur_id@SEP@entrepreneur.investor"
    },
    {
        "nl_queries": "Find the number of the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\" , and could you list y axis in ascending order ?",
        "VQL": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY",
        "db_id": "e_learning",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC', 'binning': 'BIN date_of_latest_logon BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY'}",
        "record_name": "1248@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Jaskolski\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Langosh\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                12,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Find the number of the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\" , and could you list y axis in ascending order ?",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "the",
            "latest",
            "logon",
            "date",
            "of",
            "the",
            "students",
            "whose",
            "family",
            "name",
            "is",
            "\"Jaskolski\"",
            "or",
            "\"Langosh\"",
            ",",
            "and",
            "could",
            "you",
            "list",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT date_of_latest_logon , COUNT(date_of_latest_logon) FROM Students WHERE family_name = \"Jaskolski\" OR family_name = \"Langosh\"  ORDER BY COUNT(date_of_latest_logon) ASC BIN date_of_latest_logon BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_of_latest_logon",
            ",",
            "COUNT",
            "(",
            "date_of_latest_logon",
            ")",
            "FROM",
            "Students",
            "WHERE",
            "family_name",
            "=",
            "\"Jaskolski\"",
            "OR",
            "family_name",
            "=",
            "\"Langosh\"",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_of_latest_logon",
            ")",
            "ASC",
            "BIN",
            "date_of_latest_logon",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@course_authors_and_tutors.family_name@SEP@students.family_name@SEP@student_tests_taken.date_test_taken@SEP@students.student_id@SEP@student_course_enrolment.student_id"
    },
    {
        "nl_queries": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph , and I want to rank in descending by the x-axis .",
        "VQL": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active DESC",
        "db_id": "storm_record",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active DESC'}",
        "record_name": "2869@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all storms with at least 1 death , compare the number of deaths by dates active with a bar graph , and I want to rank in descending by the x-axis .",
        "question_toks": [
            "For",
            "all",
            "storms",
            "with",
            "at",
            "least",
            "1",
            "death",
            ",",
            "compare",
            "the",
            "number",
            "of",
            "deaths",
            "by",
            "dates",
            "active",
            "with",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "in",
            "descending",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Dates_active",
            ",",
            "Number_Deaths",
            "FROM",
            "storm",
            "WHERE",
            "number_deaths",
            ">=",
            "1",
            "ORDER",
            "BY",
            "Dates_active",
            "DESC"
        ],
        "choose_schema": "Table storm, columns = [*,Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths]",
        "choose_schema_rat_link": "storm.dates_active@SEP@storm.storm_id@SEP@affected_region.storm_id@SEP@storm.number_deaths@SEP@affected_region.number_city_affected"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a scatter chart shows the correlation between salary and department_id .",
        "VQL": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'\"}",
        "record_name": "1782",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those employees who was hired before 2002-06-21 , a scatter chart shows the correlation between salary and department_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "salary",
            "and",
            "department_id",
            "."
        ],
        "query": "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "SALARY",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time , and show Y-axis in desc order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1762@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , visualize a bar chart about the distribution of hire_date and the sum of department_id bin hire_date by time , and show Y-axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "show",
            "Y-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "What are the names and ages of editors ? Show me a bar chart , and I want to order by the x axis in ascending please .",
        "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name ASC",
        "db_id": "journal_committee",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM editor ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM editor ORDER BY Name ASC'}",
        "record_name": "2053@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names and ages of editors ? Show me a bar chart , and I want to order by the x axis in ascending please .",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ages",
            "of",
            "editors",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Age",
            "FROM",
            "editor",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "choose_schema": "Table editor, columns = [*,Editor_ID, Name, Age]",
        "choose_schema_rat_link": "editor.name@SEP@editor.age@SEP@editor.editor_id@SEP@journal_committee.editor_id"
    },
    {
        "nl_queries": "How many books fall into each category , list by the total number from low to high .",
        "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
        "db_id": "culture_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC'}",
        "record_name": "907@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many books fall into each category , list by the total number from low to high .",
        "question_toks": [
            "How",
            "many",
            "books",
            "fall",
            "into",
            "each",
            "category",
            ",",
            "list",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "book_club",
            "GROUP",
            "BY",
            "category",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]",
        "choose_schema_rat_link": "book_club.book_club_id@SEP@book_club.book_title@SEP@culture_company.book_club_id@SEP@book_club.category"
    },
    {
        "nl_queries": "Give me a bar chart for mean tonnage of each type , and show from low to high by the bar .",
        "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
        "db_id": "ship_mission",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
        "record_name": "2765@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for mean tonnage of each type , and show from low to high by the bar .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "mean",
            "tonnage",
            "of",
            "each",
            "type",
            ",",
            "and",
            "show",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "avg",
            "(",
            "Tonnage",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "Type",
            "ASC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.tonnage@SEP@ship.type"
    },
    {
        "nl_queries": "Just show the first name of the employee and list their department's id in the Y-axis of the bar chart , could you order by the X in descending ?",
        "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC'}",
        "record_name": "1898@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Just show the first name of the employee and list their department's id in the Y-axis of the bar chart , could you order by the X in descending ?",
        "question_toks": [
            "Just",
            "show",
            "the",
            "first",
            "name",
            "of",
            "the",
            "employee",
            "and",
            "list",
            "their",
            "department's",
            "id",
            "in",
            "the",
            "Y-axis",
            "of",
            "the",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "X",
            "in",
            "descending",
            "?"
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "FIRST_NAME",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Return a bar chart that the name as the X-axis , and the number of floors for all buildings as Y-axis , and ordered by the number of floors .",
        "VQL": "Visualize BAR SELECT Name , Floors FROM building ORDER BY floors",
        "db_id": "protein_institute",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Floors FROM building ORDER BY floors', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Floors FROM building ORDER BY floors'}",
        "record_name": "2637",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart that the name as the X-axis , and the number of floors for all buildings as Y-axis , and ordered by the number of floors .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "that",
            "the",
            "name",
            "as",
            "the",
            "X-axis",
            ",",
            "and",
            "the",
            "number",
            "of",
            "floors",
            "for",
            "all",
            "buildings",
            "as",
            "Y-axis",
            ",",
            "and",
            "ordered",
            "by",
            "the",
            "number",
            "of",
            "floors",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Floors FROM building ORDER BY floors",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Floors",
            "FROM",
            "building",
            "ORDER",
            "BY",
            "floors"
        ],
        "choose_schema": "Table building, columns = [*,building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors]",
        "choose_schema_rat_link": "building.name@SEP@building.floors"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Date_of_Birth and Height , order y-axis in desc order please .",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC'}",
        "record_name": "397@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Date_of_Birth and Height , order y-axis in desc order please .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Date_of_Birth",
            "and",
            "Height",
            ",",
            "order",
            "y-axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Height",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Height",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.date@SEP@people.date_of_birth@SEP@people.height"
    },
    {
        "nl_queries": "Show me about the change of Employee_ID over Start_from in a line chart , order x axis in descending order please .",
        "VQL": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC'}",
        "record_name": "1339@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show me about the change of Employee_ID over Start_from in a line chart , order x axis in descending order please .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "change",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            "in",
            "a",
            "line",
            "chart",
            ",",
            "order",
            "x",
            "axis",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "Employee_ID",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "DESC"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]@SEP@Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]@SEP@Table evaluation, columns = [*,Employee_ID, Year_awarded, Bonus]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , could you order by the total number from low to high ?",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
        "record_name": "2928@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , could you order by the total number from low to high ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "amount",
            "of",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , and display by the mean employee id from high to low .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\"}",
        "record_name": "1561@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , and display by the mean employee id from high to low .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "display",
            "by",
            "the",
            "mean",
            "employee",
            "id",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Give me a scatter chart that groups all home , the x-axis is school id and the y-axis is all games percent .",
        "VQL": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3078",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Give me a scatter chart that groups all home , the x-axis is school id and the y-axis is all games percent .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "scatter",
            "chart",
            "that",
            "groups",
            "all",
            "home",
            ",",
            "the",
            "x-axis",
            "is",
            "school",
            "id",
            "and",
            "the",
            "y-axis",
            "is",
            "all",
            "games",
            "percent",
            "."
        ],
        "query": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "School_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.all_games_percent@SEP@basketball_match.all_home@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.all_games@SEP@university.school"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , display from low to high by the y axis please .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC\"}",
        "record_name": "1564@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart , display from low to high by the y axis please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of meter_300 and meter_100 .",
        "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , meter_100 FROM swimmer', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , meter_100 FROM swimmer'}",
        "record_name": "2917",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of meter_300 and meter_100 .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_300",
            "and",
            "meter_100",
            "."
        ],
        "query": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "meter_100",
            "FROM",
            "swimmer"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Road and School_ID .",
        "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , School_ID FROM basketball_match'}",
        "record_name": "3117",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Road and School_ID .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Road",
            "and",
            "School_ID",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Return a histogram on what are the names and distances for all airplanes ?",
        "VQL": "Visualize BAR SELECT name , distance FROM Aircraft",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , distance FROM Aircraft', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , distance FROM Aircraft'}",
        "record_name": "1414",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on what are the names and distances for all airplanes ?",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "what",
            "are",
            "the",
            "names",
            "and",
            "distances",
            "for",
            "all",
            "airplanes",
            "?"
        ],
        "query": "Visualize BAR SELECT name , distance FROM Aircraft",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]@SEP@Table aircraft, columns = [*,aid, name, distance]@SEP@Table employee, columns = [*,eid, name, salary]",
        "choose_schema_rat_link": "aircraft.name@SEP@employee.name@SEP@flight.distance@SEP@aircraft.distance"
    },
    {
        "nl_queries": "List the number of games in each season with a line chart .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
        "db_id": "game_injury",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season'}",
        "record_name": "1494",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "List the number of games in each season with a line chart .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "games",
            "in",
            "each",
            "season",
            "with",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Season",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Season"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@injury_accident.game_id@SEP@game.season"
    },
    {
        "nl_queries": "Create a pie chart showing total number of age across nationality .",
        "VQL": "Visualize PIE SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
        "db_id": "news_report",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality'}",
        "record_name": "2489",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Create a pie chart showing total number of age across nationality .",
        "question_toks": [
            "Create",
            "a",
            "pie",
            "chart",
            "showing",
            "total",
            "number",
            "of",
            "age",
            "across",
            "nationality",
            "."
        ],
        "query": "Visualize PIE SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "Age",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.age@SEP@journalist.nationality"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of employee_id bin hire_date by weekday , and visualize them by a bar chart , display y axis in desc order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1764@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of employee_id bin hire_date by weekday , and visualize them by a bar chart , display y axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "How many hours do the students spend studying in each department Plot them as bar chart , and display from high to low by the X please .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC'}",
        "record_name": "566@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many hours do the students spend studying in each department Plot them as bar chart , and display from high to low by the X please .",
        "question_toks": [
            "How",
            "many",
            "hours",
            "do",
            "the",
            "students",
            "spend",
            "studying",
            "in",
            "each",
            "department",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "sum",
            "(",
            "stu_hrs",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_gpa@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "Visualize a bar chart for how many students play each sport ?",
        "VQL": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname",
        "db_id": "game_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname', 'binning': ''}, 'VQL': 'Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname'}",
        "record_name": "1462",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for how many students play each sport ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "students",
            "play",
            "each",
            "sport",
            "?"
        ],
        "query": "Visualize BAR SELECT SportName , count(*) FROM Sportsinfo GROUP BY sportname",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "SportName",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Sportsinfo",
            "GROUP",
            "BY",
            "sportname"
        ],
        "choose_schema": "Table SportsInfo, columns = [*,StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]",
        "choose_schema_rat_link": "student.stuid@SEP@plays_games.stuid@SEP@sportsinfo.stuid@SEP@sportsinfo.sportname"
    },
    {
        "nl_queries": "Give me a bar chart for the average of baseprice of each decor , and list by the bar in descending please .",
        "VQL": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC'}",
        "record_name": "1969@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for the average of baseprice of each decor , and list by the bar in descending please .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "average",
            "of",
            "baseprice",
            "of",
            "each",
            "decor",
            ",",
            "and",
            "list",
            "by",
            "the",
            "bar",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "avg",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "decor",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.decor"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of department_id over the job_id , and group by attribute job_id , I want to show by the Y in desc .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC\"}",
        "record_name": "1566@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of department_id over the job_id , and group by attribute job_id , I want to show by the Y in desc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "department_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "Y",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Return a bar chart on what is the average age for each gender ? , and sort X in descending order please .",
        "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC'}",
        "record_name": "2473@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on what is the average age for each gender ? , and sort X in descending order please .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "what",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "gender",
            "?",
            ",",
            "and",
            "sort",
            "X",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.gender"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time , and list y axis in desc order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1763@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time , and list y axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "list",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Visualize a bar chart for how many hours do the students spend studying in each department ? , and sort DEPT_CODE from high to low order .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC'}",
        "record_name": "566@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for how many hours do the students spend studying in each department ? , and sort DEPT_CODE from high to low order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "hours",
            "do",
            "the",
            "students",
            "spend",
            "studying",
            "in",
            "each",
            "department",
            "?",
            ",",
            "and",
            "sort",
            "DEPT_CODE",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "sum",
            "(",
            "stu_hrs",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_gpa@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Games and All_Games_Percent .",
        "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match'}",
        "record_name": "3140",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Games and All_Games_Percent .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Games",
            "and",
            "All_Games_Percent",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "A bar chart about what are the average ages for male and female students ? , and could you rank by the bars in desc ?",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC'}",
        "record_name": "58@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart about what are the average ages for male and female students ? , and could you rank by the bars in desc ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "about",
            "what",
            "are",
            "the",
            "average",
            "ages",
            "for",
            "male",
            "and",
            "female",
            "students",
            "?",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "by",
            "the",
            "bars",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id , and sort bar in desc order .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC'}",
        "record_name": "1604@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id , and sort bar in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "sort",
            "bar",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and I want to list in desc by the total number .",
        "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC'}",
        "record_name": "1498@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each headquarter , what are the headquarter and how many companies are centered there Visualize by bar chart , and I want to list in desc by the total number .",
        "question_toks": [
            "For",
            "each",
            "headquarter",
            ",",
            "what",
            "are",
            "the",
            "headquarter",
            "and",
            "how",
            "many",
            "companies",
            "are",
            "centered",
            "there",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.company@SEP@company.company_id@SEP@station_company.company_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the trend about employee_id over hire_date , and could you order HIRE_DATE in descending order please ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC'}",
        "record_name": "1598@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the trend about employee_id over hire_date , and could you order HIRE_DATE in descending order please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "trend",
            "about",
            "employee_id",
            "over",
            "hire_date",
            ",",
            "and",
            "could",
            "you",
            "order",
            "HIRE_DATE",
            "in",
            "descending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show all ministers who do not belong to Progress Party , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
        "db_id": "party_people",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister\"}",
        "record_name": "2517",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"Progress Party\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all ministers who do not belong to Progress Party , and count them by a bar chart",
        "question_toks": [
            "Show",
            "all",
            "ministers",
            "who",
            "do",
            "not",
            "belong",
            "to",
            "Progress",
            "Party",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Minister",
            ",",
            "COUNT",
            "(",
            "Minister",
            ")",
            "FROM",
            "party",
            "WHERE",
            "party_name",
            "!",
            "=",
            "'Progress",
            "Party'",
            "GROUP",
            "BY",
            "Minister"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.minister@SEP@party.party_id@SEP@party.party_name@SEP@member.party_id@SEP@party_events.party_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of meter_400 and ID , order by the total number from high to low .",
        "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC'}",
        "record_name": "2918@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of meter_400 and ID , order by the total number from high to low .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_400",
            "and",
            "ID",
            ",",
            "order",
            "by",
            "the",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_400",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Give me the comparison about the average of meter_100 over the Nationality , and group by attribute Nationality by a bar chart , and display by the y-axis in ascending .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC'}",
        "record_name": "2909@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of meter_100 over the Nationality , and group by attribute Nationality by a bar chart , and display by the y-axis in ascending .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "meter_100",
            "over",
            "the",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "by",
            "the",
            "y-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "meter_100",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by weekday , and could you order the average of manager id in ascending order ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1553@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by weekday , and could you order the average of manager id in ascending order ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "could",
            "you",
            "order",
            "the",
            "average",
            "of",
            "manager",
            "id",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@departments.manager_id@SEP@employees.manager_id@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "A pie chart about how many credits does the department offer ?",
        "VQL": "Visualize PIE SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code'}",
        "record_name": "585",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "A pie chart about how many credits does the department offer ?",
        "question_toks": [
            "A",
            "pie",
            "chart",
            "about",
            "how",
            "many",
            "credits",
            "does",
            "the",
            "department",
            "offer",
            "?"
        ],
        "query": "Visualize PIE SELECT DEPT_CODE , sum(crs_credit) FROM course GROUP BY dept_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "DEPT_CODE",
            ",",
            "sum",
            "(",
            "crs_credit",
            ")",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_code"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "Return a histogram on how many students are in each department ? , and order by the y-axis from low to high .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC'}",
        "record_name": "564@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on how many students are in each department ? , and order by the y-axis from low to high .",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "how",
            "many",
            "students",
            "are",
            "in",
            "each",
            "department",
            "?",
            ",",
            "and",
            "order",
            "by",
            "the",
            "y-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_gpa@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1541",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of department_id bin hire_date by weekday , and visualize them by a bar chart , could you order from high to low by the y axis please ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1770@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find hire_date and the sum of department_id bin hire_date by weekday , and visualize them by a bar chart , could you order from high to low by the y axis please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Please compare the number of the church by open date (bin into the weekday) using a bar chart , rank y axis in asc order please .",
        "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC BIN Open_Date BY WEEKDAY",
        "db_id": "wedding",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC', 'binning': 'BIN Open_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC BIN Open_Date BY WEEKDAY'}",
        "record_name": "3217@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Please compare the number of the church by open date (bin into the weekday) using a bar chart , rank y axis in asc order please .",
        "question_toks": [
            "Please",
            "compare",
            "the",
            "number",
            "of",
            "the",
            "church",
            "by",
            "open",
            "date",
            "(bin",
            "into",
            "the",
            "weekday)",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) ASC BIN Open_Date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Open_Date",
            ",",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "FROM",
            "church",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "ASC",
            "BIN",
            "Open_Date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table church, columns = [*,Church_ID, Name, Organized_by, Open_Date, Continuation_of]",
        "choose_schema_rat_link": "church.open_date@SEP@church.church_id@SEP@wedding.church_id"
    },
    {
        "nl_queries": "Show total number of id from each meter 200 , and order by the x-axis in descending .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC'}",
        "record_name": "2910@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show total number of id from each meter 200 , and order by the x-axis in descending .",
        "question_toks": [
            "Show",
            "total",
            "number",
            "of",
            "id",
            "from",
            "each",
            "meter",
            "200",
            ",",
            "and",
            "order",
            "by",
            "the",
            "x-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_200@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.meter_100@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "List the physicians' employee ids together with their primary affiliation departments' ids with a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1",
        "db_id": "hospital_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1'}",
        "record_name": "1533",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids with a scatter chart .",
        "question_toks": [
            "List",
            "the",
            "physicians'",
            "employee",
            "ids",
            "together",
            "with",
            "their",
            "primary",
            "affiliation",
            "departments'",
            "ids",
            "with",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Physician , Department FROM affiliated_with WHERE primaryaffiliation = 1",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Physician",
            ",",
            "Department",
            "FROM",
            "affiliated_with",
            "WHERE",
            "primaryaffiliation",
            "=",
            "1"
        ],
        "choose_schema": "Table Physician, columns = [*,EmployeeID, Name, Position, SSN]@SEP@Table Department, columns = [*,DepartmentID, Name, Head]@SEP@Table Affiliated_With, columns = [*,Physician, Department, PrimaryAffiliation]@SEP@Table Trained_In, columns = [*,Physician, Treatment, CertificationDate, CertificationExpires]@SEP@Table Appointment, columns = [*,AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom]@SEP@Table Prescribes, columns = [*,Physician, Patient, Medication, Date, Appointment, Dose]@SEP@Table Undergoes, columns = [*,Patient, Procedures, Stay, DateUndergoes, Physician, AssistingNurse]",
        "choose_schema_rat_link": "physician.employeeid@SEP@nurse.employeeid@SEP@affiliated_with.primaryaffiliation@SEP@affiliated_with.physician@SEP@trained_in.physician@SEP@appointment.physician@SEP@prescribes.physician@SEP@undergoes.physician@SEP@affiliated_with.department"
    },
    {
        "nl_queries": "Give me a bar chart for the average of weight of each pettype",
        "VQL": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , avg(weight) FROM pets GROUP BY pettype', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype'}",
        "record_name": "2560",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for the average of weight of each pettype",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "average",
            "of",
            "weight",
            "of",
            "each",
            "pettype"
        ],
        "query": "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "avg",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.weight"
    },
    {
        "nl_queries": "Scatter plot to show order id on x axis and the total number on y axis .",
        "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "db_id": "customers_and_invoices",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT order_id , count(*) FROM Order_items GROUP BY order_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id'}",
        "record_name": "967",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                44,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    44,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Scatter plot to show order id on x axis and the total number on y axis .",
        "question_toks": [
            "Scatter",
            "plot",
            "to",
            "show",
            "order",
            "id",
            "on",
            "x",
            "axis",
            "and",
            "the",
            "total",
            "number",
            "on",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "choose_schema": "Table Orders, columns = [*,order_id, customer_id, date_order_placed, order_details]@SEP@Table Invoices, columns = [*,invoice_number, order_id, invoice_date]@SEP@Table Order_Items, columns = [*,order_item_id, order_id, product_id, product_quantity, other_order_item_details]",
        "choose_schema_rat_link": "orders.order_id@SEP@invoices.order_id@SEP@order_items.order_id@SEP@orders.order_details@SEP@order_items.order_item_id@SEP@invoice_line_items.order_item_id"
    },
    {
        "nl_queries": "Visualize a bar chart , count and group by nationality from the journalist table , show x-axis in ascending order .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "news_report",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2486@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart , count and group by nationality from the journalist table , show x-axis in ascending order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            ",",
            "count",
            "and",
            "group",
            "by",
            "nationality",
            "from",
            "the",
            "journalist",
            "table",
            ",",
            "show",
            "x-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and rank by the Y-axis in descending .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC'}",
        "record_name": "3137@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and rank by the Y-axis in descending .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "ACC_Regular_Season",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time , and could you display y axis in ascending order ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1761@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time , and could you display y axis in ascending order ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "could",
            "you",
            "display",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Return a bar chart on what are the apartment number and the room count of each apartment ? , I want to rank from high to low by the bars please .",
        "VQL": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC'}",
        "record_name": "97@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on what are the apartment number and the room count of each apartment ? , I want to rank from high to low by the bars please .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "what",
            "are",
            "the",
            "apartment",
            "number",
            "and",
            "the",
            "room",
            "count",
            "of",
            "each",
            "apartment",
            "?",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "bars",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT apt_number , room_count FROM Apartments ORDER BY apt_number DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "apt_number",
            ",",
            "room_count",
            "FROM",
            "Apartments",
            "ORDER",
            "BY",
            "apt_number",
            "DESC"
        ],
        "choose_schema": "Table Apartments, columns = [*,apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "choose_schema_rat_link": "apartments.apt_number@SEP@apartments.room_count@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_booking_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@view_unit_status.apt_booking_id"
    },
    {
        "nl_queries": "Give me a bar chart for all_games_percent of each team name , could you list in asc by the y axis please ?",
        "VQL": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC'}",
        "record_name": "3134@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for all_games_percent of each team name , could you list in asc by the y axis please ?",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "all_games_percent",
            "of",
            "each",
            "team",
            "name",
            ",",
            "could",
            "you",
            "list",
            "in",
            "asc",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team_Name",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_name@SEP@basketball_match.team_id"
    },
    {
        "nl_queries": "Group by all acc road , show the team id and acc percent in a scatter plot .",
        "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3073",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Group by all acc road , show the team id and acc percent in a scatter plot .",
        "question_toks": [
            "Group",
            "by",
            "all",
            "acc",
            "road",
            ",",
            "show",
            "the",
            "team",
            "id",
            "and",
            "acc",
            "percent",
            "in",
            "a",
            "scatter",
            "plot",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_home@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , and order Season from high to low order please .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC'}",
        "record_name": "1484@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ],
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Give me line charts of worldwide gross the number of season over year season by major genres Away_team , and order Season from high to low order please .",
        "question_toks": [
            "Give",
            "me",
            "line",
            "charts",
            "of",
            "worldwide",
            "gross",
            "the",
            "number",
            "of",
            "season",
            "over",
            "year",
            "season",
            "by",
            "major",
            "genres",
            "Away_team",
            ",",
            "and",
            "order",
            "Season",
            "from",
            "high",
            "to",
            "low",
            "order",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season ORDER BY Season DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Away_team",
            ",",
            "Season",
            "ORDER",
            "BY",
            "Season",
            "DESC"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.season@SEP@game.away_team"
    },
    {
        "nl_queries": "I want to know the proportion of the average age for each class .",
        "VQL": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
        "db_id": "ship_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS'}",
        "record_name": "2744",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "I want to know the proportion of the average age for each class .",
        "question_toks": [
            "I",
            "want",
            "to",
            "know",
            "the",
            "proportion",
            "of",
            "the",
            "average",
            "age",
            "for",
            "each",
            "class",
            "."
        ],
        "query": "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Class",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "CLASS"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.age@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "Give me a bar chart for the number of country of each country , sort names in desc order .",
        "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
        "db_id": "concert_singer",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC'}",
        "record_name": "693@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for the number of country of each country , sort names in desc order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "number",
            "of",
            "country",
            "of",
            "each",
            "country",
            ",",
            "sort",
            "names",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Country",
            "ORDER",
            "BY",
            "Country",
            "DESC"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.country@SEP@stadium.name@SEP@singer.name"
    },
    {
        "nl_queries": "What are the number of the dates with a maximum temperature higher than 85 ? , I want to show the number of date from low to high order .",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY YEAR'}",
        "record_name": "314@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "What are the number of the dates with a maximum temperature higher than 85 ? , I want to show the number of date from low to high order .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "with",
            "a",
            "maximum",
            "temperature",
            "higher",
            "than",
            "85",
            "?",
            ",",
            "I",
            "want",
            "to",
            "show",
            "the",
            "number",
            "of",
            "date",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) ASC BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date",
            ")",
            "ASC",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart .",
        "VQL": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
        "db_id": "tracking_grants_for_research",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY'}",
        "record_name": "2963",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "weekday"
            ],
            "vis": 0
        },
        "question": "When do all the researcher role staff stop working ? Bin the time into weekday interval and count them with a bar chart .",
        "question_toks": [
            "When",
            "do",
            "all",
            "the",
            "researcher",
            "role",
            "staff",
            "stop",
            "working",
            "?",
            "Bin",
            "the",
            "time",
            "into",
            "weekday",
            "interval",
            "and",
            "count",
            "them",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_to",
            ",",
            "COUNT",
            "(",
            "date_to",
            ")",
            "FROM",
            "Project_Staff",
            "BIN",
            "date_to",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
        "choose_schema_rat_link": "project_staff.role_code@SEP@staff_roles.role_code@SEP@staff_roles.role_description@SEP@project_staff.staff_id@SEP@research_staff.staff_id@SEP@research_staff.staff_details"
    },
    {
        "nl_queries": "Count the number of programs broadcast for each time section of a day Show bar chart , could you rank by the the total number in desc ?",
        "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC",
        "db_id": "program_share",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC'}",
        "record_name": "2623@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the number of programs broadcast for each time section of a day Show bar chart , could you rank by the the total number in desc ?",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "programs",
            "broadcast",
            "for",
            "each",
            "time",
            "section",
            "of",
            "a",
            "day",
            "Show",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "rank",
            "by",
            "the",
            "the",
            "total",
            "number",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time_of_day",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "broadcast",
            "GROUP",
            "BY",
            "time_of_day",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table broadcast, columns = [*,Channel_ID, Program_ID, Time_of_day]",
        "choose_schema_rat_link": "program.program_id@SEP@broadcast.program_id@SEP@broadcast_share.program_id@SEP@broadcast.time_of_day"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home , and order in asc by the Y-axis please .",
        "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC'}",
        "record_name": "3093@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home , and order in asc by the Y-axis please .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            ",",
            "and",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team , display how many home team from low to high order .",
        "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC'}",
        "record_name": "1488@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ],
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stack bar chart of how many home team vs Away_team based on home team , display how many home team from low to high order .",
        "question_toks": [
            "Stack",
            "bar",
            "chart",
            "of",
            "how",
            "many",
            "home",
            "team",
            "vs",
            "Away_team",
            "based",
            "on",
            "home",
            "team",
            ",",
            "display",
            "how",
            "many",
            "home",
            "team",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team ORDER BY COUNT(Home_team) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Home_team",
            ",",
            "COUNT",
            "(",
            "Home_team",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Away_team",
            ",",
            "Home_team",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Home_team",
            ")",
            "ASC"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "game.home_team@SEP@stadium.home_games@SEP@game.away_team"
    },
    {
        "nl_queries": "Return a bar chart on how many eliminations did each team have ?",
        "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team",
        "db_id": "wrestler",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(*) FROM elimination GROUP BY Team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team'}",
        "record_name": "3279",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on how many eliminations did each team have ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "how",
            "many",
            "eliminations",
            "did",
            "each",
            "team",
            "have",
            "?"
        ],
        "query": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "elimination",
            "GROUP",
            "BY",
            "Team"
        ],
        "choose_schema": "Table Elimination, columns = [*,Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "choose_schema_rat_link": "elimination.elimination_id@SEP@elimination.elimination_move@SEP@elimination.team"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id , and display from high to low by the y axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC\"}",
        "record_name": "1778@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id , and display from high to low by the y axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart , and list in desc by the Y .",
        "VQL": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC'}",
        "record_name": "339@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the name and the number of stations for all the cities that have at least 15 stations Show bar chart , and list in desc by the Y .",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "the",
            "number",
            "of",
            "stations",
            "for",
            "all",
            "the",
            "cities",
            "that",
            "have",
            "at",
            "least",
            "15",
            "stations",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "city",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,id, name, lat, long, dock_count, city, installation_date]",
        "choose_schema_rat_link": "station.name@SEP@status.station_id@SEP@station.city"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Neutral and ACC_Percent , could you list X in asc order ?",
        "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC'}",
        "record_name": "3144@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Neutral and ACC_Percent , could you list X in asc order ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Neutral",
            "and",
            "ACC_Percent",
            ",",
            "could",
            "you",
            "list",
            "X",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Neutral",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of department_id over the hire_date bin hire_date by weekday by a bar chart , list by the y axis in desc .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1554@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the sum of department_id over the hire_date bin hire_date by weekday by a bar chart , list by the y axis in desc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "department_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Find the total rating ratio for each channel owner Visualize by bar chart , could you show X-axis in ascending order please ?",
        "VQL": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC",
        "db_id": "program_share",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC'}",
        "record_name": "2625@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the total rating ratio for each channel owner Visualize by bar chart , could you show X-axis in ascending order please ?",
        "question_toks": [
            "Find",
            "the",
            "total",
            "rating",
            "ratio",
            "for",
            "each",
            "channel",
            "owner",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "show",
            "X-axis",
            "in",
            "ascending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Owner , sum(Rating_in_percent) FROM channel GROUP BY OWNER ORDER BY Owner ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Owner",
            ",",
            "sum",
            "(",
            "Rating_in_percent",
            ")",
            "FROM",
            "channel",
            "GROUP",
            "BY",
            "OWNER",
            "ORDER",
            "BY",
            "Owner",
            "ASC"
        ],
        "choose_schema": "Table program, columns = [*,Program_ID, Name, Origin, Launch, Owner]@SEP@Table channel, columns = [*,Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]",
        "choose_schema_rat_link": "channel.rating_in_percent@SEP@channel.channel_id@SEP@broadcast.channel_id@SEP@broadcast_share.channel_id@SEP@program.owner@SEP@channel.owner"
    },
    {
        "nl_queries": "Find the average age of students living in each city with a bar chart , and sort bar in ascending order .",
        "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC'}",
        "record_name": "1232@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the average age of students living in each city with a bar chart , and sort bar in ascending order .",
        "question_toks": [
            "Find",
            "the",
            "average",
            "age",
            "of",
            "students",
            "living",
            "in",
            "each",
            "city",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "bar",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city_code",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "city_code",
            "ORDER",
            "BY",
            "city_code",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@student.stuid@SEP@dorm.student_capacity@SEP@lives_in.stuid@SEP@student.city_code"
    },
    {
        "nl_queries": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , rank from high to low by the X .",
        "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC'}",
        "record_name": "310@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what are the ids and names of all start stations that were the beginning of at least 200 trips ? , rank from high to low by the X .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "all",
            "start",
            "stations",
            "that",
            "were",
            "the",
            "beginning",
            "of",
            "at",
            "least",
            "200",
            "trips",
            "?",
            ",",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "start_station_name",
            ",",
            "start_station_id",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "start_station_name",
            "DESC"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "trip.start_station_name@SEP@trip.start_station_id@SEP@station.id@SEP@trip.id@SEP@station.name@SEP@trip.start_date@SEP@status.station_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a line chart about the change of commission_pct over hire_date , and list in descending by the x-axis please .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1558@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For all employees who have the letters D or S in their first name , draw a line chart about the change of commission_pct over hire_date , and list in descending by the x-axis please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "commission_pct",
            "over",
            "hire_date",
            ",",
            "and",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "x-axis",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COMMISSION_PCT",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.commission_pct@SEP@employees.hire_date"
    },
    {
        "nl_queries": "A bar chart shows the distribution of All_Games and ACC_Percent .",
        "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , ACC_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match'}",
        "record_name": "3138",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of All_Games and ACC_Percent .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "All_Games",
            "and",
            "ACC_Percent",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show how many committee from each committee , I want to sort names in desc order .",
        "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
        "db_id": "election",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC'}",
        "record_name": "1320@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show how many committee from each committee , I want to sort names in desc order .",
        "question_toks": [
            "Show",
            "how",
            "many",
            "committee",
            "from",
            "each",
            "committee",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "names",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Committee",
            ",",
            "COUNT",
            "(",
            "Committee",
            ")",
            "FROM",
            "election",
            "GROUP",
            "BY",
            "Committee",
            "ORDER",
            "BY",
            "Committee",
            "DESC"
        ],
        "choose_schema": "Table election, columns = [*,Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee]",
        "choose_schema_rat_link": "election.committee"
    },
    {
        "nl_queries": "Bar chart x axis calendar date y axis the number of calendar date",
        "VQL": "Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY WEEKDAY",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar', 'binning': 'BIN Calendar_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY WEEKDAY'}",
        "record_name": "783",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                4,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar chart x axis calendar date y axis the number of calendar date",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "calendar",
            "date",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "calendar",
            "date"
        ],
        "query": "Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Calendar_Date",
            ",",
            "COUNT",
            "(",
            "Calendar_Date",
            ")",
            "FROM",
            "Ref_calendar",
            "BIN",
            "Calendar_Date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Ref_Calendar, columns = [*,Calendar_Date, Day_Number]",
        "choose_schema_rat_link": "all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "Compute the total total number of enrollment across affiliation as a pie chart .",
        "VQL": "Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation'}",
        "record_name": "3070",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Compute the total total number of enrollment across affiliation as a pie chart .",
        "question_toks": [
            "Compute",
            "the",
            "total",
            "total",
            "number",
            "of",
            "enrollment",
            "across",
            "affiliation",
            "as",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Affiliation",
            ",",
            "sum",
            "(",
            "enrollment",
            ")",
            "FROM",
            "university",
            "GROUP",
            "BY",
            "affiliation"
        ],
        "choose_schema": "Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.enrollment@SEP@university.affiliation"
    },
    {
        "nl_queries": "How old is the youngest person for each job Visualize by bar chart , and rank by the X from high to low please .",
        "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC'}",
        "record_name": "2463@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How old is the youngest person for each job Visualize by bar chart , and rank by the X from high to low please .",
        "question_toks": [
            "How",
            "old",
            "is",
            "the",
            "youngest",
            "person",
            "for",
            "each",
            "job",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "X",
            "from",
            "high",
            "to",
            "low",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "job",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.job"
    },
    {
        "nl_queries": "Show a pie chart to compare the number of each position of the pilot .",
        "VQL": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
        "db_id": "pilot_record",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Position , COUNT(Position) FROM pilot GROUP BY Position', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position'}",
        "record_name": "2584",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show a pie chart to compare the number of each position of the pilot .",
        "question_toks": [
            "Show",
            "a",
            "pie",
            "chart",
            "to",
            "compare",
            "the",
            "number",
            "of",
            "each",
            "position",
            "of",
            "the",
            "pilot",
            "."
        ],
        "query": "Visualize PIE SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Position",
            ",",
            "COUNT",
            "(",
            "Position",
            ")",
            "FROM",
            "pilot",
            "GROUP",
            "BY",
            "Position"
        ],
        "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
        "choose_schema_rat_link": "pilot.position@SEP@pilot.pilot_id@SEP@pilot.pilot_name@SEP@pilot_record.pilot_id"
    },
    {
        "nl_queries": "Show me the total number by grape in a histogram , and display by the X-axis in asc .",
        "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC'}",
        "record_name": "3238@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the total number by grape in a histogram , and display by the X-axis in asc .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "total",
            "number",
            "by",
            "grape",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "display",
            "by",
            "the",
            "X-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "Grape",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1756",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "employee_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Stack bar chart of how many home team vs Away_team based on home team",
        "VQL": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team'}",
        "record_name": "1488",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ],
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stack bar chart of how many home team vs Away_team based on home team",
        "question_toks": [
            "Stack",
            "bar",
            "chart",
            "of",
            "how",
            "many",
            "home",
            "team",
            "vs",
            "Away_team",
            "based",
            "on",
            "home",
            "team"
        ],
        "query": "Visualize BAR SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Away_team ,  Home_team",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Home_team",
            ",",
            "COUNT",
            "(",
            "Home_team",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Away_team",
            ",",
            "Home_team"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "game.home_team@SEP@stadium.home_games@SEP@game.away_team"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time , could you order in ascending by the y-axis ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1541@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time , could you order in ascending by the y-axis ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "could",
            "you",
            "order",
            "in",
            "ascending",
            "by",
            "the",
            "y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id , and list names in asc order .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1774@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id , and list names in asc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "list",
            "names",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Find meter_200 and the sum of ID , and group by attribute meter_200 , and visualize them by a bar chart , order bars from high to low order .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC'}",
        "record_name": "2910@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find meter_200 and the sum of ID , and group by attribute meter_200 , and visualize them by a bar chart , order bars from high to low order .",
        "question_toks": [
            "Find",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "bars",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , a scatter chart shows the correlation between price and manufacturer , and group by attribute name .",
        "VQL": "Visualize SCATTER SELECT Price , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Price , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Price , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name'}",
        "record_name": "2200",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those products with a price between 60 and 120 , a scatter chart shows the correlation between price and manufacturer , and group by attribute name .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "a",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "price",
            "and",
            "manufacturer",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "name",
            "."
        ],
        "query": "Visualize SCATTER SELECT Price , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 GROUP BY Name",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Price",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "GROUP",
            "BY",
            "Name"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@products.manufacturer@SEP@manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "What is the total amount of grants given by each organisations ? Also list the organisation id .",
        "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "db_id": "tracking_grants_for_research",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id'}",
        "record_name": "2961",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the total amount of grants given by each organisations ? Also list the organisation id .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "amount",
            "of",
            "grants",
            "given",
            "by",
            "each",
            "organisations",
            "?",
            "Also",
            "list",
            "the",
            "organisation",
            "id",
            "."
        ],
        "query": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "sum",
            "(",
            "grant_amount",
            ")",
            ",",
            "organisation_id",
            "FROM",
            "Grants",
            "GROUP",
            "BY",
            "organisation_id"
        ],
        "choose_schema": "Table Grants, columns = [*,grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]@SEP@Table Organisations, columns = [*,organisation_id, organisation_type, organisation_details]@SEP@Table Projects, columns = [*,project_id, organisation_id, project_details]",
        "choose_schema_rat_link": "grants.organisation_id@SEP@organisations.organisation_id@SEP@projects.organisation_id@SEP@documents.grant_id@SEP@grants.grant_id@SEP@grants.grant_amount@SEP@grants.grant_start_date@SEP@grants.grant_end_date@SEP@organisation_types.organisation_type@SEP@organisation_types.organisation_type_description@SEP@organisations.organisation_type@SEP@organisations.organisation_details"
    },
    {
        "nl_queries": "Show all destinations and the number of flights to each destination Plot them as bar chart , and could you rank in asc by the the total number ?",
        "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
        "db_id": "flight_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC'}",
        "record_name": "1408@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all destinations and the number of flights to each destination Plot them as bar chart , and could you rank in asc by the the total number ?",
        "question_toks": [
            "Show",
            "all",
            "destinations",
            "and",
            "the",
            "number",
            "of",
            "flights",
            "to",
            "each",
            "destination",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "the",
            "total",
            "number",
            "?"
        ],
        "query": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "destination",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.destination@SEP@flight.flno"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home .",
        "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3104",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "sum",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home , I want to rank All_Home in ascending order .",
        "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC'}",
        "record_name": "3092@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home , I want to rank All_Home in ascending order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "All_Home",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show the total number from each category , I want to list in desc by the bars .",
        "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "db_id": "culture_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC'}",
        "record_name": "907@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the total number from each category , I want to list in desc by the bars .",
        "question_toks": [
            "Show",
            "the",
            "total",
            "number",
            "from",
            "each",
            "category",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "book_club",
            "GROUP",
            "BY",
            "category",
            "ORDER",
            "BY",
            "Category",
            "DESC"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]",
        "choose_schema_rat_link": "book_club.category"
    },
    {
        "nl_queries": "Bar chart x axis calendar date y axis the number of calendar date , I want to display by the Y in desc .",
        "VQL": "Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC BIN Calendar_Date BY WEEKDAY",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC', 'binning': 'BIN Calendar_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC BIN Calendar_Date BY WEEKDAY'}",
        "record_name": "783@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                4,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar chart x axis calendar date y axis the number of calendar date , I want to display by the Y in desc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "calendar",
            "date",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "calendar",
            "date",
            ",",
            "I",
            "want",
            "to",
            "display",
            "by",
            "the",
            "Y",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar  ORDER BY COUNT(Calendar_Date) DESC BIN Calendar_Date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Calendar_Date",
            ",",
            "COUNT",
            "(",
            "Calendar_Date",
            ")",
            "FROM",
            "Ref_calendar",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Calendar_Date",
            ")",
            "DESC",
            "BIN",
            "Calendar_Date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Ref_Calendar, columns = [*,Calendar_Date, Day_Number]",
        "choose_schema_rat_link": "all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "What are the number of the dates in which the mean sea level pressure was between 30 . 3 and 31 ?",
        "VQL": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date'}",
        "record_name": "342",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            34,
                            false
                        ],
                        null
                    ],
                    30.3,
                    31.0
                ]
            ],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "What are the number of the dates in which the mean sea level pressure was between 30 . 3 and 31 ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "in",
            "which",
            "the",
            "mean",
            "sea",
            "level",
            "pressure",
            "was",
            "between",
            "30",
            ".",
            "3",
            "and",
            "31",
            "?"
        ],
        "query": "Visualize LINE SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 GROUP BY date",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "mean_sea_level_pressure_inches",
            "BETWEEN",
            "30",
            ".",
            "3",
            "AND",
            "31",
            "GROUP",
            "BY",
            "date"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.mean_sea_level_pressure_inches@SEP@weather.date@SEP@weather.mean_temperature_f@SEP@weather.mean_dew_point_f@SEP@weather.mean_humidity@SEP@weather.mean_visibility_miles@SEP@weather.mean_wind_speed_mph"
    },
    {
        "nl_queries": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , order from high to low by the X .",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
        "db_id": "ship_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC'}",
        "record_name": "2737@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    50.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart for how many captains with younger than 50 are in each rank ? , order from high to low by the X .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "captains",
            "with",
            "younger",
            "than",
            "50",
            "are",
            "in",
            "each",
            "rank",
            "?",
            ",",
            "order",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "captain",
            "WHERE",
            "age",
            "<",
            "50",
            "GROUP",
            "BY",
            "rank",
            "ORDER",
            "BY",
            "Rank",
            "DESC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the average of manager_id , and group by attribute job_id in a bar chart , could you show Y from high to low order please ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC'}",
        "record_name": "1605@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the average of manager_id , and group by attribute job_id in a bar chart , could you show Y from high to low order please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "show",
            "Y",
            "from",
            "high",
            "to",
            "low",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "What are the different classes of races , and how many races correspond to each Show bar chart , order from low to high by the total number .",
        "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
        "db_id": "race_track",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC'}",
        "record_name": "2648@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the different classes of races , and how many races correspond to each Show bar chart , order from low to high by the total number .",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "classes",
            "of",
            "races",
            ",",
            "and",
            "how",
            "many",
            "races",
            "correspond",
            "to",
            "each",
            "Show",
            "bar",
            "chart",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "race",
            "GROUP",
            "BY",
            "CLASS",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
        "choose_schema_rat_link": "race.class@SEP@race.race_id"
    },
    {
        "nl_queries": "Show how many flights for each origin city with a pie chart .",
        "VQL": "Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT origin , COUNT(origin) FROM Flight GROUP BY origin', 'binning': ''}, 'VQL': 'Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin'}",
        "record_name": "1400",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show how many flights for each origin city with a pie chart .",
        "question_toks": [
            "Show",
            "how",
            "many",
            "flights",
            "for",
            "each",
            "origin",
            "city",
            "with",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT origin , COUNT(origin) FROM Flight GROUP BY origin",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "origin",
            ",",
            "COUNT",
            "(",
            "origin",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.flno@SEP@flight.origin"
    },
    {
        "nl_queries": "A bar chart showing the number of flights with price higher than 300 for each destination city , show from low to high by the bar .",
        "VQL": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY destination ASC",
        "db_id": "flight_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY destination ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY destination ASC'}",
        "record_name": "1413@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    300.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart showing the number of flights with price higher than 300 for each destination city , show from low to high by the bar .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "showing",
            "the",
            "number",
            "of",
            "flights",
            "with",
            "price",
            "higher",
            "than",
            "300",
            "for",
            "each",
            "destination",
            "city",
            ",",
            "show",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight WHERE price > 300 GROUP BY destination ORDER BY destination ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "destination",
            ",",
            "COUNT",
            "(",
            "destination",
            ")",
            "FROM",
            "Flight",
            "WHERE",
            "price",
            ">",
            "300",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "destination",
            "ASC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.flno@SEP@flight.price@SEP@flight.destination"
    },
    {
        "nl_queries": "Plot the number of result by grouped by result as a bar graph , and I want to rank from high to low by the X .",
        "VQL": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
        "db_id": "music_4",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC'}",
        "record_name": "2441@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the number of result by grouped by result as a bar graph , and I want to rank from high to low by the X .",
        "question_toks": [
            "Plot",
            "the",
            "number",
            "of",
            "result",
            "by",
            "grouped",
            "by",
            "result",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Result , COUNT(Result) FROM music_festival GROUP BY Result ORDER BY Result DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Result",
            ",",
            "COUNT",
            "(",
            "Result",
            ")",
            "FROM",
            "music_festival",
            "GROUP",
            "BY",
            "Result",
            "ORDER",
            "BY",
            "Result",
            "DESC"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.result"
    },
    {
        "nl_queries": "What are the dates with a maximum temperature higher than 85 , and count them by a bar chart , and display from high to low by the Y .",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY'}",
        "record_name": "315@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "What are the dates with a maximum temperature higher than 85 , and count them by a bar chart , and display from high to low by the Y .",
        "question_toks": [
            "What",
            "are",
            "the",
            "dates",
            "with",
            "a",
            "maximum",
            "temperature",
            "higher",
            "than",
            "85",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date",
            ")",
            "DESC",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "Show me about the proportion of the amount of Sex and the amount of Sex in a pie chart .",
        "VQL": "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex'}",
        "record_name": "384",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show me about the proportion of the amount of Sex and the amount of Sex in a pie chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "proportion",
            "of",
            "the",
            "amount",
            "of",
            "Sex",
            "and",
            "the",
            "amount",
            "of",
            "Sex",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "How many accounts for different account details ? Draw a bar chart , sort X-axis in asc order please .",
        "VQL": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details ASC",
        "db_id": "customers_and_invoices",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details ASC'}",
        "record_name": "926@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many accounts for different account details ? Draw a bar chart , sort X-axis in asc order please .",
        "question_toks": [
            "How",
            "many",
            "accounts",
            "for",
            "different",
            "account",
            "details",
            "?",
            "Draw",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "X-axis",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT other_account_details , COUNT(other_account_details) FROM Accounts GROUP BY other_account_details ORDER BY other_account_details ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "other_account_details",
            ",",
            "COUNT",
            "(",
            "other_account_details",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "other_account_details",
            "ORDER",
            "BY",
            "other_account_details",
            "ASC"
        ],
        "choose_schema": "Table Accounts, columns = [*,account_id, customer_id, date_account_opened, account_name, other_account_details]",
        "choose_schema_rat_link": "accounts.account_id@SEP@accounts.account_name@SEP@financial_transactions.account_id@SEP@orders.order_id@SEP@orders.order_details@SEP@invoices.order_id@SEP@order_items.order_item_id@SEP@order_items.order_id@SEP@invoice_line_items.order_item_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id , and could you rank in asc by the sum employee id ?",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC\"}",
        "record_name": "1560@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id , and could you rank in asc by the sum employee id ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "sum",
            "employee",
            "id",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id , and I want to show names from low to high order please .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1779@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id , and I want to show names from low to high order please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "names",
            "from",
            "low",
            "to",
            "high",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "List the types of competition and the number of competitions of each type Visualize by bar chart , and I want to order the total number from high to low order .",
        "VQL": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC",
        "db_id": "sports_competition",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC'}",
        "record_name": "2820@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the types of competition and the number of competitions of each type Visualize by bar chart , and I want to order the total number from high to low order .",
        "question_toks": [
            "List",
            "the",
            "types",
            "of",
            "competition",
            "and",
            "the",
            "number",
            "of",
            "competitions",
            "of",
            "each",
            "type",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "the",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Competition_type , COUNT(*) FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Competition_type",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "competition",
            "GROUP",
            "BY",
            "Competition_type",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table competition, columns = [*,Competition_ID, Year, Competition_type, Country]",
        "choose_schema_rat_link": "competition.competition_id@SEP@competition.competition_type@SEP@competition_result.competition_id@SEP@club_rank.total"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between Body_Builder_ID and People_ID .",
        "VQL": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Body_Builder_ID , People_ID FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder'}",
        "record_name": "352",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between Body_Builder_ID and People_ID .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "Body_Builder_ID",
            "and",
            "People_ID",
            "."
        ],
        "query": "Visualize SCATTER SELECT Body_Builder_ID , People_ID FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Body_Builder_ID",
            ",",
            "People_ID",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]@SEP@Table people, columns = [*,People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "choose_schema_rat_link": "body_builder.body_builder_id@SEP@body_builder.people_id@SEP@people.people_id"
    },
    {
        "nl_queries": "Show the number of customers for each gender in a scatter chart",
        "VQL": "Visualize SCATTER SELECT gender , count(*) FROM Customers GROUP BY gender",
        "db_id": "customers_and_invoices",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT gender , count(*) FROM Customers GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT gender , count(*) FROM Customers GROUP BY gender'}",
        "record_name": "925",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the number of customers for each gender in a scatter chart",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "customers",
            "for",
            "each",
            "gender",
            "in",
            "a",
            "scatter",
            "chart"
        ],
        "query": "Visualize SCATTER SELECT gender , count(*) FROM Customers GROUP BY gender",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city, state_county_province, country]",
        "choose_schema_rat_link": "customers.customer_id@SEP@customers.customer_first_name@SEP@customers.customer_middle_initial@SEP@customers.customer_last_name@SEP@orders.customer_id@SEP@accounts.customer_id@SEP@customers.gender"
    },
    {
        "nl_queries": "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\" .",
        "VQL": "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
        "db_id": "musical",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee'}",
        "record_name": "2445",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Tony Award\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Cleavant Derricks\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\" .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "the",
            "musical",
            "nominee",
            "with",
            "award",
            "\"Bob",
            "Fosse\"",
            "or",
            "\"Cleavant",
            "Derricks\"",
            "."
        ],
        "query": "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Nominee",
            ",",
            "COUNT",
            "(",
            "Nominee",
            ")",
            "FROM",
            "musical",
            "WHERE",
            "Award",
            "=",
            "\"Tony",
            "Award\"",
            "OR",
            "Award",
            "=",
            "\"Cleavant",
            "Derricks\"",
            "GROUP",
            "BY",
            "Nominee"
        ],
        "choose_schema": "Table musical, columns = [*,Musical_ID, Name, Year, Award, Category, Nominee, Result]",
        "choose_schema_rat_link": "musical.musical_id@SEP@actor.musical_id@SEP@musical.nominee@SEP@musical.award"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of manager_id over the hire_date bin hire_date by time .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1761",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of manager_id over the hire_date bin hire_date by time .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "A line chart for finding the number of the dates of the tests taken with result \"Pass\" .",
        "VQL": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY",
        "db_id": "e_learning",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"', 'binning': 'BIN date_test_taken BY DAY'}, 'VQL': 'Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY'}",
        "record_name": "1285",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ],
                    "\"Pass\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                31,
                "day"
            ],
            "vis": 2
        },
        "question": "A line chart for finding the number of the dates of the tests taken with result \"Pass\" .",
        "question_toks": [
            "A",
            "line",
            "chart",
            "for",
            "finding",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "of",
            "the",
            "tests",
            "taken",
            "with",
            "result",
            "\"Pass\"",
            "."
        ],
        "query": "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY DAY",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_test_taken",
            ",",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "FROM",
            "Student_Tests_Taken",
            "WHERE",
            "test_result",
            "=",
            "\"Pass\"",
            "BIN",
            "date_test_taken",
            "BY",
            "DAY"
        ],
        "choose_schema": "Table Student_Tests_Taken, columns = [*,registration_id, date_test_taken, test_result]",
        "choose_schema_rat_link": "students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@student_tests_taken.date_test_taken@SEP@student_tests_taken.test_result"
    },
    {
        "nl_queries": "Show the number of accounts opened in each year for all accounts and group by other account details in a group line chart , and sort from high to low by the X-axis .",
        "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR",
        "db_id": "customers_and_invoices",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC', 'binning': 'BIN date_account_opened BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR'}",
        "record_name": "942@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                22,
                "year"
            ],
            "vis": 2
        },
        "question": "Show the number of accounts opened in each year for all accounts and group by other account details in a group line chart , and sort from high to low by the X-axis .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "accounts",
            "opened",
            "in",
            "each",
            "year",
            "for",
            "all",
            "accounts",
            "and",
            "group",
            "by",
            "other",
            "account",
            "details",
            "in",
            "a",
            "group",
            "line",
            "chart",
            ",",
            "and",
            "sort",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details ORDER BY date_account_opened DESC BIN date_account_opened BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_account_opened",
            ",",
            "COUNT",
            "(",
            "date_account_opened",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "other_account_details",
            "ORDER",
            "BY",
            "date_account_opened",
            "DESC",
            "BIN",
            "date_account_opened",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Accounts, columns = [*,account_id, customer_id, date_account_opened, account_name, other_account_details]",
        "choose_schema_rat_link": "accounts.other_account_details@SEP@accounts.account_id@SEP@accounts.account_name@SEP@financial_transactions.account_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a line chart shows the change of manager_id over hire_date",
        "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'\"}",
        "record_name": "1773",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , a line chart shows the change of manager_id over hire_date",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "change",
            "of",
            "manager_id",
            "over",
            "hire_date"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "MANAGER_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "What is the average student GPA for every department ? Return a bar chart , display y axis from high to low order .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) DESC'}",
        "record_name": "532@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            39,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average student GPA for every department ? Return a bar chart , display y axis from high to low order .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "student",
            "GPA",
            "for",
            "every",
            "department",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "avg",
            "(",
            "stu_gpa",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "avg",
            "(",
            "stu_gpa",
            ")",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "student.stu_gpa@SEP@enroll.stu_num@SEP@student.stu_num@SEP@student.stu_lname@SEP@student.stu_fname@SEP@student.stu_init@SEP@student.stu_dob@SEP@student.stu_hrs@SEP@student.stu_class@SEP@student.stu_transfer@SEP@student.stu_phone@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "A bar chart for what are the number of the dates that have an average sea level pressure between 303 and 31 ? , could you sort in desc by the y axis ?",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY YEAR'}",
        "record_name": "340@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            34,
                            false
                        ],
                        null
                    ],
                    30.3,
                    31.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "A bar chart for what are the number of the dates that have an average sea level pressure between 303 and 31 ? , could you sort in desc by the y axis ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "that",
            "have",
            "an",
            "average",
            "sea",
            "level",
            "pressure",
            "between",
            "303",
            "and",
            "31",
            "?",
            ",",
            "could",
            "you",
            "sort",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "?"
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31  ORDER BY COUNT(date) DESC BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "mean_sea_level_pressure_inches",
            "BETWEEN",
            "30",
            ".",
            "3",
            "AND",
            "31",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date",
            ")",
            "DESC",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "Give me the comparison about the sum of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and I want to show by the Y in ascending .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC'}",
        "record_name": "3100@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and I want to show by the Y in ascending .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "School_ID",
            "over",
            "the",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "Y",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "School_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show the relationship between the number of institutions and total enrollment for each type with a scatter plot .",
        "VQL": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type",
        "db_id": "protein_institute",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type'}",
        "record_name": "2634",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the relationship between the number of institutions and total enrollment for each type with a scatter plot .",
        "question_toks": [
            "Show",
            "the",
            "relationship",
            "between",
            "the",
            "number",
            "of",
            "institutions",
            "and",
            "total",
            "enrollment",
            "for",
            "each",
            "type",
            "with",
            "a",
            "scatter",
            "plot",
            "."
        ],
        "query": "Visualize SCATTER SELECT count(*) , sum(enrollment) FROM institution GROUP BY Type",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "sum",
            "(",
            "enrollment",
            ")",
            "FROM",
            "institution",
            "GROUP",
            "BY",
            "Type"
        ],
        "choose_schema": "Table Institution, columns = [*,Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]",
        "choose_schema_rat_link": "institution.institution@SEP@institution.institution_id@SEP@protein.institution_id@SEP@institution.enrollment@SEP@institution.type"
    },
    {
        "nl_queries": "Give me the comparison about All_Games_Percent over the All_Games , I want to rank by the All_Games in desc please .",
        "VQL": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games DESC'}",
        "record_name": "3140@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about All_Games_Percent over the All_Games , I want to rank by the All_Games in desc please .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "All_Games_Percent",
            "over",
            "the",
            "All_Games",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "All_Games",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of All_Home and the average of Team_ID , and group by attribute All_Home , and rank from low to high by the y-axis please .",
        "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC'}",
        "record_name": "3103@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of All_Home and the average of Team_ID , and group by attribute All_Home , and rank from low to high by the y-axis please .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "average",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(Team_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Give me a tendency forwhat are the average prices of wines for different years ?",
        "VQL": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , avg(Price) FROM WINE GROUP BY YEAR', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR'}",
        "record_name": "3240",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Give me a tendency forwhat are the average prices of wines for different years ?",
        "question_toks": [
            "Give",
            "me",
            "a",
            "tendency",
            "forwhat",
            "are",
            "the",
            "average",
            "prices",
            "of",
            "wines",
            "for",
            "different",
            "years",
            "?"
        ],
        "query": "Visualize LINE SELECT Year , avg(Price) FROM WINE GROUP BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "avg",
            "(",
            "Price",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.year"
    },
    {
        "nl_queries": "Bar chart x axis date in location from y axis the number of date in location from",
        "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations', 'binning': 'BIN Date_in_Location_From BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY'}",
        "record_name": "772",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar chart x axis date in location from y axis the number of date in location from",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "date",
            "in",
            "location",
            "from",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "date",
            "in",
            "location",
            "from"
        ],
        "query": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_in_Location_From",
            ",",
            "COUNT",
            "(",
            "Date_in_Location_From",
            ")",
            "FROM",
            "Document_locations",
            "BIN",
            "Date_in_Location_From",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.location_code"
    },
    {
        "nl_queries": "A bar chart shows the distribution of password and gender_mf .",
        "VQL": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1263",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of password and gender_mf .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "password",
            "and",
            "gender_mf",
            "."
        ],
        "query": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "password",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "course_authors_and_tutors.password@SEP@students.password@SEP@course_authors_and_tutors.gender_mf"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , find job_id and the average of employee_id , and group by attribute job_id , and visualize them by a bar chart , and display by the names in ascending please .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1561@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , find job_id and the average of employee_id , and group by attribute job_id , and visualize them by a bar chart , and display by the names in ascending please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "by",
            "the",
            "names",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time , I want to sort by the Y in ascending .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1547@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by time , I want to sort by the Y in ascending .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "Y",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Plot the total number by grouped by how to get there as a bar graph , and display bar in asc order .",
        "VQL": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There ASC",
        "db_id": "cre_Theme_park",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There ASC'}",
        "record_name": "888@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the total number by grouped by how to get there as a bar graph , and display bar in asc order .",
        "question_toks": [
            "Plot",
            "the",
            "total",
            "number",
            "by",
            "grouped",
            "by",
            "how",
            "to",
            "get",
            "there",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "display",
            "bar",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT How_to_Get_There , COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY How_to_Get_There ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "How_to_Get_There",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Tourist_Attractions",
            "GROUP",
            "BY",
            "How_to_Get_There",
            "ORDER",
            "BY",
            "How_to_Get_There",
            "ASC"
        ],
        "choose_schema": "Table Tourist_Attractions, columns = [*,Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]",
        "choose_schema_rat_link": "tourist_attractions.how_to_get_there"
    },
    {
        "nl_queries": "Give me a histogram for how many sections does each course have ? , list by the total number in descending .",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC'}",
        "record_name": "553@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a histogram for how many sections does each course have ? , list by the total number in descending .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "histogram",
            "for",
            "how",
            "many",
            "sections",
            "does",
            "each",
            "course",
            "have",
            "?",
            ",",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "class.crs_code@SEP@course.crs_code@SEP@course.crs_description@SEP@course.crs_credit"
    },
    {
        "nl_queries": "What is the average age for each city and what are those cities . Show bar chart .",
        "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code",
        "db_id": "dorm_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT city_code , avg(age) FROM student GROUP BY city_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code'}",
        "record_name": "1233",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average age for each city and what are those cities . Show bar chart .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "city",
            "and",
            "what",
            "are",
            "those",
            "cities",
            ".",
            "Show",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "city_code",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "city_code"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@student.city_code"
    },
    {
        "nl_queries": "Compare the frequency of product names using a bar chart , and display in desc by the X-axis .",
        "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
        "db_id": "customers_and_products_contacts",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC'}",
        "record_name": "1000@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Compare the frequency of product names using a bar chart , and display in desc by the X-axis .",
        "question_toks": [
            "Compare",
            "the",
            "frequency",
            "of",
            "product",
            "names",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "product_name",
            ",",
            "COUNT",
            "(",
            "product_name",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_name",
            "ORDER",
            "BY",
            "product_name",
            "DESC"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_type_code, product_name, product_price]",
        "choose_schema_rat_link": "products.product_name@SEP@products.product_id@SEP@products.product_type_code@SEP@products.product_price@SEP@order_items.product_id"
    },
    {
        "nl_queries": "What are the number of the dates of transactions with at least 100 share count or amount bigger than 100 ? , could you order date_of_transaction from high to low order please ?",
        "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "db_id": "tracking_share_transactions",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC', 'binning': 'BIN date_of_transaction BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR'}",
        "record_name": "2999@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    100.0,
                    null
                ],
                "or",
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    100.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                11,
                "year"
            ],
            "vis": 2
        },
        "question": "What are the number of the dates of transactions with at least 100 share count or amount bigger than 100 ? , could you order date_of_transaction from high to low order please ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "of",
            "transactions",
            "with",
            "at",
            "least",
            "100",
            "share",
            "count",
            "or",
            "amount",
            "bigger",
            "than",
            "100",
            "?",
            ",",
            "could",
            "you",
            "order",
            "date_of_transaction",
            "from",
            "high",
            "to",
            "low",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_of_transaction",
            ",",
            "COUNT",
            "(",
            "date_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "share_count",
            ">=",
            "100",
            "OR",
            "amount_of_transaction",
            ">=",
            "100",
            "ORDER",
            "BY",
            "date_of_transaction",
            "DESC",
            "BIN",
            "date_of_transaction",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Transactions, columns = [*,transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "choose_schema_rat_link": "transactions.date_of_transaction@SEP@transactions.share_count@SEP@transactions.transaction_id@SEP@transactions.transaction_type_code@SEP@transactions_lots.transaction_id@SEP@transactions.amount_of_transaction"
    },
    {
        "nl_queries": "Show me the total number by studio in a histogram , and sort by the X in descending .",
        "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC",
        "db_id": "film_rank",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC'}",
        "record_name": "1399@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the total number by studio in a histogram , and sort by the X in descending .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "total",
            "number",
            "by",
            "studio",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "X",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Studio",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "Studio",
            "ORDER",
            "BY",
            "Studio",
            "DESC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Title, Studio, Director, Gross_in_dollar]",
        "choose_schema_rat_link": "market.number_cities@SEP@film.studio"
    },
    {
        "nl_queries": "A bar chart shows how many locations , list by the the number of location from high to low .",
        "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC'}",
        "record_name": "3043@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows how many locations , list by the the number of location from high to low .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "how",
            "many",
            "locations",
            ",",
            "list",
            "by",
            "the",
            "the",
            "number",
            "of",
            "location",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "Location",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Location",
            ")",
            "DESC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location"
    },
    {
        "nl_queries": "How many captains are in each rank .",
        "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
        "db_id": "ship_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , count(*) FROM captain GROUP BY rank', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank'}",
        "record_name": "2747",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many captains are in each rank .",
        "question_toks": [
            "How",
            "many",
            "captains",
            "are",
            "in",
            "each",
            "rank",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "rank"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "Show me about the correlation between Team_ID and All_Games_Percent , and group by attribute All_Games in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games'}",
        "record_name": "3174",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between Team_ID and All_Games_Percent , and group by attribute All_Games in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Games",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Games"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Show the proportion of the number of ranks for each rank .",
        "VQL": "Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank",
        "db_id": "activity_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank'}",
        "record_name": "14",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the proportion of the number of ranks for each rank .",
        "question_toks": [
            "Show",
            "the",
            "proportion",
            "of",
            "the",
            "number",
            "of",
            "ranks",
            "for",
            "each",
            "rank",
            "."
        ],
        "query": "Visualize PIE SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Rank",
            ",",
            "COUNT",
            "(",
            "Rank",
            ")",
            "FROM",
            "Faculty",
            "GROUP",
            "BY",
            "Rank"
        ],
        "choose_schema": "Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "faculty.rank"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of department_id over the hire_date bin hire_date by weekday by a bar chart , and display in desc by the y-axis .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1770@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of department_id over the hire_date bin hire_date by weekday by a bar chart , and display in desc by the y-axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "department_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "What is the number of platforms for each location ? Show the comparison with a bar chart , and show from low to high by the X .",
        "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC'}",
        "record_name": "3045@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of platforms for each location ? Show the comparison with a bar chart , and show from low to high by the X .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "platforms",
            "for",
            "each",
            "location",
            "?",
            "Show",
            "the",
            "comparison",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "SUM",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "Location",
            "ASC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road in a bar chart .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3098",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Give me the trend about the sum of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time , and could you display by the X in desc ?",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR'}",
        "record_name": "1352@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me the trend about the sum of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time , and could you display by the X in desc ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "sum",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "time",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Start_from",
            "DESC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , could you list by the bars from low to high ?",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC'}",
        "record_name": "2910@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , could you list by the bars from low to high ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "could",
            "you",
            "list",
            "by",
            "the",
            "bars",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show me salary by last name in a histogram , list y axis in asc order .",
        "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY ASC'}",
        "record_name": "1903@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me salary by last name in a histogram , list y axis in asc order .",
        "question_toks": [
            "Show",
            "me",
            "salary",
            "by",
            "last",
            "name",
            "in",
            "a",
            "histogram",
            ",",
            "list",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "LAST_NAME",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "SALARY",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.last_name@SEP@employees.salary"
    },
    {
        "nl_queries": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
        "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
        "db_id": "music_4",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category'}",
        "record_name": "2438",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    "\"Awarded\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Return the number of the categories of music festivals that have the result \"Awarded\" .",
        "question_toks": [
            "Return",
            "the",
            "number",
            "of",
            "the",
            "categories",
            "of",
            "music",
            "festivals",
            "that",
            "have",
            "the",
            "result",
            "\"Awarded\"",
            "."
        ],
        "query": "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Category",
            ",",
            "COUNT",
            "(",
            "Category",
            ")",
            "FROM",
            "music_festival",
            "WHERE",
            "RESULT",
            "=",
            "\"Awarded\"",
            "GROUP",
            "BY",
            "Category"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.music_festival@SEP@music_festival.category@SEP@music_festival.result"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of salary over the job_id , and group by attribute job_id , rank in desc by the y-axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC\"}",
        "record_name": "1776@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of salary over the job_id , and group by attribute job_id , rank in desc by the y-axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "salary",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "rank",
            "in",
            "desc",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "SALARY",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Show me the total number by category in a histogram , could you order Y in descending order ?",
        "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
        "db_id": "music_4",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC'}",
        "record_name": "2436@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the total number by category in a histogram , could you order Y in descending order ?",
        "question_toks": [
            "Show",
            "me",
            "the",
            "total",
            "number",
            "by",
            "category",
            "in",
            "a",
            "histogram",
            ",",
            "could",
            "you",
            "order",
            "Y",
            "in",
            "descending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "music_festival",
            "GROUP",
            "BY",
            "Category",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table music_festival, columns = [*,ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]",
        "choose_schema_rat_link": "music_festival.category"
    },
    {
        "nl_queries": "Plot how many country by grouped by country as a bar graph , rank from low to high by the bars please .",
        "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
        "db_id": "decoration_competition",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC'}",
        "record_name": "1085@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot how many country by grouped by country as a bar graph , rank from low to high by the bars please .",
        "question_toks": [
            "Plot",
            "how",
            "many",
            "country",
            "by",
            "grouped",
            "by",
            "country",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "member",
            "GROUP",
            "BY",
            "Country",
            "ORDER",
            "BY",
            "Country",
            "ASC"
        ],
        "choose_schema": "Table member, columns = [*,Member_ID, Name, Country, College_ID]",
        "choose_schema_rat_link": "member.country@SEP@round.rank_in_round"
    },
    {
        "nl_queries": "Create a bar chart showing how many team across team , and I want to order in descending by the names .",
        "VQL": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY Team DESC",
        "db_id": "wrestler",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY Team DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY Team DESC'}",
        "record_name": "3283@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing how many team across team , and I want to order in descending by the names .",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "how",
            "many",
            "team",
            "across",
            "team",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "names",
            "."
        ],
        "query": "Visualize BAR SELECT Team , COUNT(Team) FROM elimination GROUP BY Team ORDER BY Team DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "Team",
            ")",
            "FROM",
            "elimination",
            "GROUP",
            "BY",
            "Team",
            "ORDER",
            "BY",
            "Team",
            "DESC"
        ],
        "choose_schema": "Table Elimination, columns = [*,Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "choose_schema_rat_link": "elimination.team@SEP@wrestler.name"
    },
    {
        "nl_queries": "Visualize a pie chart about the proportion of All_Games and All_Games_Percent .",
        "VQL": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Games , All_Games_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match'}",
        "record_name": "3139",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Visualize a pie chart about the proportion of All_Games and All_Games_Percent .",
        "question_toks": [
            "Visualize",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "All_Games",
            "and",
            "All_Games_Percent",
            "."
        ],
        "query": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Games",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "List all headquarters and the number of companies in each headquarter in a pie chart .",
        "VQL": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
        "db_id": "gas_company",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters'}",
        "record_name": "1497",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "List all headquarters and the number of companies in each headquarter in a pie chart .",
        "question_toks": [
            "List",
            "all",
            "headquarters",
            "and",
            "the",
            "number",
            "of",
            "companies",
            "in",
            "each",
            "headquarter",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.headquarters@SEP@company.company@SEP@company.company_id@SEP@station_company.company_id"
    },
    {
        "nl_queries": "Show different locations and the number of performances at each location by a bar chart .",
        "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION",
        "db_id": "performance_attendance",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION'}",
        "record_name": "2529",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different locations and the number of performances at each location by a bar chart .",
        "question_toks": [
            "Show",
            "different",
            "locations",
            "and",
            "the",
            "number",
            "of",
            "performances",
            "at",
            "each",
            "location",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "performance",
            "GROUP",
            "BY",
            "LOCATION"
        ],
        "choose_schema": "Table performance, columns = [*,Performance_ID, Date, Host, Location, Attendance]",
        "choose_schema_rat_link": "performance.location@SEP@performance.performance_id@SEP@member_attendance.performance_id"
    },
    {
        "nl_queries": "Show me a bar chart for what are the nationalities and total ages of journalists ?",
        "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
        "db_id": "news_report",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality'}",
        "record_name": "2487",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart for what are the nationalities and total ages of journalists ?",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "nationalities",
            "and",
            "total",
            "ages",
            "of",
            "journalists",
            "?"
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "Age",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.age@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "Visualize the general trend of maximal price over the year , list X in desc order .",
        "VQL": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC'}",
        "record_name": "3256@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Visualize the general trend of maximal price over the year , list X in desc order .",
        "question_toks": [
            "Visualize",
            "the",
            "general",
            "trend",
            "of",
            "maximal",
            "price",
            "over",
            "the",
            "year",
            ",",
            "list",
            "X",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT Year , max(Price) FROM WINE GROUP BY Year ORDER BY Year DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "max",
            "(",
            "Price",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Year",
            "ORDER",
            "BY",
            "Year",
            "DESC"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.year"
    },
    {
        "nl_queries": "Give me the comparison about the average of Team_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and sort by the bar in descending .",
        "VQL": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3099@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of Team_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart , and sort by the bar in descending .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Team_ID",
            "over",
            "the",
            "ACC_Road",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "bar",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show the county name and population of all counties with a bar chart .",
        "VQL": "Visualize BAR SELECT County_name , Population FROM county",
        "db_id": "election",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT County_name , Population FROM county', 'binning': ''}, 'VQL': 'Visualize BAR SELECT County_name , Population FROM county'}",
        "record_name": "1304",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the county name and population of all counties with a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "county",
            "name",
            "and",
            "population",
            "of",
            "all",
            "counties",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT County_name , Population FROM county",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "County_name",
            ",",
            "Population",
            "FROM",
            "county"
        ],
        "choose_schema": "Table county, columns = [*,County_Id, County_name, Population, Zip_code]",
        "choose_schema_rat_link": "county.county_name@SEP@county.county_id@SEP@election.counties_represented@SEP@county.population"
    },
    {
        "nl_queries": "Bar chart x axis acc road y axis the average of school id",
        "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3101",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis acc road y axis the average of school id",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "acc",
            "road",
            "y",
            "axis",
            "the",
            "average",
            "of",
            "school",
            "id"
        ],
        "query": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "AVG",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_road@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@university.school"
    },
    {
        "nl_queries": "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart , sort by the y axis from high to low .",
        "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC'}",
        "record_name": "3146@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart , sort by the y axis from high to low .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "All_Games_Percent",
            "over",
            "the",
            "All_Neutral",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "by",
            "the",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Show me a line chart for what is the average weight and year for each year ? , I want to rank by the x-axis in asc please .",
        "VQL": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC",
        "db_id": "car_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC'}",
        "record_name": "415@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show me a line chart for what is the average weight and year for each year ? , I want to rank by the x-axis in asc please .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "line",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "average",
            "weight",
            "and",
            "year",
            "for",
            "each",
            "year",
            "?",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "x-axis",
            "in",
            "asc",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Year",
            ",",
            "avg",
            "(",
            "Weight",
            ")",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "Year",
            "ASC"
        ],
        "choose_schema": "Table cars_data, columns = [*,Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year]",
        "choose_schema_rat_link": "cars_data.weight@SEP@cars_data.year"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Start_from and the average of Employee_ID bin start_from by weekday , list y axis in descending order .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC BIN Start_from BY WEEKDAY'}",
        "record_name": "1343@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Start_from and the average of Employee_ID bin start_from by weekday , list y axis in descending order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "average",
            "of",
            "Employee_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "list",
            "y",
            "axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY AVG(Employee_ID) DESC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "DESC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday , and could you list Y in desc order please ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1768@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday , and could you list Y in desc order please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "could",
            "you",
            "list",
            "Y",
            "in",
            "desc",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show me the correlation about what are the ids of the trips that lasted the longest and how long did they last ?",
        "VQL": "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3'}",
        "record_name": "309",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me the correlation about what are the ids of the trips that lasted the longest and how long did they last ?",
        "question_toks": [
            "Show",
            "me",
            "the",
            "correlation",
            "about",
            "what",
            "are",
            "the",
            "ids",
            "of",
            "the",
            "trips",
            "that",
            "lasted",
            "the",
            "longest",
            "and",
            "how",
            "long",
            "did",
            "they",
            "last",
            "?"
        ],
        "query": "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "id",
            ",",
            "duration",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "duration",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table station, columns = [*,id, name, lat, long, dock_count, city, installation_date]@SEP@Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "station.id@SEP@trip.id"
    },
    {
        "nl_queries": "List all headquarters and the number of companies in each headquarter , and order bar in ascending order .",
        "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC'}",
        "record_name": "1498@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all headquarters and the number of companies in each headquarter , and order bar in ascending order .",
        "question_toks": [
            "List",
            "all",
            "headquarters",
            "and",
            "the",
            "number",
            "of",
            "companies",
            "in",
            "each",
            "headquarter",
            ",",
            "and",
            "order",
            "bar",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters",
            "ORDER",
            "BY",
            "Headquarters",
            "ASC"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.headquarters@SEP@company.company@SEP@company.company_id@SEP@station_company.company_id"
    },
    {
        "nl_queries": "I want to see trend of the number of yearid by yearid",
        "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
        "db_id": "baseball_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR'}",
        "record_name": "157",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        12
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                145,
                "year"
            ],
            "vis": 2
        },
        "question": "I want to see trend of the number of yearid by yearid",
        "question_toks": [
            "I",
            "want",
            "to",
            "see",
            "trend",
            "of",
            "the",
            "number",
            "of",
            "yearid",
            "by",
            "yearid"
        ],
        "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "yearid",
            ",",
            "COUNT",
            "(",
            "yearid",
            ")",
            "FROM",
            "hall_of_fame",
            "BIN",
            "yearid",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "choose_schema_rat_link": "hall_of_fame.yearid"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and manufacturer , rank from low to high by the Y .",
        "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Manufacturer ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Manufacturer ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Manufacturer ASC'}",
        "record_name": "2192@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and manufacturer , rank from low to high by the Y .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "manufacturer",
            ",",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Manufacturer ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Manufacturer",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@products.manufacturer"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , find job_id and the average of manager_id , and group by attribute job_id , and visualize them by a bar chart , I want to list in desc by the y axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\"}",
        "record_name": "1565@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , find job_id and the average of manager_id , and group by attribute job_id , and visualize them by a bar chart , I want to list in desc by the y axis .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show the number of accounts opened in each year for all accounts in a line chart .",
        "VQL": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts BIN date_account_opened BY YEAR",
        "db_id": "customers_and_invoices",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts', 'binning': 'BIN date_account_opened BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts BIN date_account_opened BY YEAR'}",
        "record_name": "953",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                22,
                "year"
            ],
            "vis": 2
        },
        "question": "Show the number of accounts opened in each year for all accounts in a line chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "accounts",
            "opened",
            "in",
            "each",
            "year",
            "for",
            "all",
            "accounts",
            "in",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts BIN date_account_opened BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_account_opened",
            ",",
            "COUNT",
            "(",
            "date_account_opened",
            ")",
            "FROM",
            "Accounts",
            "BIN",
            "date_account_opened",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Accounts, columns = [*,account_id, customer_id, date_account_opened, account_name, other_account_details]",
        "choose_schema_rat_link": "accounts.account_id@SEP@accounts.account_name@SEP@financial_transactions.account_id"
    },
    {
        "nl_queries": "Return a histogram on how many invoices were billed from each state ? , and sort x axis from low to high order .",
        "VQL": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
        "db_id": "store_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC'}",
        "record_name": "2856@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            44,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    43,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a histogram on how many invoices were billed from each state ? , and sort x axis from low to high order .",
        "question_toks": [
            "Return",
            "a",
            "histogram",
            "on",
            "how",
            "many",
            "invoices",
            "were",
            "billed",
            "from",
            "each",
            "state",
            "?",
            ",",
            "and",
            "sort",
            "x",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT billing_state , COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY billing_state ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "\"USA\"",
            "GROUP",
            "BY",
            "billing_state",
            "ORDER",
            "BY",
            "billing_state",
            "ASC"
        ],
        "choose_schema": "Table invoices, columns = [*,id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
        "choose_schema_rat_link": "invoices.invoice_date@SEP@invoice_lines.invoice_id@SEP@invoices.billing_city@SEP@employees.state@SEP@customers.state"
    },
    {
        "nl_queries": "Show the party and the number of drivers in each party with a bar chart .",
        "VQL": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party",
        "db_id": "school_bus",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Party , count(*) FROM driver GROUP BY party', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party'}",
        "record_name": "2702",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the party and the number of drivers in each party with a bar chart .",
        "question_toks": [
            "Show",
            "the",
            "party",
            "and",
            "the",
            "number",
            "of",
            "drivers",
            "in",
            "each",
            "party",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Party",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "driver",
            "GROUP",
            "BY",
            "party"
        ],
        "choose_schema": "Table driver, columns = [*,Driver_ID, Name, Party, Home_city, Age]",
        "choose_schema_rat_link": "driver.party@SEP@driver.driver_id@SEP@school_bus.driver_id"
    },
    {
        "nl_queries": "What are dates of birth of all the guests whose gender is \"Male\" , and count them by a line chart , and I want to show by the x-axis from high to low .",
        "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC', 'binning': 'BIN date_of_birth BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR'}",
        "record_name": "80@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Male\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                21,
                "year"
            ],
            "vis": 2
        },
        "question": "What are dates of birth of all the guests whose gender is \"Male\" , and count them by a line chart , and I want to show by the x-axis from high to low .",
        "question_toks": [
            "What",
            "are",
            "dates",
            "of",
            "birth",
            "of",
            "all",
            "the",
            "guests",
            "whose",
            "gender",
            "is",
            "\"Male\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "x-axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_of_birth",
            ",",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "FROM",
            "Guests",
            "WHERE",
            "gender_code",
            "=",
            "\"Male\"",
            "ORDER",
            "BY",
            "date_of_birth",
            "DESC",
            "BIN",
            "date_of_birth",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Guests, columns = [*,guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]",
        "choose_schema_rat_link": "guests.date_of_birth@SEP@guests.guest_id@SEP@guests.guest_first_name@SEP@guests.guest_last_name@SEP@apartment_bookings.guest_id@SEP@guests.gender_code"
    },
    {
        "nl_queries": "Bar graph to show meter_100 from different meter 700 , I want to rank bar from low to high order .",
        "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC'}",
        "record_name": "2925@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show meter_100 from different meter 700 , I want to rank bar from low to high order .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "meter_100",
            "from",
            "different",
            "meter",
            "700",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "bar",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_700",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_700@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600"
    },
    {
        "nl_queries": "Find the name and membership level of the visitors whose membership level is higher than 4 . Plot them as pie chart .",
        "VQL": "Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
        "db_id": "museum_visit",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4'}",
        "record_name": "2416",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4 . Plot them as pie chart .",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ".",
            "Plot",
            "them",
            "as",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Name",
            ",",
            "Level_of_membership",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            ">",
            "4"
        ],
        "choose_schema": "Table museum, columns = [*,Museum_ID, Name, Num_of_Staff, Open_Year]@SEP@Table visitor, columns = [*,ID, Name, Level_of_membership, Age]",
        "choose_schema_rat_link": "museum.name"
    },
    {
        "nl_queries": "Visualize a bar chart , grouping by city attribute , and compute the total number in each group .",
        "VQL": "Visualize BAR SELECT City , COUNT(City) FROM branch GROUP BY City ORDER BY open_year",
        "db_id": "shop_membership",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT City , COUNT(City) FROM branch GROUP BY City ORDER BY open_year', 'binning': ''}, 'VQL': 'Visualize BAR SELECT City , COUNT(City) FROM branch GROUP BY City ORDER BY open_year'}",
        "record_name": "2768",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart , grouping by city attribute , and compute the total number in each group .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            ",",
            "grouping",
            "by",
            "city",
            "attribute",
            ",",
            "and",
            "compute",
            "the",
            "total",
            "number",
            "in",
            "each",
            "group",
            "."
        ],
        "query": "Visualize BAR SELECT City , COUNT(City) FROM branch GROUP BY City ORDER BY open_year",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "City",
            ",",
            "COUNT",
            "(",
            "City",
            ")",
            "FROM",
            "branch",
            "GROUP",
            "BY",
            "City",
            "ORDER",
            "BY",
            "open_year"
        ],
        "choose_schema": "Table branch, columns = [*,Branch_ID, Name, Open_year, Address_road, City, membership_amount]",
        "choose_schema_rat_link": "branch.city@SEP@purchase.total_pounds"
    },
    {
        "nl_queries": "List the dog name and weight of the dogs who have been abandoned in a bar chart , and list bars in asc order .",
        "VQL": "Visualize BAR SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC'}",
        "record_name": "1169@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the dog name and weight of the dogs who have been abandoned in a bar chart , and list bars in asc order .",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "bars",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT name , weight FROM Dogs WHERE abandoned_yn = 1 ORDER BY name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1",
            "ORDER",
            "BY",
            "name",
            "ASC"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.name@SEP@dogs.weight@SEP@dogs.abandoned_yn"
    },
    {
        "nl_queries": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart , order by the x axis in desc .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3089@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find ACC_Road and School_ID , and group by attribute All_Home , and visualize them by a bar chart , order by the x axis in desc .",
        "question_toks": [
            "Find",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Draw a bar chart for what is minimum age for different job title ? , I want to sort by the total number in ascending please .",
        "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC'}",
        "record_name": "2463@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            2,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart for what is minimum age for different job title ? , I want to sort by the total number in ascending please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "minimum",
            "age",
            "for",
            "different",
            "job",
            "title",
            "?",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "min",
            "(",
            "age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "Return a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute ACC_Road .",
        "VQL": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3079",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Return a scatter chart about the correlation between ACC_Percent and All_Games_Percent , and group by attribute ACC_Road .",
        "question_toks": [
            "Return",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "ACC_Percent",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "."
        ],
        "query": "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "ACC_Percent",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , rank by the total number from high to low .",
        "VQL": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
        "db_id": "singer",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC'}",
        "record_name": "2774@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different citizenship of singers and the number of singers of each citizenship Plot them as bar chart , rank by the total number from high to low .",
        "question_toks": [
            "Show",
            "different",
            "citizenship",
            "of",
            "singers",
            "and",
            "the",
            "number",
            "of",
            "singers",
            "of",
            "each",
            "citizenship",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Citizenship",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
        "choose_schema_rat_link": "singer.citizenship@SEP@singer.singer_id@SEP@song.singer_id"
    },
    {
        "nl_queries": "Please draw a histogram to show the total number of participants in each type code , and I want to show by the y-axis from low to high please .",
        "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
        "db_id": "local_govt_in_alabama",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC'}",
        "record_name": "2127@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please draw a histogram to show the total number of participants in each type code , and I want to show by the y-axis from low to high please .",
        "question_toks": [
            "Please",
            "draw",
            "a",
            "histogram",
            "to",
            "show",
            "the",
            "total",
            "number",
            "of",
            "participants",
            "in",
            "each",
            "type",
            "code",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "y-axis",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Participant_Type_Code",
            ",",
            "COUNT",
            "(",
            "Participant_Type_Code",
            ")",
            "FROM",
            "Participants",
            "GROUP",
            "BY",
            "Participant_Type_Code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Participant_Type_Code",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Participants, columns = [*,Participant_ID, Participant_Type_Code, Participant_Details]",
        "choose_schema_rat_link": "participants.participant_id@SEP@participants.participant_type_code@SEP@participants.participant_details@SEP@participants_in_events.participant_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID'}",
        "record_name": "1601",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Draw a bar chart of date moved in versus how many date moved in , and order in desc by the Y please .",
        "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
        "db_id": "local_govt_and_lot",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC'}",
        "record_name": "2109@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of date moved in versus how many date moved in , and order in desc by the Y please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "date",
            "moved",
            "in",
            "versus",
            "how",
            "many",
            "date",
            "moved",
            "in",
            ",",
            "and",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "Y",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_moved_in",
            ",",
            "COUNT",
            "(",
            "date_moved_in",
            ")",
            "FROM",
            "customer_events",
            "GROUP",
            "BY",
            "date_moved_in",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_moved_in",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Residents, columns = [*,resident_id, property_id, date_moved_in, date_moved_out, other_details]@SEP@Table Residents_Services, columns = [*,resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details]@SEP@Table Customer_Events, columns = [*,Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id]@SEP@Table Customer_Event_Notes, columns = [*,Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in]",
        "choose_schema_rat_link": "residents.date_moved_in@SEP@residents_services.date_moved_in@SEP@customer_events.date_moved_in@SEP@customer_event_notes.date_moved_in@SEP@residents.date_moved_out@SEP@residents_services.date_requested@SEP@residents_services.date_provided@SEP@timed_status_of_things.date_and_date@SEP@timed_locations_of_things.date_and_time"
    },
    {
        "nl_queries": "Show the average of id from each nationality , I want to display in ascending by the Y .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC'}",
        "record_name": "2907@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the average of id from each nationality , I want to display in ascending by the Y .",
        "question_toks": [
            "Show",
            "the",
            "average",
            "of",
            "id",
            "from",
            "each",
            "nationality",
            ",",
            "I",
            "want",
            "to",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY AVG(ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "Bar chart x axis time y axis id , and I want to order X-axis in descending order .",
        "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time , ID FROM swimmer ORDER BY Time DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC'}",
        "record_name": "2926@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis time y axis id , and I want to order X-axis in descending order .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "time",
            "y",
            "axis",
            "id",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "X-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "Time",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.time@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show the number of delegates in each committee with a bar chart , and could you order y axis in ascending order please ?",
        "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "db_id": "election",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC'}",
        "record_name": "1320@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of delegates in each committee with a bar chart , and could you order y axis in ascending order please ?",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "delegates",
            "in",
            "each",
            "committee",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "order",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Committee",
            ",",
            "COUNT",
            "(",
            "Committee",
            ")",
            "FROM",
            "election",
            "GROUP",
            "BY",
            "Committee",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Committee",
            ")",
            "ASC"
        ],
        "choose_schema": "Table election, columns = [*,Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee]",
        "choose_schema_rat_link": "election.delegate@SEP@election.committee"
    },
    {
        "nl_queries": "List the studios of each film and the number of films produced by that studio Show bar chart , and list the total number in asc order .",
        "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC",
        "db_id": "film_rank",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC'}",
        "record_name": "1399@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the studios of each film and the number of films produced by that studio Show bar chart , and list the total number in asc order .",
        "question_toks": [
            "List",
            "the",
            "studios",
            "of",
            "each",
            "film",
            "and",
            "the",
            "number",
            "of",
            "films",
            "produced",
            "by",
            "that",
            "studio",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Studio",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "Studio",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Title, Studio, Director, Gross_in_dollar]",
        "choose_schema_rat_link": "film.studio@SEP@film.film_id@SEP@film_market_estimation.film_id@SEP@market.number_cities"
    },
    {
        "nl_queries": "Find the ids and names of stations from which at least 200 trips started , and rank from low to high by the X-axis .",
        "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC'}",
        "record_name": "310@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the ids and names of stations from which at least 200 trips started , and rank from low to high by the X-axis .",
        "question_toks": [
            "Find",
            "the",
            "ids",
            "and",
            "names",
            "of",
            "stations",
            "from",
            "which",
            "at",
            "least",
            "200",
            "trips",
            "started",
            ",",
            "and",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT start_station_name , start_station_id FROM trip ORDER BY start_station_name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "start_station_name",
            ",",
            "start_station_id",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "start_station_name",
            "ASC"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "station.id@SEP@trip.id@SEP@station.name@SEP@status.station_id@SEP@trip.start_date@SEP@trip.start_station_name@SEP@trip.start_station_id"
    },
    {
        "nl_queries": "Please use a bar chart to show the minimum price of the rooms in a different decor , sort by the X-axis in desc please .",
        "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "db_id": "inn_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC'}",
        "record_name": "1970@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please use a bar chart to show the minimum price of the rooms in a different decor , sort by the X-axis in desc please .",
        "question_toks": [
            "Please",
            "use",
            "a",
            "bar",
            "chart",
            "to",
            "show",
            "the",
            "minimum",
            "price",
            "of",
            "the",
            "rooms",
            "in",
            "a",
            "different",
            "decor",
            ",",
            "sort",
            "by",
            "the",
            "X-axis",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "min",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "decor",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.decor"
    },
    {
        "nl_queries": "A bar chart shows the distribution of ACC_Road and Team_ID , and group by attribute All_Home , and I want to show by the names in descending .",
        "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3088@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of ACC_Road and Team_ID , and group by attribute All_Home , and I want to show by the names in descending .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "names",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Bar chart x axis dept code y axis minimal stu gpa , and display Y-axis in descending order .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC",
        "db_id": "college_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC'}",
        "record_name": "533@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            2,
                            39,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis dept code y axis minimal stu gpa , and display Y-axis in descending order .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "dept",
            "code",
            "y",
            "axis",
            "minimal",
            "stu",
            "gpa",
            ",",
            "and",
            "display",
            "Y-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE ORDER BY min(stu_gpa) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "min",
            "(",
            "stu_gpa",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "DEPT_CODE",
            "ORDER",
            "BY",
            "min",
            "(",
            "stu_gpa",
            ")",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table EMPLOYEE, columns = [*,EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]@SEP@Table ENROLL, columns = [*,CLASS_CODE, STU_NUM, ENROLL_GRADE]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]"
    },
    {
        "nl_queries": "Give me the comparison about the sum of meter_100 over the meter_200 , and group by attribute meter_200 by a bar chart , sort from high to low by the total number of meter 100 please .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC'}",
        "record_name": "2912@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of meter_100 over the meter_200 , and group by attribute meter_200 by a bar chart , sort from high to low by the total number of meter 100 please .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "meter_100",
            "over",
            "the",
            "meter_200",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "total",
            "number",
            "of",
            "meter",
            "100",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY SUM(meter_100) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "meter_100",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Give me the comparison about Height over the Name by a bar chart , could you order in desc by the bar ?",
        "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Height FROM people ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC'}",
        "record_name": "394@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Height over the Name by a bar chart , could you order in desc by the bar ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Height",
            "over",
            "the",
            "Name",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "bar",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Height",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.height@SEP@people.name"
    },
    {
        "nl_queries": "Give me a scatter chart that groups acc road , the x-axis is team id and the y-axis is acc percent .",
        "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3073",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Give me a scatter chart that groups acc road , the x-axis is team id and the y-axis is acc percent .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "scatter",
            "chart",
            "that",
            "groups",
            "acc",
            "road",
            ",",
            "the",
            "x-axis",
            "is",
            "team",
            "id",
            "and",
            "the",
            "y-axis",
            "is",
            "acc",
            "percent",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_home@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "How many departments are in each school Show bar chart , and could you list by the x-axis from high to low ?",
        "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC'}",
        "record_name": "515@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many departments are in each school Show bar chart , and could you list by the x-axis from high to low ?",
        "question_toks": [
            "How",
            "many",
            "departments",
            "are",
            "in",
            "each",
            "school",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "x-axis",
            "from",
            "high",
            "to",
            "low",
            "?"
        ],
        "query": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "SCHOOL_CODE",
            ",",
            "count",
            "(",
            "DISTINCT",
            "dept_name",
            ")",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "SCHOOL_CODE",
            "DESC"
        ],
        "choose_schema": "Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]",
        "choose_schema_rat_link": "course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code@SEP@department.school_code"
    },
    {
        "nl_queries": "Create a bar chart showing how many hire date across hire date , and I want to list by the y-axis in asc .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1838@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "Create a bar chart showing how many hire date across hire date , and I want to list by the y-axis in asc .",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "how",
            "many",
            "hire",
            "date",
            "across",
            "hire",
            "date",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "y-axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.hire_date"
    },
    {
        "nl_queries": "Give me the comparison about the sum of Weight over the Sex , and group by attribute Sex , and sort by the Y in descending .",
        "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC'}",
        "record_name": "382@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of Weight over the Sex , and group by attribute Sex , and sort by the Y in descending .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "Weight",
            "over",
            "the",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "Y",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY SUM(Weight) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Weight",
            ")",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Time and meter_100 , I want to display in asc by the X please .",
        "VQL": "Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC'}",
        "record_name": "2927@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Time and meter_100 , I want to display in asc by the X please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Time",
            "and",
            "meter_100",
            ",",
            "I",
            "want",
            "to",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Time , meter_100 FROM swimmer ORDER BY Time ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "Time",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.time@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "What is the relationship between CID and DNO ?",
        "VQL": "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
        "db_id": "college_3",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT CID , DNO FROM COURSE ORDER BY Credits', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits'}",
        "record_name": "670",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between CID and DNO ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "CID",
            "and",
            "DNO",
            "?"
        ],
        "query": "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "CID",
            ",",
            "DNO",
            "FROM",
            "COURSE",
            "ORDER",
            "BY",
            "Credits"
        ],
        "choose_schema": "Table Department, columns = [*,DNO, Division, DName, Room, Building, DPhone]@SEP@Table Member_of, columns = [*,FacID, DNO, Appt_Type]@SEP@Table Course, columns = [*,CID, CName, Credits, Instructor, Days, Hours, DNO]@SEP@Table Minor_in, columns = [*,StuID, DNO]@SEP@Table Enrolled_in, columns = [*,StuID, CID, Grade]",
        "choose_schema_rat_link": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]@SEP@Table Department, columns = [*,DNO, Division, DName, Room, Building, DPhone]@SEP@Table Member_of, columns = [*,FacID, DNO, Appt_Type]@SEP@Table Course, columns = [*,CID, CName, Credits, Instructor, Days, Hours, DNO]@SEP@Table Minor_in, columns = [*,StuID, DNO]@SEP@Table Enrolled_in, columns = [*,StuID, CID, Grade]@SEP@Table Gradeconversion, columns = [*,lettergrade, gradepoint]"
    },
    {
        "nl_queries": "Bar chart x axis year y axis the number of year",
        "VQL": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
        "db_id": "baseball_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT year , COUNT(year) FROM home_game', 'binning': 'BIN year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY'}",
        "record_name": "165",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        13
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                153,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                153,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                2,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar chart x axis year y axis the number of year",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "year",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "year"
        ],
        "query": "Visualize BAR SELECT year , COUNT(year) FROM home_game BIN year BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "year",
            ",",
            "COUNT",
            "(",
            "year",
            ")",
            "FROM",
            "home_game",
            "BIN",
            "year",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "choose_schema_rat_link": "all_star.year@SEP@appearances.year@SEP@manager_award.year@SEP@player_award.year@SEP@manager_award_vote.year@SEP@player_award_vote.year@SEP@batting.year@SEP@batting_postseason.year@SEP@player_college.year@SEP@fielding.year@SEP@fielding_outfield.year@SEP@fielding_postseason.year@SEP@home_game.year@SEP@manager.year@SEP@manager_half.year@SEP@pitching.year@SEP@pitching_postseason.year@SEP@salary.year@SEP@postseason.year@SEP@team.year@SEP@team_half.year"
    },
    {
        "nl_queries": "For the attribute ACC_Road and the sum of Team_ID , show their proportion by a pie chart .",
        "VQL": "Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road', 'binning': ''}, 'VQL': 'Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road'}",
        "record_name": "3131",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "For the attribute ACC_Road and the sum of Team_ID , show their proportion by a pie chart .",
        "question_toks": [
            "For",
            "the",
            "attribute",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            ",",
            "show",
            "their",
            "proportion",
            "by",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Compute the total the total number across party as a pie chart .",
        "VQL": "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
        "db_id": "election_representative",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Party , COUNT(*) FROM representative GROUP BY Party', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party'}",
        "record_name": "1323",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Compute the total the total number across party as a pie chart .",
        "question_toks": [
            "Compute",
            "the",
            "total",
            "the",
            "total",
            "number",
            "across",
            "party",
            "as",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Party",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "representative",
            "GROUP",
            "BY",
            "Party"
        ],
        "choose_schema": "Table representative, columns = [*,Representative_ID, Name, State, Party, Lifespan]",
        "choose_schema_rat_link": "representative.party"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart , display in descending by the X-axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1777@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart , display in descending by the X-axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "in",
            "descending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "A bar chart shows the distribution of All_Neutral and School_ID , list in descending by the y axis .",
        "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC'}",
        "record_name": "3119@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of All_Neutral and School_ID , list in descending by the y axis .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "All_Neutral",
            "and",
            "School_ID",
            ",",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "School_ID",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Please compare the number of the church by open date (bin into the weekday) using a bar chart , and order total number from high to low order .",
        "VQL": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC BIN Open_Date BY WEEKDAY",
        "db_id": "wedding",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC', 'binning': 'BIN Open_Date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC BIN Open_Date BY WEEKDAY'}",
        "record_name": "3217@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                9,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Please compare the number of the church by open date (bin into the weekday) using a bar chart , and order total number from high to low order .",
        "question_toks": [
            "Please",
            "compare",
            "the",
            "number",
            "of",
            "the",
            "church",
            "by",
            "open",
            "date",
            "(bin",
            "into",
            "the",
            "weekday)",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Open_Date , COUNT(Open_Date) FROM church  ORDER BY COUNT(Open_Date) DESC BIN Open_Date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Open_Date",
            ",",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "FROM",
            "church",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "DESC",
            "BIN",
            "Open_Date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table church, columns = [*,Church_ID, Name, Organized_by, Open_Date, Continuation_of]",
        "choose_schema_rat_link": "church.open_date@SEP@church.church_id@SEP@wedding.church_id"
    },
    {
        "nl_queries": "Bar chart x axis minister y axis how many minister",
        "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
        "db_id": "party_people",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister'}",
        "record_name": "2527",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis minister y axis how many minister",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "minister",
            "y",
            "axis",
            "how",
            "many",
            "minister"
        ],
        "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Minister",
            ",",
            "COUNT",
            "(",
            "Minister",
            ")",
            "FROM",
            "party",
            "GROUP",
            "BY",
            "Minister"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.minister"
    },
    {
        "nl_queries": "Show me about the distribution of meter_500 and meter_100 in a bar chart , rank by the bar from low to high .",
        "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC'}",
        "record_name": "2921@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_500 and meter_100 in a bar chart , rank by the bar from low to high .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_500",
            "and",
            "meter_100",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "bar",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_500",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_500",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1347",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "Show the average of id from each nationality",
        "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality'}",
        "record_name": "2907",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the average of id from each nationality",
        "question_toks": [
            "Show",
            "the",
            "average",
            "of",
            "id",
            "from",
            "each",
            "nationality"
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "I want a bar chart to show the total cloud cover of the dates that have the 5 highest cloud cover rates each day .",
        "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , SUM(cloud_cover) FROM weather', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY'}",
        "record_name": "347",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "I want a bar chart to show the total cloud cover of the dates that have the 5 highest cloud cover rates each day .",
        "question_toks": [
            "I",
            "want",
            "a",
            "bar",
            "chart",
            "to",
            "show",
            "the",
            "total",
            "cloud",
            "cover",
            "of",
            "the",
            "dates",
            "that",
            "have",
            "the",
            "5",
            "highest",
            "cloud",
            "cover",
            "rates",
            "each",
            "day",
            "."
        ],
        "query": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "SUM",
            "(",
            "cloud_cover",
            ")",
            "FROM",
            "weather",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.cloud_cover@SEP@weather.date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time , and could you list by the y axis from low to high ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1756@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time , and could you list by the y axis from low to high ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "employee_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Start_from and the sum of Employee_ID bin start_from by weekday , and order Y-axis in ascending order .",
        "VQL": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC BIN Start_from BY WEEKDAY'}",
        "record_name": "1342@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Start_from and the sum of Employee_ID bin start_from by weekday , and order Y-axis in ascending order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "and",
            "order",
            "Y-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY SUM(Employee_ID) ASC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "List all the participant ids and their details using a bar chart , and I want to order in asc by the bar .",
        "VQL": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details ASC",
        "db_id": "local_govt_in_alabama",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details ASC'}",
        "record_name": "2130@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all the participant ids and their details using a bar chart , and I want to order in asc by the bar .",
        "question_toks": [
            "List",
            "all",
            "the",
            "participant",
            "ids",
            "and",
            "their",
            "details",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Participant_Details",
            ",",
            "Participant_ID",
            "FROM",
            "Participants",
            "ORDER",
            "BY",
            "Participant_Details",
            "ASC"
        ],
        "choose_schema": "Table Participants, columns = [*,Participant_ID, Participant_Type_Code, Participant_Details]@SEP@Table Participants_in_Events, columns = [*,Event_ID, Participant_ID]",
        "choose_schema_rat_link": "participants.participant_id@SEP@participants_in_events.participant_id@SEP@participants.participant_type_code@SEP@participants.participant_details"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_700 and ID .",
        "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , ID FROM swimmer', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , ID FROM swimmer'}",
        "record_name": "2924",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_700 and ID .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_700",
            "and",
            "ID",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , ID FROM swimmer",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "ID",
            "FROM",
            "swimmer"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "What is the average of number_of_platforms for each location ? Show the comparison with a bar chart , could you list x-axis in ascending order ?",
        "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC'}",
        "record_name": "3046@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average of number_of_platforms for each location ? Show the comparison with a bar chart , could you list x-axis in ascending order ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "of",
            "number_of_platforms",
            "for",
            "each",
            "location",
            "?",
            "Show",
            "the",
            "comparison",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "list",
            "x-axis",
            "in",
            "ascending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "Location",
            "ASC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location"
    },
    {
        "nl_queries": "Show me mean age by sex in a histogram",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex",
        "db_id": "allergy_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM Student GROUP BY sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex'}",
        "record_name": "58",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me mean age by sex in a histogram",
        "question_toks": [
            "Show",
            "me",
            "mean",
            "age",
            "by",
            "sex",
            "in",
            "a",
            "histogram"
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "sex"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@student.sex"
    },
    {
        "nl_queries": "Find All_Home and the average of Team_ID , and group by attribute All_Home , and visualize them by a bar chart , I want to display from high to low by the x axis .",
        "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC'}",
        "record_name": "3103@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Home and the average of Team_ID , and group by attribute All_Home , and visualize them by a bar chart , I want to display from high to low by the x axis .",
        "question_toks": [
            "Find",
            "All_Home",
            "and",
            "the",
            "average",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "display",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart , order by the Y-axis from low to high please .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC\"}",
        "record_name": "1777@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart , order by the Y-axis from low to high please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "What is the average age for each gender of student ? Return a bar chart , and display from low to high by the the average of age .",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC'}",
        "record_name": "1237@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average age for each gender of student ? Return a bar chart , and display from low to high by the the average of age .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "gender",
            "of",
            "student",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "the",
            "average",
            "of",
            "age",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@dorm.gender@SEP@student.stuid@SEP@dorm.student_capacity@SEP@lives_in.stuid"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , and list from high to low by the Y .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC\"}",
        "record_name": "1776@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , and list from high to low by the Y .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "SALARY",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "How many dogs departed in each day ? Visualize with a line chart that groups by departed date , display in asc by the X-axis .",
        "VQL": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC'}",
        "record_name": "1186@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    30,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            30,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "How many dogs departed in each day ? Visualize with a line chart that groups by departed date , display in asc by the X-axis .",
        "question_toks": [
            "How",
            "many",
            "dogs",
            "departed",
            "in",
            "each",
            "day",
            "?",
            "Visualize",
            "with",
            "a",
            "line",
            "chart",
            "that",
            "groups",
            "by",
            "departed",
            "date",
            ",",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs GROUP BY date_arrived ORDER BY date_arrived ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_arrived",
            ",",
            "COUNT",
            "(",
            "date_arrived",
            ")",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "date_arrived",
            "ORDER",
            "BY",
            "date_arrived",
            "ASC"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@dogs.date_departed@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "Draw a bar chart for what is the average age for each gender ?",
        "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender'}",
        "record_name": "2473",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart for what is the average age for each gender ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "gender",
            "?"
        ],
        "query": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.gender"
    },
    {
        "nl_queries": "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart , and display in desc by the the number of is full time .",
        "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC'}",
        "record_name": "1335@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart , and display in desc by the the number of is full time .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "amount",
            "of",
            "Is_full_time",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "the",
            "number",
            "of",
            "is",
            "full",
            "time",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "COUNT",
            "(",
            "Is_full_time",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Is_full_time",
            ")",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.is_full_time@SEP@shop.number_products"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\"}",
        "record_name": "1778",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of employee_id over hire_date .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40'}",
        "record_name": "1598",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of employee_id over hire_date .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "trend",
            "of",
            "employee_id",
            "over",
            "hire_date",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Find the last name of female (sex is F) students in the descending order of age , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "db_id": "college_3",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC'}",
        "record_name": "659",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the last name of female (sex is F) students in the descending order of age , and count them by a bar chart",
        "question_toks": [
            "Find",
            "the",
            "last",
            "name",
            "of",
            "female",
            "(sex",
            "is",
            "F)",
            "students",
            "in",
            "the",
            "descending",
            "order",
            "of",
            "age",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "LName",
            ",",
            "COUNT",
            "(",
            "LName",
            ")",
            "FROM",
            "STUDENT",
            "WHERE",
            "Sex",
            "=",
            "\"F\"",
            "GROUP",
            "BY",
            "LName",
            "ORDER",
            "BY",
            "Age",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]@SEP@Table Faculty, columns = [*,FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "choose_schema_rat_link": "student.lname@SEP@faculty.lname@SEP@student.sex@SEP@faculty.sex@SEP@student.stuid@SEP@minor_in.stuid@SEP@enrolled_in.stuid@SEP@student.age"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a scatter chart about the correlation between employee_id and commission_pct .",
        "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40'}",
        "record_name": "1619",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a scatter chart about the correlation between employee_id and commission_pct .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "employee_id",
            "and",
            "commission_pct",
            "."
        ],
        "query": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "EMPLOYEE_ID",
            ",",
            "COMMISSION_PCT",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Show me the average of baseprice by bedtype in a histogram , and sort by the bars from high to low .",
        "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC'}",
        "record_name": "1977@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the average of baseprice by bedtype in a histogram , and sort by the bars from high to low .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "average",
            "of",
            "baseprice",
            "by",
            "bedtype",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "bars",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "avg",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType",
            "ORDER",
            "BY",
            "bedType",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]@SEP@Table Reservations, columns = [*,Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids]"
    },
    {
        "nl_queries": "What are the names and ages of editors ? Show me a bar chart , I want to list in desc by the x axis .",
        "VQL": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name DESC",
        "db_id": "journal_committee",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Age FROM editor ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Age FROM editor ORDER BY Name DESC'}",
        "record_name": "2053@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names and ages of editors ? Show me a bar chart , I want to list in desc by the x axis .",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "ages",
            "of",
            "editors",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "desc",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Age FROM editor ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Age",
            "FROM",
            "editor",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table editor, columns = [*,Editor_ID, Name, Age]",
        "choose_schema_rat_link": "editor.name@SEP@editor.age@SEP@editor.editor_id@SEP@journal_committee.editor_id"
    },
    {
        "nl_queries": "Visualize a line chart about the change of the amount of Start_from over Start_from bin start_from by time , and display in asc by the X .",
        "VQL": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1356@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Visualize a line chart about the change of the amount of Start_from over Start_from bin start_from by time , and display in asc by the X .",
        "question_toks": [
            "Visualize",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "the",
            "amount",
            "of",
            "Start_from",
            "over",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "time",
            ",",
            "and",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "COUNT",
            "(",
            "Start_from",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a line chart about the change of commission_pct over hire_date , and rank from high to low by the x-axis please .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC'}",
        "record_name": "1621@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a line chart about the change of commission_pct over hire_date , and rank from high to low by the x-axis please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "commission_pct",
            "over",
            "hire_date",
            ",",
            "and",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "x-axis",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COMMISSION_PCT",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Group and count details for the events using a bar chart , and show by the the number of event details in ascending please .",
        "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
        "db_id": "local_govt_in_alabama",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC'}",
        "record_name": "2135@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Group and count details for the events using a bar chart , and show by the the number of event details in ascending please .",
        "question_toks": [
            "Group",
            "and",
            "count",
            "details",
            "for",
            "the",
            "events",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "by",
            "the",
            "the",
            "number",
            "of",
            "event",
            "details",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Event_Details",
            ",",
            "COUNT",
            "(",
            "Event_Details",
            ")",
            "FROM",
            "EVENTS",
            "GROUP",
            "BY",
            "Event_Details",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Event_Details",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Events, columns = [*,Event_ID, Service_ID, Event_Details]",
        "choose_schema_rat_link": "events.event_details@SEP@events.event_id@SEP@participants_in_events.event_id"
    },
    {
        "nl_queries": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and I want to list by the X in desc please .",
        "VQL": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
        "db_id": "baseball_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC'}",
        "record_name": "171@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        13
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                153,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                161,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    153,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            153,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show the trend about the total average number of attendance at home games change over the years , bin year into year interval , and I want to list by the X in desc please .",
        "question_toks": [
            "Show",
            "the",
            "trend",
            "about",
            "the",
            "total",
            "average",
            "number",
            "of",
            "attendance",
            "at",
            "home",
            "games",
            "change",
            "over",
            "the",
            "years",
            ",",
            "bin",
            "year",
            "into",
            "year",
            "interval",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT year , avg(attendance) FROM home_game GROUP BY YEAR ORDER BY year DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "year",
            ",",
            "avg",
            "(",
            "attendance",
            ")",
            "FROM",
            "home_game",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "year",
            "DESC"
        ],
        "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "choose_schema_rat_link": "home_game.attendance@SEP@team.attendance@SEP@home_game.games@SEP@all_star.game_num@SEP@all_star.game_id@SEP@all_star.year@SEP@appearances.year@SEP@manager_award.year@SEP@player_award.year@SEP@manager_award_vote.year@SEP@player_award_vote.year@SEP@batting.year@SEP@batting_postseason.year@SEP@player_college.year@SEP@fielding.year@SEP@fielding_outfield.year@SEP@fielding_postseason.year@SEP@home_game.year@SEP@manager.year@SEP@manager_half.year@SEP@pitching.year@SEP@pitching_postseason.year@SEP@salary.year@SEP@postseason.year@SEP@team.year@SEP@team_half.year"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of ACC_Road and School_ID , and group by attribute All_Home , I want to list Y in ascending order .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC'}",
        "record_name": "3089@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of ACC_Road and School_ID , and group by attribute All_Home , I want to list Y in ascending order .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "I",
            "want",
            "to",
            "list",
            "Y",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and could you show x axis from high to low order please ?",
        "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "db_id": "ship_mission",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC'}",
        "record_name": "2765@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different types of ships and the average tonnage of ships of each type Show bar chart , and could you show x axis from high to low order please ?",
        "question_toks": [
            "Show",
            "different",
            "types",
            "of",
            "ships",
            "and",
            "the",
            "average",
            "tonnage",
            "of",
            "ships",
            "of",
            "each",
            "type",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "show",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "avg",
            "(",
            "Tonnage",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "Type",
            "DESC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.type@SEP@mission.ship_id@SEP@ship.ship_id@SEP@ship.tonnage"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of meter_700 and ID , and sort by the ID from high to low .",
        "VQL": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC'}",
        "record_name": "2924@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of meter_700 and ID , and sort by the ID from high to low .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_700",
            "and",
            "ID",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "ID",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , ID FROM swimmer ORDER BY ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart , display by the y-axis in ascending .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1585@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of hire_date and the average of salary bin hire_date by time in a bar chart , display by the y-axis in ascending .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "by",
            "the",
            "y-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "A bar chart about what is average age for different job title ?",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job'}",
        "record_name": "2459",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart about what is average age for different job title ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "about",
            "what",
            "is",
            "average",
            "age",
            "for",
            "different",
            "job",
            "title",
            "?"
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , visualize a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id , and display in desc by the Y .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC\"}",
        "record_name": "1781@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , visualize a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id , and display in desc by the Y .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Show the number of movies for each year in a bar chart and ordered by budget .",
        "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM movie  ORDER BY budget_million BIN Year BY YEAR",
        "db_id": "culture_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Year , COUNT(Year) FROM movie  ORDER BY budget_million', 'binning': 'BIN Year BY YEAR'}, 'VQL': 'Visualize BAR SELECT Year , COUNT(Year) FROM movie  ORDER BY budget_million BIN Year BY YEAR'}",
        "record_name": "903",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                2,
                "year"
            ],
            "vis": 0
        },
        "question": "Show the number of movies for each year in a bar chart and ordered by budget .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "movies",
            "for",
            "each",
            "year",
            "in",
            "a",
            "bar",
            "chart",
            "and",
            "ordered",
            "by",
            "budget",
            "."
        ],
        "query": "Visualize BAR SELECT Year , COUNT(Year) FROM movie  ORDER BY budget_million BIN Year BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Year",
            ",",
            "COUNT",
            "(",
            "Year",
            ")",
            "FROM",
            "movie",
            "ORDER",
            "BY",
            "budget_million",
            "BIN",
            "Year",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]@SEP@Table movie, columns = [*,movie_id, Title, Year, Director, Budget_million, Gross_worldwide]",
        "choose_schema_rat_link": "movie.movie_id@SEP@culture_company.movie_id@SEP@book_club.year@SEP@movie.year@SEP@movie.budget_million"
    },
    {
        "nl_queries": "Which tests have \"Pass\" results ? Return the dates when the tests were taken , and count them by a bar chart , and sort in desc by the y axis .",
        "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
        "db_id": "e_learning",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC', 'binning': 'BIN date_test_taken BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY'}",
        "record_name": "1286@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ],
                    "\"Pass\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            31,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                31,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Which tests have \"Pass\" results ? Return the dates when the tests were taken , and count them by a bar chart , and sort in desc by the y axis .",
        "question_toks": [
            "Which",
            "tests",
            "have",
            "\"Pass\"",
            "results",
            "?",
            "Return",
            "the",
            "dates",
            "when",
            "the",
            "tests",
            "were",
            "taken",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_test_taken",
            ",",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "FROM",
            "Student_Tests_Taken",
            "WHERE",
            "test_result",
            "=",
            "\"Pass\"",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_test_taken",
            ")",
            "DESC",
            "BIN",
            "date_test_taken",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Student_Tests_Taken, columns = [*,registration_id, date_test_taken, test_result]",
        "choose_schema_rat_link": "student_tests_taken.test_result@SEP@students.date_of_registration@SEP@students.date_of_latest_logon@SEP@student_course_enrolment.date_of_enrolment@SEP@student_course_enrolment.date_of_completion@SEP@student_tests_taken.date_test_taken"
    },
    {
        "nl_queries": "Show all destinations and the number of flights to each destination by a bar chart , display by the X-axis in ascending please .",
        "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
        "db_id": "flight_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC'}",
        "record_name": "1408@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all destinations and the number of flights to each destination by a bar chart , display by the X-axis in ascending please .",
        "question_toks": [
            "Show",
            "all",
            "destinations",
            "and",
            "the",
            "number",
            "of",
            "flights",
            "to",
            "each",
            "destination",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "destination",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "destination",
            "ASC"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.destination@SEP@flight.flno"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , I want to order by the Team_ID in ascending .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC'}",
        "record_name": "3112@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , I want to order by the Team_ID in ascending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Regular_Season",
            "and",
            "Team_ID",
            ",",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "Team_ID",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Bar chart x axis acc road y axis how many acc road , and list x-axis in asc order please .",
        "VQL": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3123@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis acc road y axis how many acc road , and list x-axis in asc order please .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "acc",
            "road",
            "y",
            "axis",
            "how",
            "many",
            "acc",
            "road",
            ",",
            "and",
            "list",
            "x-axis",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "COUNT",
            "(",
            "ACC_Road",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_road@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home"
    },
    {
        "nl_queries": "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\" .",
        "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"', 'binning': 'BIN date_of_birth BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR'}",
        "record_name": "80",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Male\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                21,
                "year"
            ],
            "vis": 2
        },
        "question": "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\" .",
        "question_toks": [
            "A",
            "line",
            "chart",
            "for",
            "returning",
            "the",
            "number",
            "of",
            "the",
            "date",
            "of",
            "birth",
            "for",
            "all",
            "the",
            "guests",
            "with",
            "gender",
            "code",
            "\"Male\"",
            "."
        ],
        "query": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_of_birth",
            ",",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "FROM",
            "Guests",
            "WHERE",
            "gender_code",
            "=",
            "\"Male\"",
            "BIN",
            "date_of_birth",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Guests, columns = [*,guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]",
        "choose_schema_rat_link": "guests.date_of_birth@SEP@guests.gender_code@SEP@guests.guest_id@SEP@guests.guest_first_name@SEP@guests.guest_last_name@SEP@apartment_bookings.guest_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , sort x axis in desc order please .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1561@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id , sort x axis in desc order please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "sort",
            "x",
            "axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Visualize a bar chart for how many sections does each course has ? , I want to order by the bars in asc .",
        "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC'}",
        "record_name": "553@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for how many sections does each course has ? , I want to order by the bars in asc .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "sections",
            "does",
            "each",
            "course",
            "has",
            "?",
            ",",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "bars",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "CRS_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CLASS",
            "GROUP",
            "BY",
            "crs_code",
            "ORDER",
            "BY",
            "CRS_CODE",
            "ASC"
        ],
        "choose_schema": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]",
        "choose_schema_rat_link": "class.crs_code@SEP@course.crs_code@SEP@course.crs_description@SEP@course.crs_credit"
    },
    {
        "nl_queries": "Show the number of each allergie type in a bar chart , list in descending by the how many allergytype .",
        "VQL": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC'}",
        "record_name": "47@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of each allergie type in a bar chart , list in descending by the how many allergytype .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "each",
            "allergie",
            "type",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "how",
            "many",
            "allergytype",
            "."
        ],
        "query": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "AllergyType",
            ",",
            "COUNT",
            "(",
            "AllergyType",
            ")",
            "FROM",
            "Allergy_type",
            "GROUP",
            "BY",
            "AllergyType",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "AllergyType",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Allergy_Type, columns = [*,Allergy, AllergyType]",
        "choose_schema_rat_link": "Table Allergy_Type, columns = [*,Allergy, AllergyType]@SEP@Table Has_Allergy, columns = [*,StuID, Allergy]@SEP@Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]"
    },
    {
        "nl_queries": "Give me the comparison about the average of meter_100 over the meter_200 , and group by attribute meter_200 .",
        "VQL": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200'}",
        "record_name": "2913",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of meter_100 over the meter_200 , and group by attribute meter_200 .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "meter_100",
            "over",
            "the",
            "meter_200",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , AVG(meter_100) FROM swimmer GROUP BY meter_200",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "AVG",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home .",
        "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home'}",
        "record_name": "3104",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "sum",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "List document type codes and the number of documents in each code Visualize by bar chart , sort from low to high by the Y .",
        "VQL": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC'}",
        "record_name": "827@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List document type codes and the number of documents in each code Visualize by bar chart , sort from low to high by the Y .",
        "question_toks": [
            "List",
            "document",
            "type",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "each",
            "code",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Document_Type_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "document_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Ref_Document_Types, columns = [*,Document_Type_Code, Document_Type_Name, Document_Type_Description]@SEP@Table Documents, columns = [*,Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]",
        "choose_schema_rat_link": "documents.document_type_code@SEP@documents.document_id@SEP@documents.document_date@SEP@documents.document_name@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , could you rank in ascending by the X-axis ?",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC'}",
        "record_name": "1601@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , could you rank in ascending by the X-axis ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "rank",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Bar chart of the average of pet age from each pettype , and could you list names in descending order please ?",
        "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY PetType DESC",
        "db_id": "pets_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY PetType DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY PetType DESC'}",
        "record_name": "2545@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of the average of pet age from each pettype , and could you list names in descending order please ?",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "the",
            "average",
            "of",
            "pet",
            "age",
            "from",
            "each",
            "pettype",
            ",",
            "and",
            "could",
            "you",
            "list",
            "names",
            "in",
            "descending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY PetType DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "avg",
            "(",
            "pet_age",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype",
            "ORDER",
            "BY",
            "PetType",
            "DESC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.pet_age@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@student.age"
    },
    {
        "nl_queries": "Show each location and the number of cinemas there Show bar chart , could you order in ascending by the Y-axis ?",
        "VQL": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC'}",
        "record_name": "464@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show each location and the number of cinemas there Show bar chart , could you order in ascending by the Y-axis ?",
        "question_toks": [
            "Show",
            "each",
            "location",
            "and",
            "the",
            "number",
            "of",
            "cinemas",
            "there",
            "Show",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "in",
            "ascending",
            "by",
            "the",
            "Y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "cinema",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "schedule.show_times_per_day@SEP@cinema.location@SEP@film.number_in_season@SEP@cinema.cinema_id@SEP@schedule.cinema_id"
    },
    {
        "nl_queries": "What are the number of the distinct visit dates ?",
        "VQL": "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY YEAR",
        "db_id": "cre_Theme_park",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS', 'binning': 'BIN Visit_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY YEAR'}",
        "record_name": "895",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        12
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                39,
                "year"
            ],
            "vis": 2
        },
        "question": "What are the number of the distinct visit dates ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "distinct",
            "visit",
            "dates",
            "?"
        ],
        "query": "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS BIN Visit_Date BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Visit_Date",
            ",",
            "COUNT",
            "(",
            "Visit_Date",
            ")",
            "FROM",
            "VISITS",
            "BIN",
            "Visit_Date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Visits, columns = [*,Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]",
        "choose_schema_rat_link": "visits.visit_date@SEP@visits.visit_id@SEP@visits.visit_details"
    },
    {
        "nl_queries": "Plot the average of age by grouped by home city as a bar graph , show from high to low by the total number .",
        "VQL": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "db_id": "school_bus",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC'}",
        "record_name": "2698@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the average of age by grouped by home city as a bar graph , show from high to low by the total number .",
        "question_toks": [
            "Plot",
            "the",
            "average",
            "of",
            "age",
            "by",
            "grouped",
            "by",
            "home",
            "city",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "show",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Home_city",
            ",",
            "AVG",
            "(",
            "Age",
            ")",
            "FROM",
            "driver",
            "GROUP",
            "BY",
            "Home_city",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table driver, columns = [*,Driver_ID, Name, Party, Home_city, Age]",
        "choose_schema_rat_link": "driver.home_city@SEP@driver.age"
    },
    {
        "nl_queries": "Show me the correlation between the maximum price and the score of wines for each year .",
        "VQL": "Visualize SCATTER SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)",
        "db_id": "wine_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)'}",
        "record_name": "3257",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    1,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me the correlation between the maximum price and the score of wines for each year .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "correlation",
            "between",
            "the",
            "maximum",
            "price",
            "and",
            "the",
            "score",
            "of",
            "wines",
            "for",
            "each",
            "year",
            "."
        ],
        "query": "Visualize SCATTER SELECT max(Price) , max(Score) FROM WINE GROUP BY max(Price)",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "max",
            "(",
            "Price",
            ")",
            ",",
            "max",
            "(",
            "Score",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "max",
            "(",
            "Price",
            ")"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.score@SEP@wine.year"
    },
    {
        "nl_queries": "A bar chart shows the distribution of Sex and the amount of Sex , and group by attribute Sex , I want to rank X from high to low order .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC'}",
        "record_name": "376@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of Sex and the amount of Sex , and group by attribute Sex , I want to rank X from high to low order .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "amount",
            "of",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "X",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time , display from low to high by the names please .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC'}",
        "record_name": "1345@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time , display from low to high by the names please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "names",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Is_full_time",
            "ASC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@employee.name@SEP@shop.name"
    },
    {
        "nl_queries": "List the number of games in each season and group by away team in a group line chart .",
        "VQL": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season'}",
        "record_name": "1484",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ],
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "List the number of games in each season and group by away team in a group line chart .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "games",
            "in",
            "each",
            "season",
            "and",
            "group",
            "by",
            "away",
            "team",
            "in",
            "a",
            "group",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT Season , COUNT(Season) FROM game GROUP BY Away_team ,  Season",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Season",
            ",",
            "COUNT",
            "(",
            "Season",
            ")",
            "FROM",
            "game",
            "GROUP",
            "BY",
            "Away_team",
            ",",
            "Season"
        ],
        "choose_schema": "Table game, columns = [*,stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@game.away_team@SEP@injury_accident.game_id@SEP@game.season"
    },
    {
        "nl_queries": "Plot how many date from by grouped by date from as a bar graph",
        "VQL": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
        "db_id": "tracking_grants_for_research",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_from , COUNT(date_from) FROM Project_Staff', 'binning': 'BIN date_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY'}",
        "record_name": "2962",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Plot how many date from by grouped by date from as a bar graph",
        "question_toks": [
            "Plot",
            "how",
            "many",
            "date",
            "from",
            "by",
            "grouped",
            "by",
            "date",
            "from",
            "as",
            "a",
            "bar",
            "graph"
        ],
        "query": "Visualize BAR SELECT date_from , COUNT(date_from) FROM Project_Staff BIN date_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_from",
            ",",
            "COUNT",
            "(",
            "date_from",
            ")",
            "FROM",
            "Project_Staff",
            "BIN",
            "date_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
        "choose_schema_rat_link": "project_staff.date_from@SEP@project_staff.date_to"
    },
    {
        "nl_queries": "A bar chart shows the distribution of All_Home and the average of Team_ID , and group by attribute All_Home , and order X from low to high order .",
        "VQL": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC'}",
        "record_name": "3103@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of All_Home and the average of Team_ID , and group by attribute All_Home , and order X from low to high order .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "average",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "order",
            "X",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , AVG(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "AVG",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a scatter chart about the correlation between employee_id and salary .",
        "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': \"SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'\", 'binning': ''}, 'VQL': \"Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'\"}",
        "record_name": "1789",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those employees who was hired before 2002-06-21 , return a scatter chart about the correlation between employee_id and salary .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "employee_id",
            "and",
            "salary",
            "."
        ],
        "query": "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "EMPLOYEE_ID",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "List all payment methods and number of payments using each payment methods by a bar chart , rank by the payment_method_code from low to high .",
        "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC",
        "db_id": "driving_school",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC'}",
        "record_name": "1247@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    31,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            31,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all payment methods and number of payments using each payment methods by a bar chart , rank by the payment_method_code from low to high .",
        "question_toks": [
            "List",
            "all",
            "payment",
            "methods",
            "and",
            "number",
            "of",
            "payments",
            "using",
            "each",
            "payment",
            "methods",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "payment_method_code",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code ORDER BY payment_method_code ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code",
            "ORDER",
            "BY",
            "payment_method_code",
            "ASC"
        ],
        "choose_schema": "Table Customer_Payments, columns = [*,customer_id, datetime_payment, payment_method_code, amount_payment]",
        "choose_schema_rat_link": "customer_payments.payment_method_code"
    },
    {
        "nl_queries": "How many mills of 'Grondzeiler' type are built in each year ? Give me the trend , list in descending by the X-axis .",
        "VQL": "Visualize LINE SELECT built_year , COUNT(built_year) FROM mill WHERE TYPE = 'Grondzeiler'  ORDER BY built_year DESC BIN built_year BY YEAR",
        "db_id": "architecture",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT built_year , COUNT(built_year) FROM mill WHERE TYPE = 'Grondzeiler'  ORDER BY built_year DESC\", 'binning': 'BIN built_year BY YEAR'}, 'VQL': \"Visualize LINE SELECT built_year , COUNT(built_year) FROM mill WHERE TYPE = 'Grondzeiler'  ORDER BY built_year DESC BIN built_year BY YEAR\"}",
        "record_name": "108@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"Grondzeiler\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                16,
                "year"
            ],
            "vis": 2
        },
        "question": "How many mills of 'Grondzeiler' type are built in each year ? Give me the trend , list in descending by the X-axis .",
        "question_toks": [
            "How",
            "many",
            "mills",
            "of",
            "'Grondzeiler'",
            "type",
            "are",
            "built",
            "in",
            "each",
            "year",
            "?",
            "Give",
            "me",
            "the",
            "trend",
            ",",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize LINE SELECT built_year , COUNT(built_year) FROM mill WHERE TYPE = 'Grondzeiler'  ORDER BY built_year DESC BIN built_year BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "built_year",
            ",",
            "COUNT",
            "(",
            "built_year",
            ")",
            "FROM",
            "mill",
            "WHERE",
            "TYPE",
            "=",
            "'Grondzeiler'",
            "ORDER",
            "BY",
            "built_year",
            "DESC",
            "BIN",
            "built_year",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table mill, columns = [*,architect_id, id, location, name, type, built_year, notes]",
        "choose_schema_rat_link": "mill.type@SEP@mill.built_year"
    },
    {
        "nl_queries": "You can give me a bar chart , that groups and counts the country name , sort from low to high by the Y-axis please .",
        "VQL": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC'}",
        "record_name": "1797@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "You can give me a bar chart , that groups and counts the country name , sort from low to high by the Y-axis please .",
        "question_toks": [
            "You",
            "can",
            "give",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "that",
            "groups",
            "and",
            "counts",
            "the",
            "country",
            "name",
            ",",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "Y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "COUNTRY_NAME",
            ",",
            "COUNT",
            "(",
            "COUNTRY_NAME",
            ")",
            "FROM",
            "countries",
            "GROUP",
            "BY",
            "COUNTRY_NAME",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "COUNTRY_NAME",
            ")",
            "ASC"
        ],
        "choose_schema": "Table countries, columns = [*,COUNTRY_ID, COUNTRY_NAME, REGION_ID]",
        "choose_schema_rat_link": "countries.country_name@SEP@countries.country_id@SEP@locations.country_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of meter_500 and ID , rank by the ID in asc .",
        "VQL": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC'}",
        "record_name": "2920@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of meter_500 and ID , rank by the ID in asc .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_500",
            "and",
            "ID",
            ",",
            "rank",
            "by",
            "the",
            "ID",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT meter_500 , ID FROM swimmer ORDER BY ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_500",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Compare the number of winery of the wines whose price is bigger than 100 .",
        "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery'}",
        "record_name": "3236",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ],
                    100.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Compare the number of winery of the wines whose price is bigger than 100 .",
        "question_toks": [
            "Compare",
            "the",
            "number",
            "of",
            "winery",
            "of",
            "the",
            "wines",
            "whose",
            "price",
            "is",
            "bigger",
            "than",
            "100",
            "."
        ],
        "query": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Winery",
            ",",
            "COUNT",
            "(",
            "Winery",
            ")",
            "FROM",
            "WINE",
            "WHERE",
            "Price",
            ">",
            "100",
            "GROUP",
            "BY",
            "Winery"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.winery@SEP@wine.price"
    },
    {
        "nl_queries": "Draw a pie chart about the proportion of All_Road and Team_ID .",
        "VQL": "Visualize PIE SELECT All_Road , Team_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Road , Team_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Road , Team_ID FROM basketball_match'}",
        "record_name": "3129",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart about the proportion of All_Road and Team_ID .",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "All_Road",
            "and",
            "Team_ID",
            "."
        ],
        "query": "Visualize PIE SELECT All_Road , Team_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Road",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Show me a bar chart comparing the total number of captains in each rank , rank in ascending by the Rank .",
        "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC'}",
        "record_name": "2751@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart comparing the total number of captains in each rank , rank in ascending by the Rank .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "comparing",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "in",
            "each",
            "rank",
            ",",
            "rank",
            "in",
            "ascending",
            "by",
            "the",
            "Rank",
            "."
        ],
        "query": "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Rank",
            ",",
            "COUNT",
            "(",
            "Rank",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Rank",
            "ORDER",
            "BY",
            "Rank",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.rank"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Date_of_Birth and Weight , and I want to list y axis in asc order .",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Weight ASC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Weight FROM people ORDER BY Weight ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Weight ASC'}",
        "record_name": "398@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Date_of_Birth and Weight , and I want to list y axis in asc order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Date_of_Birth",
            "and",
            "Weight",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Weight ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Weight",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Weight",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.date@SEP@people.date_of_birth@SEP@people.weight"
    },
    {
        "nl_queries": "Draw a pie chart about the proportion of Is_full_time and the sum of Employee_ID .",
        "VQL": "Visualize PIE SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1355",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Draw a pie chart about the proportion of Is_full_time and the sum of Employee_ID .",
        "question_toks": [
            "Draw",
            "a",
            "pie",
            "chart",
            "about",
            "the",
            "proportion",
            "of",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            "."
        ],
        "query": "Visualize PIE SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "Show all director names who have a movie in the year 1999 or 2000 , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director",
        "db_id": "culture_company",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director'}",
        "record_name": "901",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    1999.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2000.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all director names who have a movie in the year 1999 or 2000 , and count them by a bar chart",
        "question_toks": [
            "Show",
            "all",
            "director",
            "names",
            "who",
            "have",
            "a",
            "movie",
            "in",
            "the",
            "year",
            "1999",
            "or",
            "2000",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT Director , COUNT(Director) FROM movie WHERE YEAR = 1999 OR YEAR = 2000 GROUP BY Director",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Director",
            ",",
            "COUNT",
            "(",
            "Director",
            ")",
            "FROM",
            "movie",
            "WHERE",
            "YEAR",
            "=",
            "1999",
            "OR",
            "YEAR",
            "=",
            "2000",
            "GROUP",
            "BY",
            "Director"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]@SEP@Table movie, columns = [*,movie_id, Title, Year, Director, Budget_million, Gross_worldwide]",
        "choose_schema_rat_link": "movie.director@SEP@movie.movie_id@SEP@culture_company.movie_id@SEP@book_club.year@SEP@movie.year"
    },
    {
        "nl_queries": "What are the job titles , and range of salaries for jobs with maximum salary between 12000 and 18000 Plot them as bar chart , and I want to list by the names from low to high .",
        "VQL": "Visualize BAR SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY JOB_TITLE ASC",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY JOB_TITLE ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY JOB_TITLE ASC'}",
        "record_name": "1702@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            1,
                            [
                                0,
                                13,
                                false
                            ],
                            [
                                0,
                                12,
                                false
                            ]
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    12000.0,
                    18000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the job titles , and range of salaries for jobs with maximum salary between 12000 and 18000 Plot them as bar chart , and I want to list by the names from low to high .",
        "question_toks": [
            "What",
            "are",
            "the",
            "job",
            "titles",
            ",",
            "and",
            "range",
            "of",
            "salaries",
            "for",
            "jobs",
            "with",
            "maximum",
            "salary",
            "between",
            "12000",
            "and",
            "18000",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "list",
            "by",
            "the",
            "names",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_TITLE , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000 ORDER BY JOB_TITLE ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_TITLE",
            ",",
            "max_salary",
            "-",
            "min_salary",
            "FROM",
            "jobs",
            "WHERE",
            "max_salary",
            "BETWEEN",
            "12000",
            "AND",
            "18000",
            "ORDER",
            "BY",
            "JOB_TITLE",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]",
        "choose_schema_rat_link": "jobs.job_title@SEP@jobs.job_id@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "Plot the number of home city by grouped by home city as a bar graph , could you sort by the x axis in asc ?",
        "VQL": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
        "db_id": "school_bus",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC'}",
        "record_name": "2696@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot the number of home city by grouped by home city as a bar graph , could you sort by the x axis in asc ?",
        "question_toks": [
            "Plot",
            "the",
            "number",
            "of",
            "home",
            "city",
            "by",
            "grouped",
            "by",
            "home",
            "city",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "could",
            "you",
            "sort",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "asc",
            "?"
        ],
        "query": "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Home_city",
            ",",
            "COUNT",
            "(",
            "Home_city",
            ")",
            "FROM",
            "driver",
            "GROUP",
            "BY",
            "Home_city",
            "ORDER",
            "BY",
            "Home_city",
            "ASC"
        ],
        "choose_schema": "Table driver, columns = [*,Driver_ID, Name, Party, Home_city, Age]",
        "choose_schema_rat_link": "driver.home_city"
    },
    {
        "nl_queries": "List the number of the research staff details , and order in ascending order .",
        "VQL": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
        "db_id": "tracking_grants_for_research",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC'}",
        "record_name": "2960",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    36,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the number of the research staff details , and order in ascending order .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "the",
            "research",
            "staff",
            "details",
            ",",
            "and",
            "order",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT staff_details , COUNT(staff_details) FROM Research_Staff GROUP BY staff_details ORDER BY staff_details ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "staff_details",
            ",",
            "COUNT",
            "(",
            "staff_details",
            ")",
            "FROM",
            "Research_Staff",
            "GROUP",
            "BY",
            "staff_details",
            "ORDER",
            "BY",
            "staff_details",
            "ASC"
        ],
        "choose_schema": "Table Research_Staff, columns = [*,staff_id, employer_organisation_id, staff_details]",
        "choose_schema_rat_link": "research_staff.staff_details@SEP@project_staff.staff_id@SEP@research_staff.staff_id"
    },
    {
        "nl_queries": "Show different locations and the number of performances at each location by a bar chart , sort x-axis in ascending order .",
        "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC",
        "db_id": "performance_attendance",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC'}",
        "record_name": "2529@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different locations and the number of performances at each location by a bar chart , sort x-axis in ascending order .",
        "question_toks": [
            "Show",
            "different",
            "locations",
            "and",
            "the",
            "number",
            "of",
            "performances",
            "at",
            "each",
            "location",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "x-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY Location ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "performance",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "Location",
            "ASC"
        ],
        "choose_schema": "Table performance, columns = [*,Performance_ID, Date, Host, Location, Attendance]",
        "choose_schema_rat_link": "performance.location@SEP@performance.performance_id@SEP@member_attendance.performance_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of hire_date and the sum of department_id bin hire_date by time , list by the y-axis from low to high please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1762@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , a bar chart shows the distribution of hire_date and the sum of department_id bin hire_date by time , list by the y-axis from low to high please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "a",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "list",
            "by",
            "the",
            "y-axis",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , return a bar chart about the distribution of name and manufacturer , I want to list in ascending by the bars .",
        "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC'}",
        "record_name": "2192@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , return a bar chart about the distribution of name and manufacturer , I want to list in ascending by the bars .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "manufacturer",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "ascending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@products.manufacturer"
    },
    {
        "nl_queries": "Show how many flights for each origin city with a bar chart .",
        "VQL": "Visualize BAR SELECT origin , COUNT(origin) FROM Flight GROUP BY origin ORDER BY origin",
        "db_id": "flight_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT origin , COUNT(origin) FROM Flight GROUP BY origin ORDER BY origin', 'binning': ''}, 'VQL': 'Visualize BAR SELECT origin , COUNT(origin) FROM Flight GROUP BY origin ORDER BY origin'}",
        "record_name": "1401",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show how many flights for each origin city with a bar chart .",
        "question_toks": [
            "Show",
            "how",
            "many",
            "flights",
            "for",
            "each",
            "origin",
            "city",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT origin , COUNT(origin) FROM Flight GROUP BY origin ORDER BY origin",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "origin",
            ",",
            "COUNT",
            "(",
            "origin",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin",
            "ORDER",
            "BY",
            "origin"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.flno@SEP@flight.origin"
    },
    {
        "nl_queries": "Count the number of employees for each city . Visualize by pie chart .",
        "VQL": "Visualize PIE SELECT City , count(*) FROM employee GROUP BY city",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT City , count(*) FROM employee GROUP BY city', 'binning': ''}, 'VQL': 'Visualize PIE SELECT City , count(*) FROM employee GROUP BY city'}",
        "record_name": "1362",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Count the number of employees for each city . Visualize by pie chart .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "employees",
            "for",
            "each",
            "city",
            ".",
            "Visualize",
            "by",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT City , count(*) FROM employee GROUP BY city",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "City",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee",
            "GROUP",
            "BY",
            "city"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]",
        "choose_schema_rat_link": "shop.number_products@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@employee.city"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between People_ID and Height .",
        "VQL": "Visualize SCATTER SELECT People_ID , Height FROM people",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Height FROM people', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Height FROM people'}",
        "record_name": "392",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between People_ID and Height .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "People_ID",
            "and",
            "Height",
            "."
        ],
        "query": "Visualize SCATTER SELECT People_ID , Height FROM people",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Height",
            "FROM",
            "people"
        ],
        "choose_schema": "Table candidate, columns = [*,Candidate_ID, People_ID, Poll_Source, Date, Support_rate, Consider_rate, Oppose_rate, Unsure_rate]@SEP@Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.height"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the amount of hire_date over the hire_date bin hire_date by weekday by a bar chart , I want to show y axis in desc order please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1581@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the amount of hire_date over the hire_date bin hire_date by weekday by a bar chart , I want to show y axis in desc order please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "amount",
            "of",
            "hire_date",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "y",
            "axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show me the average of weight by sex in a histogram , and show by the Y-axis from low to high .",
        "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC'}",
        "record_name": "383@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the average of weight by sex in a histogram , and show by the Y-axis from low to high .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "average",
            "of",
            "weight",
            "by",
            "sex",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "show",
            "by",
            "the",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "AVG",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Weight",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "What are the average ages for male and female students Plot them as bar chart , display by the y-axis in descending .",
        "VQL": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC'}",
        "record_name": "58@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the average ages for male and female students Plot them as bar chart , display by the y-axis in descending .",
        "question_toks": [
            "What",
            "are",
            "the",
            "average",
            "ages",
            "for",
            "male",
            "and",
            "female",
            "students",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "display",
            "by",
            "the",
            "y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "sex",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age"
    },
    {
        "nl_queries": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from low to high by the bars .",
        "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
        "db_id": "game_injury",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC\"}",
        "record_name": "1481@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Knee problem\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many injured players not suffering from injury of 'Knee problem' in each match ? Show me a bar chart grouping by number of matches , I want to display from low to high by the bars .",
        "question_toks": [
            "How",
            "many",
            "injured",
            "players",
            "not",
            "suffering",
            "from",
            "injury",
            "of",
            "'Knee",
            "problem'",
            "in",
            "each",
            "match",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "grouping",
            "by",
            "number",
            "of",
            "matches",
            ",",
            "I",
            "want",
            "to",
            "display",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Number_of_matches",
            ",",
            "COUNT",
            "(",
            "Number_of_matches",
            ")",
            "FROM",
            "injury_accident",
            "WHERE",
            "injury",
            "!",
            "=",
            "'Knee",
            "problem'",
            "GROUP",
            "BY",
            "Number_of_matches",
            "ORDER",
            "BY",
            "Number_of_matches",
            "ASC"
        ],
        "choose_schema": "Table injury_accident, columns = [*,game_id, id, Player, Injury, Number_of_matches, Source]",
        "choose_schema_rat_link": "injury_accident.number_of_matches@SEP@injury_accident.player@SEP@injury_accident.injury"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home , and could you show by the All_Home in descending please ?",
        "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC'}",
        "record_name": "3104@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home , and could you show by the All_Home in descending please ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "sum",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "and",
            "could",
            "you",
            "show",
            "by",
            "the",
            "All_Home",
            "in",
            "descending",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Count the names of all the products in the store and return me a bar chart , could you order Name in asc order ?",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC'}",
        "record_name": "2177@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the names of all the products in the store and return me a bar chart , could you order Name in asc order ?",
        "question_toks": [
            "Count",
            "the",
            "names",
            "of",
            "all",
            "the",
            "products",
            "in",
            "the",
            "store",
            "and",
            "return",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "Name",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "What are the names of the technicians by ascending order of age , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM technician GROUP BY Name ORDER BY Age ASC",
        "db_id": "machine_repair",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM technician GROUP BY Name ORDER BY Age ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM technician GROUP BY Name ORDER BY Age ASC'}",
        "record_name": "2160",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names of the technicians by ascending order of age , and count them by a bar chart",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "the",
            "technicians",
            "by",
            "ascending",
            "order",
            "of",
            "age",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM technician GROUP BY Name ORDER BY Age ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "technician",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Age",
            "ASC"
        ],
        "choose_schema": "Table repair, columns = [*,repair_ID, name, Launch_Date, Notes]@SEP@Table technician, columns = [*,technician_id, Name, Team, Starting_Year, Age]",
        "choose_schema_rat_link": "repair.name@SEP@technician.name@SEP@technician.technician_id@SEP@repair_assignment.technician_id@SEP@technician.age"
    },
    {
        "nl_queries": "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart , and could you order in desc by the names please ?",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC'}",
        "record_name": "3137@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart , and could you order in desc by the names please ?",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "All_Games_Percent",
            "over",
            "the",
            "ACC_Regular_Season",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "names",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "ACC_Regular_Season",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Give me the comparison about gender_mf over the personal_name by a bar chart .",
        "VQL": "Visualize BAR SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1266",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about gender_mf over the personal_name by a bar chart .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "gender_mf",
            "over",
            "the",
            "personal_name",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT personal_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "personal_name",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "course_authors_and_tutors.gender_mf@SEP@course_authors_and_tutors.personal_name@SEP@students.personal_name"
    },
    {
        "nl_queries": "What are dates of birth of all the guests whose gender is \"Male\" , and count them by a bar chart , and list by the y axis in descending .",
        "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
        "db_id": "apartment_rentals",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC', 'binning': 'BIN date_of_birth BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY'}",
        "record_name": "79@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Male\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                21,
                "weekday"
            ],
            "vis": 0
        },
        "question": "What are dates of birth of all the guests whose gender is \"Male\" , and count them by a bar chart , and list by the y axis in descending .",
        "question_toks": [
            "What",
            "are",
            "dates",
            "of",
            "birth",
            "of",
            "all",
            "the",
            "guests",
            "whose",
            "gender",
            "is",
            "\"Male\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_of_birth",
            ",",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "FROM",
            "Guests",
            "WHERE",
            "gender_code",
            "=",
            "\"Male\"",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "DESC",
            "BIN",
            "date_of_birth",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Guests, columns = [*,guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]",
        "choose_schema_rat_link": "guests.date_of_birth@SEP@guests.guest_id@SEP@guests.guest_first_name@SEP@guests.guest_last_name@SEP@apartment_bookings.guest_id@SEP@guests.gender_code"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a line chart about the change of salary over hire_date .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40'}",
        "record_name": "1616",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a line chart about the change of salary over hire_date .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "return",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "salary",
            "over",
            "hire_date",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Show budget type codes and the number of documents in each budget type . Show bar chart .",
        "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code'}",
        "record_name": "803",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show budget type codes and the number of documents in each budget type . Show bar chart .",
        "question_toks": [
            "Show",
            "budget",
            "type",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "each",
            "budget",
            "type",
            ".",
            "Show",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Budget_Type_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents_with_expenses",
            "GROUP",
            "BY",
            "budget_type_code"
        ],
        "choose_schema": "Table Ref_Budget_Codes, columns = [*,Budget_Type_Code, Budget_Type_Description]@SEP@Table Documents_with_Expenses, columns = [*,Document_ID, Budget_Type_Code, Document_Details]",
        "choose_schema_rat_link": "documents_with_expenses.budget_type_code@SEP@documents.document_id@SEP@documents.document_type_code@SEP@documents.document_date@SEP@documents.document_name@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "Give me a bar chart for sum weight of each sex , could you list X-axis from low to high order ?",
        "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC'}",
        "record_name": "382@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for sum weight of each sex , could you list X-axis from low to high order ?",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "sum",
            "weight",
            "of",
            "each",
            "sex",
            ",",
            "could",
            "you",
            "list",
            "X-axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "Show the id of each employee and the number of document destruction authorised by that employee . Show scatter chart .",
        "VQL": "Visualize SCATTER SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID'}",
        "record_name": "767",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    29,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the id of each employee and the number of document destruction authorised by that employee . Show scatter chart .",
        "question_toks": [
            "Show",
            "the",
            "id",
            "of",
            "each",
            "employee",
            "and",
            "the",
            "number",
            "of",
            "document",
            "destruction",
            "authorised",
            "by",
            "that",
            "employee",
            ".",
            "Show",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Destruction_Authorised_by_Employee_ID , count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Destruction_Authorised_by_Employee_ID",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents_to_be_destroyed",
            "GROUP",
            "BY",
            "Destruction_Authorised_by_Employee_ID"
        ],
        "choose_schema": "Table Documents_to_be_Destroyed, columns = [*,Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details]",
        "choose_schema_rat_link": "documents_to_be_destroyed.destruction_authorised_by_employee_id@SEP@employees.employee_id@SEP@employees.employee_name@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id"
    },
    {
        "nl_queries": "Please use a bar chart to show the minimum price of the rooms in a different decor .",
        "VQL": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor",
        "db_id": "inn_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , min(basePrice) FROM Rooms GROUP BY decor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor'}",
        "record_name": "1970",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please use a bar chart to show the minimum price of the rooms in a different decor .",
        "question_toks": [
            "Please",
            "use",
            "a",
            "bar",
            "chart",
            "to",
            "show",
            "the",
            "minimum",
            "price",
            "of",
            "the",
            "rooms",
            "in",
            "a",
            "different",
            "decor",
            "."
        ],
        "query": "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "min",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "decor"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.decor"
    },
    {
        "nl_queries": "Bar chart x axis document name y axis the number of document name , and could you show in desc by the Y-axis please ?",
        "VQL": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC'}",
        "record_name": "809@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis document name y axis the number of document name , and could you show in desc by the Y-axis please ?",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "document",
            "name",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "document",
            "name",
            ",",
            "and",
            "could",
            "you",
            "show",
            "in",
            "desc",
            "by",
            "the",
            "Y-axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Document_Name",
            ",",
            "COUNT",
            "(",
            "Document_Name",
            ")",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "Document_Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Document_Name",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Documents, columns = [*,Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]",
        "choose_schema_rat_link": "documents.document_name@SEP@documents.document_id@SEP@documents.document_type_code@SEP@documents.document_date@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "Show weight from each date of birth , list X in desc order .",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC'}",
        "record_name": "398@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show weight from each date of birth , list X in desc order .",
        "question_toks": [
            "Show",
            "weight",
            "from",
            "each",
            "date",
            "of",
            "birth",
            ",",
            "list",
            "X",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Weight FROM people ORDER BY Date_of_Birth DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Weight",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Date_of_Birth",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.date_of_birth@SEP@people.weight@SEP@candidate.date"
    },
    {
        "nl_queries": "Show me about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 in a bar chart .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200'}",
        "record_name": "2912",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "meter_100",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Bar graph to show the number of investor from different investor , show by the total number in ascending .",
        "VQL": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
        "db_id": "entrepreneur",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC'}",
        "record_name": "1373@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show the number of investor from different investor , show by the total number in ascending .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "the",
            "number",
            "of",
            "investor",
            "from",
            "different",
            "investor",
            ",",
            "show",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Investor",
            ",",
            "COUNT",
            "(",
            "Investor",
            ")",
            "FROM",
            "entrepreneur",
            "GROUP",
            "BY",
            "Investor",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Investor",
            ")",
            "ASC"
        ],
        "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
        "choose_schema_rat_link": "entrepreneur.investor"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_200 and the average of ID , and group by attribute meter_200 , and list Y in desc order .",
        "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) DESC'}",
        "record_name": "2911@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_200 and the average of ID , and group by attribute meter_200 , and list Y in desc order .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "average",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "and",
            "list",
            "Y",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200 ORDER BY AVG(ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Show the race class and number of races in each class .",
        "VQL": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
        "db_id": "race_track",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , count(*) FROM race GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS'}",
        "record_name": "2648",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the race class and number of races in each class .",
        "question_toks": [
            "Show",
            "the",
            "race",
            "class",
            "and",
            "number",
            "of",
            "races",
            "in",
            "each",
            "class",
            "."
        ],
        "query": "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "race",
            "GROUP",
            "BY",
            "CLASS"
        ],
        "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]",
        "choose_schema_rat_link": "race.race_id@SEP@race.class"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , list in asc by the X .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1564@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , list in asc by the X .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "list",
            "in",
            "asc",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Bar chart x axis sex y axis how many sex , sort by the x axis in asc .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC'}",
        "record_name": "376@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis sex y axis how many sex , sort by the x axis in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "sex",
            "y",
            "axis",
            "how",
            "many",
            "sex",
            ",",
            "sort",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "Compare the total number of captains with different classes using a bar graph , and display total number from low to high order .",
        "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC'}",
        "record_name": "2753@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Compare the total number of captains with different classes using a bar graph , and display total number from low to high order .",
        "question_toks": [
            "Compare",
            "the",
            "total",
            "number",
            "of",
            "captains",
            "with",
            "different",
            "classes",
            "using",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "display",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "COUNT",
            "(",
            "Class",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "Class",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Class",
            ")",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find job_id and the average of salary , and group by attribute job_id , and visualize them by a bar chart , I want to list in ascending by the X-axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1777@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find job_id and the average of salary , and group by attribute job_id , and visualize them by a bar chart , I want to list in ascending by the X-axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "list",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "Give me a bar chart about the number of platforms in different locations , rank from low to high by the bars .",
        "VQL": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC'}",
        "record_name": "3045@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart about the number of platforms in different locations , rank from low to high by the bars .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "number",
            "of",
            "platforms",
            "in",
            "different",
            "locations",
            ",",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "SUM",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "Location",
            "ASC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Sex and the sum of Height , and group by attribute Sex , and sort from low to high by the sum height .",
        "VQL": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC'}",
        "record_name": "379@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Sex and the sum of Height , and group by attribute Sex , and sort from low to high by the sum height .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "sum",
            "of",
            "Height",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "sort",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "sum",
            "height",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Height",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Height",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.height"
    },
    {
        "nl_queries": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval .",
        "VQL": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
        "db_id": "tracking_grants_for_research",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_to , COUNT(date_to) FROM Project_Staff', 'binning': 'BIN date_to BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR'}",
        "record_name": "2965",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me the trend about the date_to attributes of all researchers , and bin the date_to into Year interval .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "date_to",
            "attributes",
            "of",
            "all",
            "researchers",
            ",",
            "and",
            "bin",
            "the",
            "date_to",
            "into",
            "Year",
            "interval",
            "."
        ],
        "query": "Visualize LINE SELECT date_to , COUNT(date_to) FROM Project_Staff BIN date_to BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_to",
            ",",
            "COUNT",
            "(",
            "date_to",
            ")",
            "FROM",
            "Project_Staff",
            "BIN",
            "date_to",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Project_Staff, columns = [*,staff_id, project_id, role_code, date_from, date_to, other_details]",
        "choose_schema_rat_link": "project_staff.date_from@SEP@project_staff.date_to"
    },
    {
        "nl_queries": "Count the number of employees for each city Plot them as bar chart , I want to sort x axis in desc order .",
        "VQL": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC'}",
        "record_name": "1363@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the number of employees for each city Plot them as bar chart , I want to sort x axis in desc order .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "employees",
            "for",
            "each",
            "city",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "x",
            "axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "City",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee",
            "GROUP",
            "BY",
            "city",
            "ORDER",
            "BY",
            "City",
            "DESC"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]",
        "choose_schema_rat_link": "shop.number_products@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@employee.city"
    },
    {
        "nl_queries": "What is the oldest age for each gender of student ? Return a bar chart , I want to sort maximal age in descending order .",
        "VQL": "Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC",
        "db_id": "dorm_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC'}",
        "record_name": "1238@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            1,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the oldest age for each gender of student ? Return a bar chart , I want to sort maximal age in descending order .",
        "question_toks": [
            "What",
            "is",
            "the",
            "oldest",
            "age",
            "for",
            "each",
            "gender",
            "of",
            "student",
            "?",
            "Return",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "maximal",
            "age",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , max(age) FROM student GROUP BY Sex ORDER BY max(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "max",
            "(",
            "age",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "max",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.age@SEP@dorm.gender@SEP@student.stuid@SEP@dorm.student_capacity@SEP@lives_in.stuid"
    },
    {
        "nl_queries": "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\" , I want to show x axis in ascending order .",
        "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC', 'binning': 'BIN date_of_birth BY YEAR'}, 'VQL': 'Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR'}",
        "record_name": "80@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Male\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                21,
                "year"
            ],
            "vis": 2
        },
        "question": "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\" , I want to show x axis in ascending order .",
        "question_toks": [
            "A",
            "line",
            "chart",
            "for",
            "returning",
            "the",
            "number",
            "of",
            "the",
            "date",
            "of",
            "birth",
            "for",
            "all",
            "the",
            "guests",
            "with",
            "gender",
            "code",
            "\"Male\"",
            ",",
            "I",
            "want",
            "to",
            "show",
            "x",
            "axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "date_of_birth",
            ",",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "FROM",
            "Guests",
            "WHERE",
            "gender_code",
            "=",
            "\"Male\"",
            "ORDER",
            "BY",
            "date_of_birth",
            "ASC",
            "BIN",
            "date_of_birth",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Guests, columns = [*,guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]",
        "choose_schema_rat_link": "guests.date_of_birth@SEP@guests.gender_code@SEP@guests.guest_id@SEP@guests.guest_first_name@SEP@guests.guest_last_name@SEP@apartment_bookings.guest_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality , order from low to high by the X please .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2906@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality , order from low to high by the X please .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Stack bar chart of school_id vs All_Home based on acc road , and show in asc by the bar .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3089@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stack bar chart of school_id vs All_Home based on acc road , and show in asc by the bar .",
        "question_toks": [
            "Stack",
            "bar",
            "chart",
            "of",
            "school_id",
            "vs",
            "All_Home",
            "based",
            "on",
            "acc",
            "road",
            ",",
            "and",
            "show",
            "in",
            "asc",
            "by",
            "the",
            "bar",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_400 and ID , could you list meter_400 in descending order ?",
        "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC'}",
        "record_name": "2918@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_400 and ID , could you list meter_400 in descending order ?",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_400",
            "and",
            "ID",
            ",",
            "could",
            "you",
            "list",
            "meter_400",
            "in",
            "descending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_400",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_400",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Return a bar chart on how old is the youngest person for each job ? , and could you display names in desc order please ?",
        "VQL": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC'}",
        "record_name": "2463@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on how old is the youngest person for each job ? , and could you display names in desc order please ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "how",
            "old",
            "is",
            "the",
            "youngest",
            "person",
            "for",
            "each",
            "job",
            "?",
            ",",
            "and",
            "could",
            "you",
            "display",
            "names",
            "in",
            "desc",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "job",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.job@SEP@person.name@SEP@personfriend.name"
    },
    {
        "nl_queries": "Show me about the change of Employee_ID over Start_from in a line chart , order by the X-axis in ascending .",
        "VQL": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC'}",
        "record_name": "1339@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Show me about the change of Employee_ID over Start_from in a line chart , order by the X-axis in ascending .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "change",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            "in",
            "a",
            "line",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "Employee_ID",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "ASC"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]@SEP@Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]@SEP@Table evaluation, columns = [*,Employee_ID, Year_awarded, Bonus]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Bar chart x axis meter 500 y axis meter_100 , and list by the bars in asc .",
        "VQL": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC'}",
        "record_name": "2921@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis meter 500 y axis meter_100 , and list by the bars in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "meter",
            "500",
            "y",
            "axis",
            "meter_100",
            ",",
            "and",
            "list",
            "by",
            "the",
            "bars",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_500 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_500",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_500",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_500@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "How old is each gender , on average . Show a pie chart .",
        "VQL": "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender'}",
        "record_name": "2472",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "How old is each gender , on average . Show a pie chart .",
        "question_toks": [
            "How",
            "old",
            "is",
            "each",
            "gender",
            ",",
            "on",
            "average",
            ".",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.gender"
    },
    {
        "nl_queries": "Bar graph to show sum revenue from different name , and rank in descending by the y-axis please .",
        "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC'}",
        "record_name": "2181@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show sum revenue from different name , and rank in descending by the y-axis please .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "sum",
            "revenue",
            "from",
            "different",
            "name",
            ",",
            "and",
            "rank",
            "in",
            "descending",
            "by",
            "the",
            "y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "sum",
            "(",
            "revenue",
            ")",
            "FROM",
            "manufacturers",
            "GROUP",
            "BY",
            "name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "revenue",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.revenue@SEP@manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of password and gender_mf .",
        "VQL": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1263",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of password and gender_mf .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "password",
            "and",
            "gender_mf",
            "."
        ],
        "query": "Visualize BAR SELECT password , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "password",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "course_authors_and_tutors.password@SEP@students.password@SEP@course_authors_and_tutors.gender_mf"
    },
    {
        "nl_queries": "List all customer status codes and the number of customers having each status code in a bar chart , could you rank bar in descending order ?",
        "VQL": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC",
        "db_id": "driving_school",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC'}",
        "record_name": "1245@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all customer status codes and the number of customers having each status code in a bar chart , could you rank bar in descending order ?",
        "question_toks": [
            "List",
            "all",
            "customer",
            "status",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "customers",
            "having",
            "each",
            "status",
            "code",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "rank",
            "bar",
            "in",
            "descending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code ORDER BY customer_status_code DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "customer_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code",
            "ORDER",
            "BY",
            "customer_status_code",
            "DESC"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]",
        "choose_schema_rat_link": "customers.customer_status_code@SEP@customers.customer_id@SEP@customers.customer_address_id@SEP@customer_payments.customer_id@SEP@lessons.customer_id"
    },
    {
        "nl_queries": "Return the date of birth for all the guests with gender code \"Male\" , and count them by a bar chart",
        "VQL": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"', 'binning': 'BIN date_of_birth BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY'}",
        "record_name": "79",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    "\"Male\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                21,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Return the date of birth for all the guests with gender code \"Male\" , and count them by a bar chart",
        "question_toks": [
            "Return",
            "the",
            "date",
            "of",
            "birth",
            "for",
            "all",
            "the",
            "guests",
            "with",
            "gender",
            "code",
            "\"Male\"",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart"
        ],
        "query": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_of_birth",
            ",",
            "COUNT",
            "(",
            "date_of_birth",
            ")",
            "FROM",
            "Guests",
            "WHERE",
            "gender_code",
            "=",
            "\"Male\"",
            "BIN",
            "date_of_birth",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Guests, columns = [*,guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]",
        "choose_schema_rat_link": "guests.date_of_birth@SEP@guests.gender_code@SEP@guests.guest_id@SEP@guests.guest_first_name@SEP@guests.guest_last_name@SEP@apartment_bookings.guest_id"
    },
    {
        "nl_queries": "Visualize a pie chart to show customer status codes and the number of customers having each status code .",
        "VQL": "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "db_id": "driving_school",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code'}",
        "record_name": "1244",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Visualize a pie chart to show customer status codes and the number of customers having each status code .",
        "question_toks": [
            "Visualize",
            "a",
            "pie",
            "chart",
            "to",
            "show",
            "customer",
            "status",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "customers",
            "having",
            "each",
            "status",
            "code",
            "."
        ],
        "query": "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "customer_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code"
        ],
        "choose_schema": "Table Customers, columns = [*,customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]",
        "choose_schema_rat_link": "customers.customer_status_code@SEP@customers.customer_id@SEP@customers.customer_address_id@SEP@customer_payments.customer_id@SEP@lessons.customer_id"
    },
    {
        "nl_queries": "Find the number of employees of each gender whose salary is lower than 50000 . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex",
        "db_id": "company_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex'}",
        "record_name": "678",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    50000.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of employees of each gender whose salary is lower than 50000 . Visualize by bar chart .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "employees",
            "of",
            "each",
            "gender",
            "whose",
            "salary",
            "is",
            "lower",
            "than",
            "50000",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , count(*) FROM employee WHERE salary < 50000 GROUP BY sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employee",
            "WHERE",
            "salary",
            "<",
            "50000",
            "GROUP",
            "BY",
            "sex"
        ],
        "choose_schema": "Table employee, columns = [*,Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn, Dno]@SEP@Table dependent, columns = [*,Essn, Dependent_name, Sex, Bdate, Relationship]",
        "choose_schema_rat_link": "works_on.essn@SEP@dependent.essn@SEP@employee.salary"
    },
    {
        "nl_queries": "I want to know the proportion of total number for each product category .",
        "VQL": "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "db_id": "customers_campaigns_ecommerce",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category', 'binning': ''}, 'VQL': 'Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category'}",
        "record_name": "1014",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "I want to know the proportion of total number for each product category .",
        "question_toks": [
            "I",
            "want",
            "to",
            "know",
            "the",
            "proportion",
            "of",
            "total",
            "number",
            "for",
            "each",
            "product",
            "category",
            "."
        ],
        "query": "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "product_category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_campaigns",
            "GROUP",
            "BY",
            "product_category"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_category, product_name]@SEP@Table Mailshot_Campaigns, columns = [*,mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]",
        "choose_schema_rat_link": "products.product_category@SEP@mailshot_campaigns.product_category@SEP@products.product_id@SEP@products.product_name@SEP@order_items.product_id"
    },
    {
        "nl_queries": "For each type of store , how many of them are there . Show a pie chart .",
        "VQL": "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
        "db_id": "store_product",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , count(*) FROM store GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE'}",
        "record_name": "2861",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "For each type of store , how many of them are there . Show a pie chart .",
        "question_toks": [
            "For",
            "each",
            "type",
            "of",
            "store",
            ",",
            "how",
            "many",
            "of",
            "them",
            "are",
            "there",
            ".",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "store",
            "GROUP",
            "BY",
            "TYPE"
        ],
        "choose_schema": "Table store, columns = [*,Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]",
        "choose_schema_rat_link": "store.type@SEP@store.store_id@SEP@store.store_name@SEP@store_product.store_id@SEP@store_district.store_id"
    },
    {
        "nl_queries": "Show me a scatter plot of council tax id and cmi_cross_ref_id for .",
        "VQL": "Visualize SCATTER SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
        "db_id": "local_govt_mdm",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines'}",
        "record_name": "2158",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me a scatter plot of council tax id and cmi_cross_ref_id for .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "scatter",
            "plot",
            "of",
            "council",
            "tax",
            "id",
            "and",
            "cmi_cross_ref_id",
            "for",
            "."
        ],
        "query": "Visualize SCATTER SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "council_tax_id",
            ",",
            "cmi_cross_ref_id",
            "FROM",
            "parking_fines"
        ],
        "choose_schema": "Table CMI_Cross_References, columns = [*,cmi_cross_ref_id, master_customer_id, source_system_code]@SEP@Table Council_Tax, columns = [*,council_tax_id, cmi_cross_ref_id]@SEP@Table Business_Rates, columns = [*,business_rates_id, cmi_cross_ref_id]@SEP@Table Benefits_Overpayments, columns = [*,council_tax_id, cmi_cross_ref_id]@SEP@Table Parking_Fines, columns = [*,council_tax_id, cmi_cross_ref_id]@SEP@Table Rent_Arrears, columns = [*,council_tax_id, cmi_cross_ref_id]@SEP@Table Electoral_Register, columns = [*,electoral_register_id, cmi_cross_ref_id]",
        "choose_schema_rat_link": "council_tax.council_tax_id@SEP@benefits_overpayments.council_tax_id@SEP@parking_fines.council_tax_id@SEP@rent_arrears.council_tax_id@SEP@customer_master_index.cmi_details@SEP@cmi_cross_references.cmi_cross_ref_id@SEP@council_tax.cmi_cross_ref_id@SEP@business_rates.cmi_cross_ref_id@SEP@benefits_overpayments.cmi_cross_ref_id@SEP@parking_fines.cmi_cross_ref_id@SEP@rent_arrears.cmi_cross_ref_id@SEP@electoral_register.cmi_cross_ref_id"
    },
    {
        "nl_queries": "A bar chart shows the distribution of All_Road and ACC_Percent .",
        "VQL": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , ACC_Percent FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match'}",
        "record_name": "3141",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of All_Road and ACC_Percent .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "All_Road",
            "and",
            "ACC_Percent",
            "."
        ],
        "query": "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Find the pixel aspect ratio and the nation of the tv channels that do not use English . Show the number of different pixel aspect ratios with a bar chart .",
        "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
        "db_id": "tvshow",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR\"}",
        "record_name": "3062",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the pixel aspect ratio and the nation of the tv channels that do not use English . Show the number of different pixel aspect ratios with a bar chart .",
        "question_toks": [
            "Find",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "the",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            ".",
            "Show",
            "the",
            "number",
            "of",
            "different",
            "pixel",
            "aspect",
            "ratios",
            "with",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "COUNT",
            "(",
            "Pixel_aspect_ratio_PAR",
            ")",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English'",
            "GROUP",
            "BY",
            "Pixel_aspect_ratio_PAR"
        ],
        "choose_schema": "Table TV_Channel, columns = [*,id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "choose_schema_rat_link": "tv_channel.pixel_aspect_ratio_par@SEP@tv_series.channel@SEP@cartoon.channel"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , and list Y-axis in asc order .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC'}",
        "record_name": "2928@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , and list Y-axis in asc order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "amount",
            "of",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "list",
            "Y-axis",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality"
    },
    {
        "nl_queries": "Display a bar chart for what are the numbers of wines for different grapes ? , and order by the total number in ascending .",
        "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC'}",
        "record_name": "3238@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Display a bar chart for what are the numbers of wines for different grapes ? , and order by the total number in ascending .",
        "question_toks": [
            "Display",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "numbers",
            "of",
            "wines",
            "for",
            "different",
            "grapes",
            "?",
            ",",
            "and",
            "order",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "Which ministers are not a part of the Progress Party , and count them by a bar chart , and I want to order by the x-axis from high to low .",
        "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
        "db_id": "party_people",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC\"}",
        "record_name": "2517@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"Progress Party\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Which ministers are not a part of the Progress Party , and count them by a bar chart , and I want to order by the x-axis from high to low .",
        "question_toks": [
            "Which",
            "ministers",
            "are",
            "not",
            "a",
            "part",
            "of",
            "the",
            "Progress",
            "Party",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "order",
            "by",
            "the",
            "x-axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Minister",
            ",",
            "COUNT",
            "(",
            "Minister",
            ")",
            "FROM",
            "party",
            "WHERE",
            "party_name",
            "!",
            "=",
            "'Progress",
            "Party'",
            "GROUP",
            "BY",
            "Minister",
            "ORDER",
            "BY",
            "Minister",
            "DESC"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.minister@SEP@party.party_id@SEP@party.party_name@SEP@member.party_id@SEP@party_events.party_id"
    },
    {
        "nl_queries": "Count the number of programs broadcast for each time section of a day in a bar chart , sort names from low to high order .",
        "VQL": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC",
        "db_id": "program_share",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC'}",
        "record_name": "2623@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Count the number of programs broadcast for each time section of a day in a bar chart , sort names from low to high order .",
        "question_toks": [
            "Count",
            "the",
            "number",
            "of",
            "programs",
            "broadcast",
            "for",
            "each",
            "time",
            "section",
            "of",
            "a",
            "day",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "names",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Time_of_day , count(*) FROM broadcast GROUP BY time_of_day ORDER BY Time_of_day ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time_of_day",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "broadcast",
            "GROUP",
            "BY",
            "time_of_day",
            "ORDER",
            "BY",
            "Time_of_day",
            "ASC"
        ],
        "choose_schema": "Table broadcast, columns = [*,Channel_ID, Program_ID, Time_of_day]",
        "choose_schema_rat_link": "program.program_id@SEP@broadcast.program_id@SEP@broadcast_share.program_id@SEP@broadcast.time_of_day@SEP@program.name@SEP@channel.name"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of hire_date and the average of employee_id bin hire_date by weekday in a bar chart , order total number in ascending order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1549@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of hire_date and the average of employee_id bin hire_date by weekday in a bar chart , order total number in ascending order .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of meter_300 and ID , display by the names in asc .",
        "VQL": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC'}",
        "record_name": "2916@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of meter_300 and ID , display by the names in asc .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_300",
            "and",
            "ID",
            ",",
            "display",
            "by",
            "the",
            "names",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT meter_300 , ID FROM swimmer ORDER BY meter_300 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_300",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.name@SEP@stadium.name@SEP@event.name"
    },
    {
        "nl_queries": "Show the total number from each allergy , order from low to high by the X .",
        "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC'}",
        "record_name": "45@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the total number from each allergy , order from low to high by the X .",
        "question_toks": [
            "Show",
            "the",
            "total",
            "number",
            "from",
            "each",
            "allergy",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Allergy",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Has_allergy",
            "GROUP",
            "BY",
            "Allergy",
            "ORDER",
            "BY",
            "Allergy",
            "ASC"
        ],
        "choose_schema": "Table Allergy_Type, columns = [*,Allergy, AllergyType]@SEP@Table Has_Allergy, columns = [*,StuID, Allergy]",
        "choose_schema_rat_link": "has_allergy.allergy@SEP@allergy_type.allergy@SEP@allergy_type.allergytype"
    },
    {
        "nl_queries": "Show me about the distribution of All_Neutral and All_Games_Percent in a bar chart , and list by the bars in asc .",
        "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC'}",
        "record_name": "3146@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of All_Neutral and All_Games_Percent in a bar chart , and list by the bars in asc .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "All_Neutral",
            "and",
            "All_Games_Percent",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "by",
            "the",
            "bars",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Neutral",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Find the number of dorms for each gender in a bar chart , I want to show by the x axis from high to low please .",
        "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC'}",
        "record_name": "1210@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of dorms for each gender in a bar chart , I want to show by the x axis from high to low please .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "dorms",
            "for",
            "each",
            "gender",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "DESC"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.dormid@SEP@dorm.dorm_name@SEP@has_amenity.dormid@SEP@lives_in.dormid@SEP@dorm.gender"
    },
    {
        "nl_queries": "Bar graph to show the total number from different allergytype , and order by the x axis from high to low .",
        "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
        "db_id": "allergy_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC'}",
        "record_name": "61@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show the total number from different allergytype , and order by the x axis from high to low .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "the",
            "total",
            "number",
            "from",
            "different",
            "allergytype",
            ",",
            "and",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "AllergyType",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Allergy_type",
            "GROUP",
            "BY",
            "allergytype",
            "ORDER",
            "BY",
            "AllergyType",
            "DESC"
        ],
        "choose_schema": "Table Allergy_Type, columns = [*,Allergy, AllergyType]",
        "choose_schema_rat_link": "Table Allergy_Type, columns = [*,Allergy, AllergyType]@SEP@Table Has_Allergy, columns = [*,StuID, Allergy]@SEP@Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]"
    },
    {
        "nl_queries": "Show all advisors and corresponding number of students by a scatter chart .",
        "VQL": "Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor",
        "db_id": "allergy_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Advisor , count(*) FROM Student GROUP BY advisor', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor'}",
        "record_name": "51",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show all advisors and corresponding number of students by a scatter chart .",
        "question_toks": [
            "Show",
            "all",
            "advisors",
            "and",
            "corresponding",
            "number",
            "of",
            "students",
            "by",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Advisor",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Student",
            "GROUP",
            "BY",
            "advisor"
        ],
        "choose_schema": "Table Student, columns = [*,StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "choose_schema_rat_link": "student.advisor"
    },
    {
        "nl_queries": "A bar chart for listing the number of the name of technicians whose team is not \"NYY\" , I want to rank in asc by the Y-axis .",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) ASC",
        "db_id": "machine_repair",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) ASC'}",
        "record_name": "2165@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"NYY\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart for listing the number of the name of technicians whose team is not \"NYY\" , I want to rank in asc by the Y-axis .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "for",
            "listing",
            "the",
            "number",
            "of",
            "the",
            "name",
            "of",
            "technicians",
            "whose",
            "team",
            "is",
            "not",
            "\"NYY\"",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM technician WHERE Team != \"NYY\" GROUP BY Name ORDER BY COUNT(Name) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "technician",
            "WHERE",
            "Team",
            "!",
            "=",
            "\"NYY\"",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Name",
            ")",
            "ASC"
        ],
        "choose_schema": "Table repair, columns = [*,repair_ID, name, Launch_Date, Notes]@SEP@Table machine, columns = [*,Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank]@SEP@Table technician, columns = [*,technician_id, Name, Team, Starting_Year, Age]",
        "choose_schema_rat_link": "repair.name@SEP@technician.name@SEP@technician.technician_id@SEP@repair_assignment.technician_id@SEP@machine.team@SEP@technician.team"
    },
    {
        "nl_queries": "What are the number of the descriptions for the aircrafts ? , and could you list in descending by the Description ?",
        "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
        "db_id": "aircraft",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC'}",
        "record_name": "34@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the number of the descriptions for the aircrafts ? , and could you list in descending by the Description ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "descriptions",
            "for",
            "the",
            "aircrafts",
            "?",
            ",",
            "and",
            "could",
            "you",
            "list",
            "in",
            "descending",
            "by",
            "the",
            "Description",
            "?"
        ],
        "query": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Description",
            ",",
            "COUNT",
            "(",
            "Description",
            ")",
            "FROM",
            "aircraft",
            "GROUP",
            "BY",
            "Description",
            "ORDER",
            "BY",
            "Description",
            "DESC"
        ],
        "choose_schema": "Table aircraft, columns = [*,Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
        "choose_schema_rat_link": "aircraft.description@SEP@aircraft.aircraft@SEP@aircraft.aircraft_id@SEP@airport.aircraft_movements@SEP@airport_aircraft.aircraft_id"
    },
    {
        "nl_queries": "Show me population by county name in a histogram",
        "VQL": "Visualize BAR SELECT County_name , Population FROM county",
        "db_id": "election",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT County_name , Population FROM county', 'binning': ''}, 'VQL': 'Visualize BAR SELECT County_name , Population FROM county'}",
        "record_name": "1304",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me population by county name in a histogram",
        "question_toks": [
            "Show",
            "me",
            "population",
            "by",
            "county",
            "name",
            "in",
            "a",
            "histogram"
        ],
        "query": "Visualize BAR SELECT County_name , Population FROM county",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "County_name",
            ",",
            "Population",
            "FROM",
            "county"
        ],
        "choose_schema": "Table county, columns = [*,County_Id, County_name, Population, Zip_code]",
        "choose_schema_rat_link": "county.county_name@SEP@county.population@SEP@county.county_id@SEP@election.counties_represented"
    },
    {
        "nl_queries": "Return a bar chart on what is the average age for each gender ? , and could you rank x-axis in asc order ?",
        "VQL": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC'}",
        "record_name": "2473@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on what is the average age for each gender ? , and could you rank x-axis in asc order ?",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "what",
            "is",
            "the",
            "average",
            "age",
            "for",
            "each",
            "gender",
            "?",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "x-axis",
            "in",
            "asc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender ORDER BY gender ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "ASC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.gender"
    },
    {
        "nl_queries": "Bar chart x axis venue y axis how many venue , show by the X in desc .",
        "VQL": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC",
        "db_id": "debate",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC'}",
        "record_name": "1077@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis venue y axis how many venue , show by the X in desc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "venue",
            "y",
            "axis",
            "how",
            "many",
            "venue",
            ",",
            "show",
            "by",
            "the",
            "X",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Venue , COUNT(Venue) FROM debate GROUP BY Venue ORDER BY Venue DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Venue",
            ",",
            "COUNT",
            "(",
            "Venue",
            ")",
            "FROM",
            "debate",
            "GROUP",
            "BY",
            "Venue",
            "ORDER",
            "BY",
            "Venue",
            "DESC"
        ],
        "choose_schema": "Table debate, columns = [*,Debate_ID, Date, Venue, Num_of_Audience]",
        "choose_schema_rat_link": "debate.venue"
    },
    {
        "nl_queries": "I want to know the proportion of each type .",
        "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "db_id": "ship_mission",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type'}",
        "record_name": "2757",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "I want to know the proportion of each type .",
        "question_toks": [
            "I",
            "want",
            "to",
            "know",
            "the",
            "proportion",
            "of",
            "each",
            "type",
            "."
        ],
        "query": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "Type",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Type"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.type"
    },
    {
        "nl_queries": "Stack bar chart of school_id vs ACC_Road based on all home , I want to sort in ascending by the Y-axis .",
        "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC'}",
        "record_name": "3087@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Stack bar chart of school_id vs ACC_Road based on all home , I want to sort in ascending by the Y-axis .",
        "question_toks": [
            "Stack",
            "bar",
            "chart",
            "of",
            "school_id",
            "vs",
            "ACC_Road",
            "based",
            "on",
            "all",
            "home",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.all_home@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show me about the distribution of Date_of_Birth and Height in a bar chart , could you list by the Y-axis in descending ?",
        "VQL": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC'}",
        "record_name": "397@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Date_of_Birth and Height in a bar chart , could you list by the Y-axis in descending ?",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Date_of_Birth",
            "and",
            "Height",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "list",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "?"
        ],
        "query": "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Date_of_Birth",
            ",",
            "Height",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Height",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.date@SEP@people.date_of_birth@SEP@people.height"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality , order by the Y in descending .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC'}",
        "record_name": "2906@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality , order by the Y in descending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "order",
            "by",
            "the",
            "Y",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "A line chart shows the trend of the average of Shop_ID over Start_from bin start_from by time .",
        "VQL": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR'}",
        "record_name": "1359",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "A line chart shows the trend of the average of Shop_ID over Start_from bin start_from by time .",
        "question_toks": [
            "A",
            "line",
            "chart",
            "shows",
            "the",
            "trend",
            "of",
            "the",
            "average",
            "of",
            "Shop_ID",
            "over",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "time",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Visualize a bar chart for how many books fall into each category ? , show by the names from high to low .",
        "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "db_id": "culture_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC'}",
        "record_name": "907@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for how many books fall into each category ? , show by the names from high to low .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "books",
            "fall",
            "into",
            "each",
            "category",
            "?",
            ",",
            "show",
            "by",
            "the",
            "names",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "book_club",
            "GROUP",
            "BY",
            "category",
            "ORDER",
            "BY",
            "Category",
            "DESC"
        ],
        "choose_schema": "Table book_club, columns = [*,book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]",
        "choose_schema_rat_link": "book_club.book_club_id@SEP@book_club.book_title@SEP@culture_company.book_club_id@SEP@book_club.category"
    },
    {
        "nl_queries": "Show the average of id from each nationality , and sort X-axis in ascending order .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2907@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the average of id from each nationality , and sort X-axis in ascending order .",
        "question_toks": [
            "Show",
            "the",
            "average",
            "of",
            "id",
            "from",
            "each",
            "nationality",
            ",",
            "and",
            "sort",
            "X-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the hire_date bin hire_date by weekday by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1595",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the hire_date bin hire_date by weekday by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart , and show by the total number in descending .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\"}",
        "record_name": "1565@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart , and show by the total number in descending .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "by",
            "the",
            "total",
            "number",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of Team_Name and School_ID , I want to rank by the total number in ascending .",
        "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC'}",
        "record_name": "3111@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of Team_Name and School_ID , I want to rank by the total number in ascending .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Team_Name",
            "and",
            "School_ID",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "total",
            "number",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team_Name",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "School_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "List the final tables made and the best finishes of poker players in a scatter chart",
        "VQL": "Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "db_id": "poker_player",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Final_Table_Made , Best_Finish FROM poker_player', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player'}",
        "record_name": "2592",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "List the final tables made and the best finishes of poker players in a scatter chart",
        "question_toks": [
            "List",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "the",
            "best",
            "finishes",
            "of",
            "poker",
            "players",
            "in",
            "a",
            "scatter",
            "chart"
        ],
        "query": "Visualize SCATTER SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "choose_schema": "Table poker_player, columns = [*,Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "choose_schema_rat_link": "poker_player.final_table_made@SEP@poker_player.best_finish@SEP@poker_player.poker_player_id"
    },
    {
        "nl_queries": "List the name and cost of all procedures sorted by the cost from the highest to the lowest by a bar chart .",
        "VQL": "Visualize BAR SELECT Name , Cost FROM procedures ORDER BY cost DESC",
        "db_id": "hospital_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Cost FROM procedures ORDER BY cost DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Cost FROM procedures ORDER BY cost DESC'}",
        "record_name": "1526",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest by a bar chart .",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "cost",
            "of",
            "all",
            "procedures",
            "sorted",
            "by",
            "the",
            "cost",
            "from",
            "the",
            "highest",
            "to",
            "the",
            "lowest",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Cost FROM procedures ORDER BY cost DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Cost",
            "FROM",
            "procedures",
            "ORDER",
            "BY",
            "cost",
            "DESC"
        ],
        "choose_schema": "Table Physician, columns = [*,EmployeeID, Name, Position, SSN]@SEP@Table Department, columns = [*,DepartmentID, Name, Head]@SEP@Table Procedures, columns = [*,Code, Name, Cost]@SEP@Table Patient, columns = [*,SSN, Name, Address, Phone, InsuranceID, PCP]@SEP@Table Nurse, columns = [*,EmployeeID, Name, Position, Registered, SSN]@SEP@Table Medication, columns = [*,Code, Name, Brand, Description]@SEP@Table Undergoes, columns = [*,Patient, Procedures, Stay, DateUndergoes, Physician, AssistingNurse]",
        "choose_schema_rat_link": "physician.name@SEP@department.name@SEP@procedures.name@SEP@patient.name@SEP@nurse.name@SEP@medication.name@SEP@procedures.cost@SEP@undergoes.procedures"
    },
    {
        "nl_queries": "For each type , what is the average tonnage .",
        "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
        "db_id": "ship_mission",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE'}",
        "record_name": "2765",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each type , what is the average tonnage .",
        "question_toks": [
            "For",
            "each",
            "type",
            ",",
            "what",
            "is",
            "the",
            "average",
            "tonnage",
            "."
        ],
        "query": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "avg",
            "(",
            "Tonnage",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "TYPE"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.type@SEP@ship.tonnage"
    },
    {
        "nl_queries": "In which years cars were produced weighing no less than 3000 and no more than 4000 , and count them by a bar chart , sort in ascending by the y axis .",
        "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
        "db_id": "car_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC', 'binning': 'BIN Year BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY'}",
        "record_name": "424@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    4000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 , and count them by a bar chart , sort in ascending by the y axis .",
        "question_toks": [
            "In",
            "which",
            "years",
            "cars",
            "were",
            "produced",
            "weighing",
            "no",
            "less",
            "than",
            "3000",
            "and",
            "no",
            "more",
            "than",
            "4000",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Year",
            ",",
            "COUNT",
            "(",
            "Year",
            ")",
            "FROM",
            "cars_data",
            "where",
            "weight",
            "between",
            "3000",
            "and",
            "4000",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Year",
            ")",
            "ASC",
            "BIN",
            "Year",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table cars_data, columns = [*,Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year]",
        "choose_schema_rat_link": "cars_data.year"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Start_from and the sum of Shop_ID bin start_from by weekday .",
        "VQL": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Shop_ID) FROM hiring', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY'}",
        "record_name": "1340",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Start_from and the sum of Shop_ID bin start_from by weekday .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "sum",
            "of",
            "Shop_ID",
            "bin",
            "start_from",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Give me a pie chart to reflect the proportion of All_Road and School_ID .",
        "VQL": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize PIE SELECT All_Road , School_ID FROM basketball_match'}",
        "record_name": "3153",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Give me a pie chart to reflect the proportion of All_Road and School_ID .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "pie",
            "chart",
            "to",
            "reflect",
            "the",
            "proportion",
            "of",
            "All_Road",
            "and",
            "School_ID",
            "."
        ],
        "query": "Visualize PIE SELECT All_Road , School_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Show me about the distribution of meter_300 and meter_100 in a bar chart , and list Y from high to low order .",
        "VQL": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC'}",
        "record_name": "2917@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of meter_300 and meter_100 in a bar chart , and list Y from high to low order .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "meter_300",
            "and",
            "meter_100",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "list",
            "Y",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_300",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_100",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Show the number of document type for different document type description in a bar chart , list from high to low by the y-axis .",
        "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC'}",
        "record_name": "829@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of document type for different document type description in a bar chart , list from high to low by the y-axis .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "document",
            "type",
            "for",
            "different",
            "document",
            "type",
            "description",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Document_Type_Description",
            ",",
            "COUNT",
            "(",
            "Document_Type_Description",
            ")",
            "FROM",
            "Ref_document_types",
            "GROUP",
            "BY",
            "Document_Type_Description",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Document_Type_Description",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Ref_Document_Types, columns = [*,Document_Type_Code, Document_Type_Name, Document_Type_Description]",
        "choose_schema_rat_link": "documents.document_type_code@SEP@documents.document_id@SEP@documents.document_date@SEP@documents.document_name@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID\"}",
        "record_name": "1562",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , visualize a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "What is the total cloud cover rates of the dates (bin into year interval) that had the top 5 cloud cover rates ? You can draw me a bar chart for this purpose , rank in descending by the Y-axis .",
        "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC', 'binning': 'BIN date BY YEAR'}, 'VQL': 'Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR'}",
        "record_name": "344@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "year"
            ],
            "vis": 0
        },
        "question": "What is the total cloud cover rates of the dates (bin into year interval) that had the top 5 cloud cover rates ? You can draw me a bar chart for this purpose , rank in descending by the Y-axis .",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "cloud",
            "cover",
            "rates",
            "of",
            "the",
            "dates",
            "(bin",
            "into",
            "year",
            "interval)",
            "that",
            "had",
            "the",
            "top",
            "5",
            "cloud",
            "cover",
            "rates",
            "?",
            "You",
            "can",
            "draw",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "this",
            "purpose",
            ",",
            "rank",
            "in",
            "descending",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "SUM",
            "(",
            "cloud_cover",
            ")",
            "FROM",
            "weather",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "cloud_cover",
            ")",
            "DESC",
            "BIN",
            "date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.cloud_cover@SEP@weather.date"
    },
    {
        "nl_queries": "Give me the comparison about the sum of ID over the meter_200 , and group by attribute meter_200 by a bar chart , and order in ascending by the total number .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC'}",
        "record_name": "2910@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the sum of ID over the meter_200 , and group by attribute meter_200 by a bar chart , and order in ascending by the total number .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "ID",
            "over",
            "the",
            "meter_200",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "in",
            "ascending",
            "by",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Is_full_time and the average of Employee_ID , and group by attribute Is_full_time , and sort in ascending by the bars .",
        "VQL": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC'}",
        "record_name": "1348@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Is_full_time and the average of Employee_ID , and group by attribute Is_full_time , and sort in ascending by the bars .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "average",
            "of",
            "Employee_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "and",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "bars",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Is_full_time",
            "ASC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "Visualize the relationship between Shop_ID and Employee_ID .",
        "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Shop_ID , Employee_ID FROM hiring', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring'}",
        "record_name": "1357",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize the relationship between Shop_ID and Employee_ID .",
        "question_toks": [
            "Visualize",
            "the",
            "relationship",
            "between",
            "Shop_ID",
            "and",
            "Employee_ID",
            "."
        ],
        "query": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Shop_ID",
            ",",
            "Employee_ID",
            "FROM",
            "hiring"
        ],
        "choose_schema": "Table employee, columns = [*,Employee_ID, Name, Age, City]@SEP@Table shop, columns = [*,Shop_ID, Name, Location, District, Number_products, Manager_name]@SEP@Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]@SEP@Table evaluation, columns = [*,Employee_ID, Year_awarded, Bonus]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "A pie chart showing the number of results of the battles when the bulgarian commander is not 'Boril' .",
        "VQL": "Visualize PIE SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result",
        "db_id": "battle_death",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result\"}",
        "record_name": "173",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Boril\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "A pie chart showing the number of results of the battles when the bulgarian commander is not 'Boril' .",
        "question_toks": [
            "A",
            "pie",
            "chart",
            "showing",
            "the",
            "number",
            "of",
            "results",
            "of",
            "the",
            "battles",
            "when",
            "the",
            "bulgarian",
            "commander",
            "is",
            "not",
            "'Boril'",
            "."
        ],
        "query": "Visualize PIE SELECT result , COUNT(result) FROM battle WHERE bulgarian_commander != 'Boril' GROUP BY result",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "result",
            ",",
            "COUNT",
            "(",
            "result",
            ")",
            "FROM",
            "battle",
            "WHERE",
            "bulgarian_commander",
            "!",
            "=",
            "'Boril'",
            "GROUP",
            "BY",
            "result"
        ],
        "choose_schema": "Table battle, columns = [*,id, name, date, bulgarian_commander, latin_commander, result]",
        "choose_schema_rat_link": "battle.bulgarian_commander@SEP@battle.result"
    },
    {
        "nl_queries": "Show the booking status code and the corresponding number of bookings . Show bar chart .",
        "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code'}",
        "record_name": "74",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the booking status code and the corresponding number of bookings . Show bar chart .",
        "question_toks": [
            "Show",
            "the",
            "booking",
            "status",
            "code",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "bookings",
            ".",
            "Show",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_status_code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Apartment_Bookings",
            "GROUP",
            "BY",
            "booking_status_code"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.booking_status_code@SEP@apartment_bookings.booking_start_date@SEP@apartment_bookings.booking_end_date@SEP@view_unit_status.status_date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1765",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by weekday .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "What is the number of singers for each country ? Return a pie chart .",
        "VQL": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
        "db_id": "concert_singer",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
        "record_name": "698",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "What is the number of singers for each country ? Return a pie chart .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "singers",
            "for",
            "each",
            "country",
            "?",
            "Return",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Country"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.singer_id@SEP@singer_in_concert.singer_id@SEP@singer.country"
    },
    {
        "nl_queries": "Show me the comparison of the total number of every ship type with a bar graph , and display in desc by the Y-axis .",
        "VQL": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
        "db_id": "ship_mission",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC'}",
        "record_name": "2758@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the comparison of the total number of every ship type with a bar graph , and display in desc by the Y-axis .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "comparison",
            "of",
            "the",
            "total",
            "number",
            "of",
            "every",
            "ship",
            "type",
            "with",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "Y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "Type",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "Type",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Type",
            ")",
            "DESC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "mission.ship_id@SEP@ship.ship_id@SEP@ship.type"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the hire_date bin hire_date by time by a bar chart , could you sort total number from high to low order please ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1587@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of manager_id over the hire_date bin hire_date by time by a bar chart , could you sort total number from high to low order please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "sort",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday , and could you order in descending by the y-axis ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1755@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday , and could you order in descending by the y-axis ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "amount",
            "of",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "weekday",
            ",",
            "and",
            "could",
            "you",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id , order in desc by the y axis .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC'}",
        "record_name": "1600@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id , order in desc by the y axis .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "A bar chart shows the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , display by the sum id in desc .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC'}",
        "record_name": "2910@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of meter_200 and the sum of ID , and group by attribute meter_200 , display by the sum id in desc .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "display",
            "by",
            "the",
            "sum",
            "id",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(ID) FROM swimmer GROUP BY meter_200 ORDER BY SUM(ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Return a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time , and rank from low to high by the x-axis .",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1360@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Return a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time , and rank from low to high by the x-axis .",
        "question_toks": [
            "Return",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "the",
            "sum",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            "bin",
            "start_from",
            "by",
            "time",
            ",",
            "and",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Show me start_station_id by start station name in a histogram",
        "VQL": "Visualize BAR SELECT start_station_name , start_station_id FROM trip",
        "db_id": "bike_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT start_station_name , start_station_id FROM trip', 'binning': ''}, 'VQL': 'Visualize BAR SELECT start_station_name , start_station_id FROM trip'}",
        "record_name": "310",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me start_station_id by start station name in a histogram",
        "question_toks": [
            "Show",
            "me",
            "start_station_id",
            "by",
            "start",
            "station",
            "name",
            "in",
            "a",
            "histogram"
        ],
        "query": "Visualize BAR SELECT start_station_name , start_station_id FROM trip",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "start_station_name",
            ",",
            "start_station_id",
            "FROM",
            "trip"
        ],
        "choose_schema": "Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "trip.start_station_name@SEP@trip.start_station_id@SEP@trip.start_date@SEP@status.station_id@SEP@station.id@SEP@trip.id@SEP@station.name"
    },
    {
        "nl_queries": "Show me about the distribution of All_Games and ACC_Percent in a bar chart , and could you display by the x-axis in asc ?",
        "VQL": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC'}",
        "record_name": "3138@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of All_Games and ACC_Percent in a bar chart , and could you display by the x-axis in asc ?",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "All_Games",
            "and",
            "ACC_Percent",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "x-axis",
            "in",
            "asc",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY All_Games ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of family_name and author_tutor_ATB .",
        "VQL": "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1271",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of family_name and author_tutor_ATB .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "family_name",
            "and",
            "author_tutor_ATB",
            "."
        ],
        "query": "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "family_name",
            ",",
            "author_tutor_ATB",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "choose_schema_rat_link": "course_authors_and_tutors.family_name@SEP@students.family_name@SEP@course_authors_and_tutors.author_id@SEP@course_authors_and_tutors.author_tutor_atb@SEP@courses.author_id"
    },
    {
        "nl_queries": "List the dog name and age of the dogs who have been abandoned in a bar chart , rank total number in descending order .",
        "VQL": "Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age DESC",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age DESC'}",
        "record_name": "1167@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the dog name and age of the dogs who have been abandoned in a bar chart , rank total number in descending order .",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            "and",
            "age",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "rank",
            "total",
            "number",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT name , age FROM Dogs WHERE abandoned_yn = 1 ORDER BY age DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "name",
            ",",
            "age",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.name@SEP@dogs.age@SEP@dogs.abandoned_yn"
    },
    {
        "nl_queries": "Bar chart of school_id from each all games , I want to list x-axis in descending order .",
        "VQL": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC'}",
        "record_name": "3115@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of school_id from each all games , I want to list x-axis in descending order .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "school_id",
            "from",
            "each",
            "all",
            "games",
            ",",
            "I",
            "want",
            "to",
            "list",
            "x-axis",
            "in",
            "descending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , School_ID FROM basketball_match ORDER BY All_Games DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.all_games@SEP@basketball_match.all_games_percent@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Give me a bar chart for total number of capacity of each openning year , order by the Y from high to low .",
        "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC'}",
        "record_name": "468@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for total number of capacity of each openning year , order by the Y from high to low .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "total",
            "number",
            "of",
            "capacity",
            "of",
            "each",
            "openning",
            "year",
            ",",
            "order",
            "by",
            "the",
            "Y",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Openning_year",
            ",",
            "SUM",
            "(",
            "Capacity",
            ")",
            "FROM",
            "cinema",
            "GROUP",
            "BY",
            "Openning_year",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Capacity",
            ")",
            "DESC"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "film.number_in_season@SEP@cinema.capacity"
    },
    {
        "nl_queries": "Show me about the distribution of Is_full_time and the average of Shop_ID , and group by attribute Is_full_time in a bar chart , show in ascending by the Y .",
        "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC'}",
        "record_name": "1346@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Is_full_time and the average of Shop_ID , and group by attribute Is_full_time in a bar chart , show in ascending by the Y .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Is_full_time",
            "and",
            "the",
            "average",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "show",
            "in",
            "ascending",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Start_from and the average of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday , and display y axis from low to high order .",
        "VQL": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC', 'binning': 'BIN Start_from BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY'}",
        "record_name": "1332@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Start_from and the average of Shop_ID , and group by attribute Is_full_time and bin start_from by weekday , and display y axis from low to high order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Start_from",
            "and",
            "the",
            "average",
            "of",
            "Shop_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "weekday",
            ",",
            "and",
            "display",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC BIN Start_from BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.start_from@SEP@shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "List the states of all votes , group states and count them in a bar chart , display y-axis in desc order please .",
        "VQL": "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC",
        "db_id": "voter_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC'}",
        "record_name": "3192@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List the states of all votes , group states and count them in a bar chart , display y-axis in desc order please .",
        "question_toks": [
            "List",
            "the",
            "states",
            "of",
            "all",
            "votes",
            ",",
            "group",
            "states",
            "and",
            "count",
            "them",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "y-axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "state",
            ",",
            "COUNT",
            "(",
            "state",
            ")",
            "FROM",
            "votes",
            "GROUP",
            "BY",
            "state",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "state",
            ")",
            "DESC"
        ],
        "choose_schema": "Table AREA_CODE_STATE, columns = [*,area_code, state]@SEP@Table VOTES, columns = [*,vote_id, phone_number, state, contestant_number, created]",
        "choose_schema_rat_link": "area_code_state.state@SEP@votes.state@SEP@votes.vote_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road , and sort in descending by the X .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3098@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road , and sort in descending by the X .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "and",
            "sort",
            "in",
            "descending",
            "by",
            "the",
            "X",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , for salary , hire_date , visualize the trend , and could you order by the x axis from high to low ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1556@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For all employees who have the letters D or S in their first name , for salary , hire_date , visualize the trend , and could you order by the x axis from high to low ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "for",
            "salary",
            ",",
            "hire_date",
            ",",
            "visualize",
            "the",
            "trend",
            ",",
            "and",
            "could",
            "you",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Plot how many minister by grouped by minister as a bar graph , and rank by the bar from high to low .",
        "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
        "db_id": "party_people",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC'}",
        "record_name": "2519@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot how many minister by grouped by minister as a bar graph , and rank by the bar from high to low .",
        "question_toks": [
            "Plot",
            "how",
            "many",
            "minister",
            "by",
            "grouped",
            "by",
            "minister",
            "as",
            "a",
            "bar",
            "graph",
            ",",
            "and",
            "rank",
            "by",
            "the",
            "bar",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Minister",
            ",",
            "COUNT",
            "(",
            "Minister",
            ")",
            "FROM",
            "party",
            "GROUP",
            "BY",
            "Minister",
            "ORDER",
            "BY",
            "Minister",
            "DESC"
        ],
        "choose_schema": "Table party, columns = [*,Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "choose_schema_rat_link": "party.minister"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , find hire_date and the amount of hire_date bin hire_date by time , and visualize them by a bar chart , and sort by the Y from low to high .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1754@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , find hire_date and the amount of hire_date bin hire_date by time , and visualize them by a bar chart , and sort by the Y from low to high .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "find",
            "hire_date",
            "and",
            "the",
            "amount",
            "of",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "Y",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "HIRE_DATE",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Plot salary by grouped by email as a bar graph",
        "VQL": "Visualize BAR SELECT EMAIL , SALARY FROM employees",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT EMAIL , SALARY FROM employees', 'binning': ''}, 'VQL': 'Visualize BAR SELECT EMAIL , SALARY FROM employees'}",
        "record_name": "1910",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Plot salary by grouped by email as a bar graph",
        "question_toks": [
            "Plot",
            "salary",
            "by",
            "grouped",
            "by",
            "email",
            "as",
            "a",
            "bar",
            "graph"
        ],
        "query": "Visualize BAR SELECT EMAIL , SALARY FROM employees",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "EMAIL",
            ",",
            "SALARY",
            "FROM",
            "employees"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.salary@SEP@employees.email"
    },
    {
        "nl_queries": "Show me a scatter plot of avg(price) and the average of score for .",
        "VQL": "Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)'}",
        "record_name": "3219",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    5,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me a scatter plot of avg(price) and the average of score for .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "scatter",
            "plot",
            "of",
            "avg(price)",
            "and",
            "the",
            "average",
            "of",
            "score",
            "for",
            "."
        ],
        "query": "Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "avg",
            "(",
            "Price",
            ")",
            ",",
            "avg",
            "(",
            "Score",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "avg",
            "(",
            "Price",
            ")"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.score"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id , and sort in ascending by the X please .",
        "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC'}",
        "record_name": "1609@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , visualize a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id , and sort in ascending by the X please .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "amount",
            "of",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "COUNT",
            "(",
            "JOB_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For each denomination , return the denomination and the count of schools with that denomination Visualize by bar chart , order X-axis in desc order .",
        "VQL": "Visualize BAR SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY Denomination DESC",
        "db_id": "school_player",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY Denomination DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY Denomination DESC'}",
        "record_name": "2724@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each denomination , return the denomination and the count of schools with that denomination Visualize by bar chart , order X-axis in desc order .",
        "question_toks": [
            "For",
            "each",
            "denomination",
            ",",
            "return",
            "the",
            "denomination",
            "and",
            "the",
            "count",
            "of",
            "schools",
            "with",
            "that",
            "denomination",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "order",
            "X-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Denomination , COUNT(*) FROM school GROUP BY Denomination ORDER BY Denomination DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Denomination",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "school",
            "GROUP",
            "BY",
            "Denomination",
            "ORDER",
            "BY",
            "Denomination",
            "DESC"
        ],
        "choose_schema": "Table school, columns = [*,School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors]",
        "choose_schema_rat_link": "school.denomination@SEP@school.school@SEP@school.school_id@SEP@school.school_colors@SEP@school_details.school_id@SEP@school_performance.school_id@SEP@school_performance.school_year@SEP@player.school_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id , and order total number from high to low order .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC\"}",
        "record_name": "1565@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , give me the comparison about the average of manager_id over the job_id , and group by attribute job_id , and order total number from high to low order .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "manager_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "order",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "MANAGER_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.manager_id@SEP@employees.manager_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Bar chart of the average of pet age from each pettype , and display in desc by the y axis please .",
        "VQL": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC",
        "db_id": "pets_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC'}",
        "record_name": "2545@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart of the average of pet age from each pettype , and display in desc by the y axis please .",
        "question_toks": [
            "Bar",
            "chart",
            "of",
            "the",
            "average",
            "of",
            "pet",
            "age",
            "from",
            "each",
            "pettype",
            ",",
            "and",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "y",
            "axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , avg(pet_age) FROM pets GROUP BY pettype ORDER BY avg(pet_age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "avg",
            "(",
            "pet_age",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype",
            "ORDER",
            "BY",
            "avg",
            "(",
            "pet_age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.pet_age@SEP@has_pet.petid@SEP@pets.petid@SEP@pets.pettype@SEP@student.age"
    },
    {
        "nl_queries": "Show the number of documents in different ending date Bin ending date by year interval and group by location code with a group line chart , display by the X-axis from high to low please .",
        "VQL": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Locaton_To DESC', 'binning': 'BIN Date_in_Locaton_To BY YEAR'}, 'VQL': 'Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR'}",
        "record_name": "779@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "year"
            ],
            "vis": 2
        },
        "question": "Show the number of documents in different ending date Bin ending date by year interval and group by location code with a group line chart , display by the X-axis from high to low please .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "different",
            "ending",
            "date",
            "Bin",
            "ending",
            "date",
            "by",
            "year",
            "interval",
            "and",
            "group",
            "by",
            "location",
            "code",
            "with",
            "a",
            "group",
            "line",
            "chart",
            ",",
            "display",
            "by",
            "the",
            "X-axis",
            "from",
            "high",
            "to",
            "low",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Locaton_To",
            ",",
            "COUNT",
            "(",
            "Date_in_Locaton_To",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "ORDER",
            "BY",
            "Date_in_Locaton_To",
            "DESC",
            "BIN",
            "Date_in_Locaton_To",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a line chart about the change of department_id over hire_date , and sort HIRE_DATE in descending order please .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC\"}",
        "record_name": "1557@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For all employees who have the letters D or S in their first name , return a line chart about the change of department_id over hire_date , and sort HIRE_DATE in descending order please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "line",
            "chart",
            "about",
            "the",
            "change",
            "of",
            "department_id",
            "over",
            "hire_date",
            ",",
            "and",
            "sort",
            "HIRE_DATE",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Return a bar chart on what are the names and prices of all products in the store ? , and order names in desc order .",
        "VQL": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC'}",
        "record_name": "2179@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on what are the names and prices of all products in the store ? , and order names in desc order .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "what",
            "are",
            "the",
            "names",
            "and",
            "prices",
            "of",
            "all",
            "products",
            "in",
            "the",
            "store",
            "?",
            ",",
            "and",
            "order",
            "names",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Name , AVG(Price) FROM products GROUP BY Name ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "AVG",
            "(",
            "Price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name@SEP@products.price"
    },
    {
        "nl_queries": "Show me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time with a line chart , and sort by the x axis in asc .",
        "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR'}",
        "record_name": "1353@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "Show me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time with a line chart , and sort by the x axis in asc .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "average",
            "of",
            "Employee_ID",
            "over",
            "Start_from",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            "and",
            "bin",
            "start_from",
            "by",
            "time",
            "with",
            "a",
            "line",
            "chart",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "AVG",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Start_from",
            "ASC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , and sort by the y-axis in descending .",
        "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC'}",
        "record_name": "3146@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , and sort by the y-axis in descending .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Neutral",
            "and",
            "All_Games_Percent",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "All_Games_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Games_Percent",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]"
    },
    {
        "nl_queries": "Show me about the distribution of Sex and the sum of Weight , and group by attribute Sex in a bar chart .",
        "VQL": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , SUM(Weight) FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex'}",
        "record_name": "382",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Sex and the sum of Weight , and group by attribute Sex in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "sum",
            "of",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "SUM",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "For each type , how many ships are there Plot them as bar chart , rank by the X-axis in ascending .",
        "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
        "db_id": "ship_mission",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC'}",
        "record_name": "2762@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each type , how many ships are there Plot them as bar chart , rank by the X-axis in ascending .",
        "question_toks": [
            "For",
            "each",
            "type",
            ",",
            "how",
            "many",
            "ships",
            "are",
            "there",
            "Plot",
            "them",
            "as",
            "bar",
            "chart",
            ",",
            "rank",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Type",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "ship",
            "GROUP",
            "BY",
            "TYPE",
            "ORDER",
            "BY",
            "Type",
            "ASC"
        ],
        "choose_schema": "Table ship, columns = [*,Ship_ID, Name, Type, Nationality, Tonnage]",
        "choose_schema_rat_link": "ship.type@SEP@mission.ship_id@SEP@ship.ship_id"
    },
    {
        "nl_queries": "Show total number of id from each nationality , and display total number in ascending order please .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC'}",
        "record_name": "2906@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show total number of id from each nationality , and display total number in ascending order please .",
        "question_toks": [
            "Show",
            "total",
            "number",
            "of",
            "id",
            "from",
            "each",
            "nationality",
            ",",
            "and",
            "display",
            "total",
            "number",
            "in",
            "ascending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.nationality"
    },
    {
        "nl_queries": "For each team , how many technicians are there , and sort from high to low by the y axis .",
        "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC",
        "db_id": "machine_repair",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC'}",
        "record_name": "2169@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For each team , how many technicians are there , and sort from high to low by the y axis .",
        "question_toks": [
            "For",
            "each",
            "team",
            ",",
            "how",
            "many",
            "technicians",
            "are",
            "there",
            ",",
            "and",
            "sort",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Team , COUNT(*) FROM technician GROUP BY Team ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "technician",
            "GROUP",
            "BY",
            "Team",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table machine, columns = [*,Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank]@SEP@Table technician, columns = [*,technician_id, Name, Team, Starting_Year, Age]",
        "choose_schema_rat_link": "machine.team@SEP@technician.team@SEP@technician.technician_id@SEP@repair_assignment.technician_id"
    },
    {
        "nl_queries": "Pie . how old is each gender , on average ?",
        "VQL": "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT gender , avg(age) FROM Person GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender'}",
        "record_name": "2472",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Pie . how old is each gender , on average ?",
        "question_toks": [
            "Pie",
            ".",
            "how",
            "old",
            "is",
            "each",
            "gender",
            ",",
            "on",
            "average",
            "?"
        ],
        "query": "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "gender",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.gender"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between Team_ID and ACC_Percent , and group by attribute All_Neutral .",
        "VQL": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral'}",
        "record_name": "3185",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between Team_ID and ACC_Percent , and group by attribute All_Neutral .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "ACC_Percent",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Neutral",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Neutral"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Find the number of professors with a PhD degree in each department Show bar chart , and I want to sort x-axis in desc order .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC\"}",
        "record_name": "529@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            31,
                            false
                        ],
                        null
                    ],
                    "\"Ph.D.\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    28,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of professors with a PhD degree in each department Show bar chart , and I want to sort x-axis in desc order .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "professors",
            "with",
            "a",
            "PhD",
            "degree",
            "in",
            "each",
            "department",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "x-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , count(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "professor",
            "WHERE",
            "prof_high_degree",
            "=",
            "'Ph",
            ".",
            "D",
            ".",
            "'",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "class.prof_num@SEP@professor.prof_office@SEP@professor.prof_extension@SEP@professor.prof_high_degree@SEP@student.prof_num@SEP@course.dept_code@SEP@department.dept_code@SEP@department.dept_name@SEP@department.dept_address@SEP@department.dept_extension@SEP@professor.dept_code@SEP@student.dept_code"
    },
    {
        "nl_queries": "Give me the comparison about ID over the meter_400 by a bar chart , show in descending by the ID .",
        "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC'}",
        "record_name": "2918@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about ID over the meter_400 by a bar chart , show in descending by the ID .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "ID",
            "over",
            "the",
            "meter_400",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "show",
            "in",
            "descending",
            "by",
            "the",
            "ID",
            "."
        ],
        "query": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_400",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "ID",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1594",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by weekday .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Return a bar chart on how many rooms have king beds ? Report the number for each decor type , and rank from high to low by the the total number .",
        "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC",
        "db_id": "inn_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC'}",
        "record_name": "1975@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"King\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart on how many rooms have king beds ? Report the number for each decor type , and rank from high to low by the the total number .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "on",
            "how",
            "many",
            "rooms",
            "have",
            "king",
            "beds",
            "?",
            "Report",
            "the",
            "number",
            "for",
            "each",
            "decor",
            "type",
            ",",
            "and",
            "rank",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "the",
            "total",
            "number",
            "."
        ],
        "query": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "WHERE",
            "bedType",
            "=",
            "\"King\"",
            "GROUP",
            "BY",
            "decor",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds@SEP@rooms.bedtype@SEP@rooms.decor"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of All_Home and the average of School_ID , and group by attribute All_Home , order by the total number from high to low .",
        "VQL": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) DESC'}",
        "record_name": "3105@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of All_Home and the average of School_ID , and group by attribute All_Home , order by the total number from high to low .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Home",
            "and",
            "the",
            "average",
            "of",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Home",
            ",",
            "order",
            "by",
            "the",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "AVG",
            "(",
            "School_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "School_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Show the number of companies whose headquarters are not from USA fpr each main industry in a pie chart .",
        "VQL": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': \"SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\", 'binning': ''}, 'VQL': \"Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry\"}",
        "record_name": "1505",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the number of companies whose headquarters are not from USA fpr each main industry in a pie chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "companies",
            "whose",
            "headquarters",
            "are",
            "not",
            "from",
            "USA",
            "fpr",
            "each",
            "main",
            "industry",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Main_Industry",
            ",",
            "COUNT",
            "(",
            "Main_Industry",
            ")",
            "FROM",
            "company",
            "WHERE",
            "headquarters",
            "!",
            "=",
            "'USA'",
            "GROUP",
            "BY",
            "Main_Industry"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.main_industry@SEP@company.company@SEP@company.company_id@SEP@station_company.company_id@SEP@company.headquarters"
    },
    {
        "nl_queries": "Visualize a bar chart for what are the nationalities and their average ages of journalists ?",
        "VQL": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
        "db_id": "news_report",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality'}",
        "record_name": "2488",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what are the nationalities and their average ages of journalists ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "nationalities",
            "and",
            "their",
            "average",
            "ages",
            "of",
            "journalists",
            "?"
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "Age",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.age@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "What is the number of singers for each country ? Show a bar chart .",
        "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
        "db_id": "concert_singer",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(Country) FROM singer GROUP BY Country', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country'}",
        "record_name": "693",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of singers for each country ? Show a bar chart .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "singers",
            "for",
            "each",
            "country",
            "?",
            "Show",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "Country",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Country"
        ],
        "choose_schema": "Table singer, columns = [*,Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "choose_schema_rat_link": "singer.singer_id@SEP@singer_in_concert.singer_id@SEP@singer.country"
    },
    {
        "nl_queries": "Give me line charts of worldwide gross the number of date in location from over year date in location from by major genres Location_Code",
        "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code', 'binning': 'BIN Date_in_Location_From BY YEAR'}, 'VQL': 'Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR'}",
        "record_name": "776",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                26,
                "year"
            ],
            "vis": 2
        },
        "question": "Give me line charts of worldwide gross the number of date in location from over year date in location from by major genres Location_Code",
        "question_toks": [
            "Give",
            "me",
            "line",
            "charts",
            "of",
            "worldwide",
            "gross",
            "the",
            "number",
            "of",
            "date",
            "in",
            "location",
            "from",
            "over",
            "year",
            "date",
            "in",
            "location",
            "from",
            "by",
            "major",
            "genres",
            "Location_Code"
        ],
        "query": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Date_in_Location_From",
            ",",
            "COUNT",
            "(",
            "Date_in_Location_From",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "Location_Code",
            "BIN",
            "Date_in_Location_From",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to@SEP@all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.location_code"
    },
    {
        "nl_queries": "What are the number of the dates with a maximum temperature higher than 85 ? , and sort by the the number of date in desc .",
        "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
        "db_id": "bike_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC', 'binning': 'BIN date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY'}",
        "record_name": "315@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    85.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                23,
                "weekday"
            ],
            "vis": 0
        },
        "question": "What are the number of the dates with a maximum temperature higher than 85 ? , and sort by the the number of date in desc .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "the",
            "dates",
            "with",
            "a",
            "maximum",
            "temperature",
            "higher",
            "than",
            "85",
            "?",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "the",
            "number",
            "of",
            "date",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE max_temperature_f > 85  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "COUNT",
            "(",
            "date",
            ")",
            "FROM",
            "weather",
            "WHERE",
            "max_temperature_f",
            ">",
            "85",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date",
            ")",
            "DESC",
            "BIN",
            "date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "What is average age for different job title . Visualize by bar chart .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "db_id": "network_2",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job'}",
        "record_name": "2459",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is average age for different job title . Visualize by bar chart .",
        "question_toks": [
            "What",
            "is",
            "average",
            "age",
            "for",
            "different",
            "job",
            "title",
            ".",
            "Visualize",
            "by",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "What is the code of each location and the number of documents in that location Show bar chart , and could you show bar in desc order ?",
        "VQL": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC'}",
        "record_name": "791@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the code of each location and the number of documents in that location Show bar chart , and could you show bar in desc order ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "code",
            "of",
            "each",
            "location",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "that",
            "location",
            "Show",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "show",
            "bar",
            "in",
            "desc",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "location_code",
            "ORDER",
            "BY",
            "Location_Code",
            "DESC"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of salary over hire_date , and could you list from high to low by the X ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC'}",
        "record_name": "1616@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of salary over hire_date , and could you list from high to low by the X ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "trend",
            "of",
            "salary",
            "over",
            "hire_date",
            ",",
            "and",
            "could",
            "you",
            "list",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "X",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "List each language and the number of TV Channels using it in a bar chart , and show by the bars from low to high .",
        "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
        "db_id": "tvshow",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC'}",
        "record_name": "3058@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List each language and the number of TV Channels using it in a bar chart , and show by the bars from low to high .",
        "question_toks": [
            "List",
            "each",
            "language",
            "and",
            "the",
            "number",
            "of",
            "TV",
            "Channels",
            "using",
            "it",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "show",
            "by",
            "the",
            "bars",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "TV_Channel",
            "GROUP",
            "BY",
            "LANGUAGE",
            "ORDER",
            "BY",
            "Language",
            "ASC"
        ],
        "choose_schema": "Table TV_Channel, columns = [*,id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "choose_schema_rat_link": "tv_channel.language@SEP@tv_series.channel@SEP@cartoon.channel"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of All_Neutral and Team_ID .",
        "VQL": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , Team_ID FROM basketball_match', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match'}",
        "record_name": "3118",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of All_Neutral and Team_ID .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Neutral",
            "and",
            "Team_ID",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a scatter chart shows the correlation between employee_id and department_id .",
        "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40'}",
        "record_name": "1620",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a scatter chart shows the correlation between employee_id and department_id .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "employee_id",
            "and",
            "department_id",
            "."
        ],
        "query": "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "EMPLOYEE_ID",
            ",",
            "DEPARTMENT_ID",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality'}",
        "record_name": "2906",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me the trend about manager_id over hire_date with a line chart .",
        "VQL": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': \"SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'\", 'binning': ''}, 'VQL': \"Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'\"}",
        "record_name": "1773",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees who was hired before 2002-06-21 , show me the trend about manager_id over hire_date with a line chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "the",
            "trend",
            "about",
            "manager_id",
            "over",
            "hire_date",
            "with",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "MANAGER_ID",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of meter_200 and the average of ID , and group by attribute meter_200 .",
        "VQL": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200'}",
        "record_name": "2911",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of meter_200 and the average of ID , and group by attribute meter_200 .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "average",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , AVG(ID) FROM swimmer GROUP BY meter_200",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "AVG",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Bar chart x axis sex y axis how many sex , and order in desc by the how many sex .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC'}",
        "record_name": "376@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis sex y axis how many sex , and order in desc by the how many sex .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "sex",
            "y",
            "axis",
            "how",
            "many",
            "sex",
            ",",
            "and",
            "order",
            "in",
            "desc",
            "by",
            "the",
            "how",
            "many",
            "sex",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Sex",
            ")",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID\"}",
        "record_name": "1566",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the sum of department_id , and group by attribute job_id in a bar chart .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "department_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , and I want to rank by the how many nationality from high to low .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC'}",
        "record_name": "2928@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of Nationality and the amount of Nationality , and group by attribute Nationality , and I want to rank by the how many nationality from high to low .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "amount",
            "of",
            "Nationality",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "by",
            "the",
            "how",
            "many",
            "nationality",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality"
    },
    {
        "nl_queries": "count yearid for visualizing a line chart .",
        "VQL": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
        "db_id": "baseball_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT yearid , COUNT(yearid) FROM hall_of_fame', 'binning': 'BIN yearid BY YEAR'}, 'VQL': 'Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR'}",
        "record_name": "157",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        12
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                145,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                145,
                "year"
            ],
            "vis": 2
        },
        "question": "count yearid for visualizing a line chart .",
        "question_toks": [
            "count",
            "yearid",
            "for",
            "visualizing",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT yearid , COUNT(yearid) FROM hall_of_fame BIN yearid BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "yearid",
            ",",
            "COUNT",
            "(",
            "yearid",
            ")",
            "FROM",
            "hall_of_fame",
            "BIN",
            "yearid",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table all_star, columns = [*,player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]@SEP@Table appearances, columns = [*,year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]@SEP@Table manager_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table player_award, columns = [*,player_id, award_id, year, league_id, tie, notes]@SEP@Table manager_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table player_award_vote, columns = [*,award_id, year, league_id, player_id, points_won, points_max, votes_first]@SEP@Table batting, columns = [*,player_id, year, stint, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table batting_postseason, columns = [*,year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]@SEP@Table player_college, columns = [*,player_id, college_id, year]@SEP@Table fielding, columns = [*,player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]@SEP@Table fielding_outfield, columns = [*,player_id, year, stint, glf, gcf, grf]@SEP@Table fielding_postseason, columns = [*,player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]@SEP@Table hall_of_fame, columns = [*,player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]@SEP@Table home_game, columns = [*,year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]@SEP@Table manager, columns = [*,player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]@SEP@Table manager_half, columns = [*,player_id, year, team_id, league_id, inseason, half, g, w, l, rank]@SEP@Table pitching, columns = [*,player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table pitching_postseason, columns = [*,player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]@SEP@Table salary, columns = [*,year, team_id, league_id, player_id, salary]@SEP@Table postseason, columns = [*,year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]@SEP@Table team, columns = [*,year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]@SEP@Table team_half, columns = [*,year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "choose_schema_rat_link": "hall_of_fame.yearid@SEP@fielding.a@SEP@fielding_postseason.a"
    },
    {
        "nl_queries": "Draw a bar chart of destination versus the total number",
        "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "db_id": "flight_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT destination , count(*) FROM Flight GROUP BY destination', 'binning': ''}, 'VQL': 'Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination'}",
        "record_name": "1408",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of destination versus the total number",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "destination",
            "versus",
            "the",
            "total",
            "number"
        ],
        "query": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "destination",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination"
        ],
        "choose_schema": "Table flight, columns = [*,flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "choose_schema_rat_link": "flight.destination"
    },
    {
        "nl_queries": "Give me the comparison about School_ID over the All_Neutral by a bar chart , and I want to display bar in ascending order .",
        "VQL": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral ASC'}",
        "record_name": "3119@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about School_ID over the All_Neutral by a bar chart , and I want to display bar in ascending order .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "School_ID",
            "over",
            "the",
            "All_Neutral",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "bar",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Neutral , School_ID FROM basketball_match ORDER BY All_Neutral ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Neutral",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Neutral",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Visualize a bar chart for how much does each charge type costs ? List both charge type and amount , and rank charge_type in asc order .",
        "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "db_id": "dog_kennels",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC'}",
        "record_name": "1174@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for how much does each charge type costs ? List both charge type and amount , and rank charge_type in asc order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "much",
            "does",
            "each",
            "charge",
            "type",
            "costs",
            "?",
            "List",
            "both",
            "charge",
            "type",
            "and",
            "amount",
            ",",
            "and",
            "rank",
            "charge_type",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges",
            "ORDER",
            "BY",
            "charge_type",
            "ASC"
        ],
        "choose_schema": "Table Charges, columns = [*,charge_id, charge_type, charge_amount]",
        "choose_schema_rat_link": "charges.charge_type@SEP@charges.charge_id@SEP@charges.charge_amount@SEP@treatments.cost_of_treatment"
    },
    {
        "nl_queries": "Give me the trend about the number of church opening in each year .",
        "VQL": "Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date",
        "db_id": "wedding",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date', 'binning': ''}, 'VQL': 'Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date'}",
        "record_name": "3210",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "Give me the trend about the number of church opening in each year .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "trend",
            "about",
            "the",
            "number",
            "of",
            "church",
            "opening",
            "in",
            "each",
            "year",
            "."
        ],
        "query": "Visualize LINE SELECT Open_Date , COUNT(Open_Date) FROM Church GROUP BY Open_Date",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Open_Date",
            ",",
            "COUNT",
            "(",
            "Open_Date",
            ")",
            "FROM",
            "Church",
            "GROUP",
            "BY",
            "Open_Date"
        ],
        "choose_schema": "Table church, columns = [*,Church_ID, Name, Organized_by, Open_Date, Continuation_of]",
        "choose_schema_rat_link": "church.church_id@SEP@wedding.church_id@SEP@wedding.year"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id , and could you list by the Y-axis from high to low ?",
        "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC\"}",
        "record_name": "1568@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the amount of job_id , and group by attribute job_id , and could you list by the Y-axis from high to low ?",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "amount",
            "of",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "Y-axis",
            "from",
            "high",
            "to",
            "low",
            "?"
        ],
        "query": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "COUNT",
            "(",
            "JOB_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "JOB_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Can you draw the trend of the average of capacity over the openning year ? , display X from low to high order .",
        "VQL": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC', 'binning': 'BIN Openning_year BY YEAR'}, 'VQL': 'Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR'}",
        "record_name": "471@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                10,
                "year"
            ],
            "vis": 2
        },
        "question": "Can you draw the trend of the average of capacity over the openning year ? , display X from low to high order .",
        "question_toks": [
            "Can",
            "you",
            "draw",
            "the",
            "trend",
            "of",
            "the",
            "average",
            "of",
            "capacity",
            "over",
            "the",
            "openning",
            "year",
            "?",
            ",",
            "display",
            "X",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Openning_year",
            ",",
            "AVG",
            "(",
            "Capacity",
            ")",
            "FROM",
            "cinema",
            "ORDER",
            "BY",
            "Openning_year",
            "ASC",
            "BIN",
            "Openning_year",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "cinema.capacity"
    },
    {
        "nl_queries": "Show the average price of hotels for each star rating code in a scatter chart",
        "VQL": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "db_id": "cre_Theme_park",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code'}",
        "record_name": "896",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show the average price of hotels for each star rating code in a scatter chart",
        "question_toks": [
            "Show",
            "the",
            "average",
            "price",
            "of",
            "hotels",
            "for",
            "each",
            "star",
            "rating",
            "code",
            "in",
            "a",
            "scatter",
            "chart"
        ],
        "query": "Visualize SCATTER SELECT star_rating_code , avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "star_rating_code",
            ",",
            "avg",
            "(",
            "price_range",
            ")",
            "FROM",
            "HOTELS",
            "GROUP",
            "BY",
            "star_rating_code"
        ],
        "choose_schema": "Table Ref_Hotel_Star_Ratings, columns = [*,star_rating_code, star_rating_description]@SEP@Table Hotels, columns = [*,hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]",
        "choose_schema_rat_link": "ref_hotel_star_ratings.star_rating_code@SEP@hotels.star_rating_code@SEP@ref_hotel_star_ratings.star_rating_description@SEP@hotels.price_range@SEP@hotels.hotel_id"
    },
    {
        "nl_queries": "Give me the comparison about author_id over the password by a bar chart .",
        "VQL": "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1261",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about author_id over the password by a bar chart .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "author_id",
            "over",
            "the",
            "password",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "password",
            ",",
            "author_id",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]@SEP@Table Courses, columns = [*,course_id, author_id, subject_id, course_name, course_description]",
        "choose_schema_rat_link": "course_authors_and_tutors.author_id@SEP@course_authors_and_tutors.author_tutor_atb@SEP@courses.author_id@SEP@course_authors_and_tutors.password@SEP@students.password"
    },
    {
        "nl_queries": "Show how many date departed from each date departed , and sort from high to low by the y axis .",
        "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC'}",
        "record_name": "1182@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show how many date departed from each date departed , and sort from high to low by the y axis .",
        "question_toks": [
            "Show",
            "how",
            "many",
            "date",
            "departed",
            "from",
            "each",
            "date",
            "departed",
            ",",
            "and",
            "sort",
            "from",
            "high",
            "to",
            "low",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_departed",
            ",",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "FROM",
            "Dogs",
            "GROUP",
            "BY",
            "date_departed",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "date_departed",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.date_departed@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "Give me a bar chart for the total number of each budget type code",
        "VQL": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code'}",
        "record_name": "803",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for the total number of each budget type code",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "total",
            "number",
            "of",
            "each",
            "budget",
            "type",
            "code"
        ],
        "query": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Budget_Type_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents_with_expenses",
            "GROUP",
            "BY",
            "budget_type_code"
        ],
        "choose_schema": "Table Ref_Budget_Codes, columns = [*,Budget_Type_Code, Budget_Type_Description]@SEP@Table Documents_with_Expenses, columns = [*,Document_ID, Budget_Type_Code, Document_Details]",
        "choose_schema_rat_link": "documents_with_expenses.budget_type_code"
    },
    {
        "nl_queries": "Show sum team id from each all home , and could you show by the total number in desc ?",
        "VQL": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC'}",
        "record_name": "3102@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show sum team id from each all home , and could you show by the total number in desc ?",
        "question_toks": [
            "Show",
            "sum",
            "team",
            "id",
            "from",
            "each",
            "all",
            "home",
            ",",
            "and",
            "could",
            "you",
            "show",
            "by",
            "the",
            "total",
            "number",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Home",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.all_home@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "A bar chart shows the distribution of Team_Name and ACC_Percent , and list X in asc order please .",
        "VQL": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name ASC'}",
        "record_name": "3132@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of Team_Name and ACC_Percent , and list X in asc order please .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "Team_Name",
            "and",
            "ACC_Percent",
            ",",
            "and",
            "list",
            "X",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Team_Name , ACC_Percent FROM basketball_match ORDER BY Team_Name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team_Name",
            ",",
            "ACC_Percent",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_Name",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "List document type codes and the number of documents in each code in a pie chart .",
        "VQL": "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
        "db_id": "cre_Docs_and_Epenses",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code'}",
        "record_name": "826",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "List document type codes and the number of documents in each code in a pie chart .",
        "question_toks": [
            "List",
            "document",
            "type",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "each",
            "code",
            "in",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Document_Type_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Documents",
            "GROUP",
            "BY",
            "document_type_code"
        ],
        "choose_schema": "Table Ref_Document_Types, columns = [*,Document_Type_Code, Document_Type_Name, Document_Type_Description]@SEP@Table Documents, columns = [*,Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]",
        "choose_schema_rat_link": "documents.document_type_code@SEP@documents.document_id@SEP@documents.document_date@SEP@documents.document_name@SEP@documents.document_description@SEP@documents_with_expenses.document_id@SEP@documents_with_expenses.document_details"
    },
    {
        "nl_queries": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart .",
        "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality'}",
        "record_name": "2906",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "Nationality",
            "and",
            "the",
            "sum",
            "of",
            "ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "SUM",
            "(",
            "ID",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH'}",
        "record_name": "1582",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "sum",
            "of",
            "employee_id",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Visualize a bar chart , count and group by nationality from the journalist table , list X in descending order please .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
        "db_id": "news_report",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC'}",
        "record_name": "2486@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart , count and group by nationality from the journalist table , list X in descending order please .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            ",",
            "count",
            "and",
            "group",
            "by",
            "nationality",
            "from",
            "the",
            "journalist",
            "table",
            ",",
            "list",
            "X",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "Nationality",
            ")",
            "FROM",
            "journalist",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "DESC"
        ],
        "choose_schema": "Table journalist, columns = [*,journalist_ID, Name, Nationality, Age, Years_working]",
        "choose_schema_rat_link": "journalist.nationality@SEP@journalist.journalist_id@SEP@news_report.journalist_id"
    },
    {
        "nl_queries": "List the number of dogs arrived in each day with a bar chart that bins arrived date by weekday .",
        "VQL": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs BIN date_arrived BY WEEKDAY",
        "db_id": "dog_kennels",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_arrived , COUNT(date_arrived) FROM Dogs', 'binning': 'BIN date_arrived BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs BIN date_arrived BY WEEKDAY'}",
        "record_name": "1184",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                30,
                "weekday"
            ],
            "vis": 0
        },
        "question": "List the number of dogs arrived in each day with a bar chart that bins arrived date by weekday .",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "dogs",
            "arrived",
            "in",
            "each",
            "day",
            "with",
            "a",
            "bar",
            "chart",
            "that",
            "bins",
            "arrived",
            "date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT date_arrived , COUNT(date_arrived) FROM Dogs BIN date_arrived BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_arrived",
            ",",
            "COUNT",
            "(",
            "date_arrived",
            ")",
            "FROM",
            "Dogs",
            "BIN",
            "date_arrived",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.date_of_birth@SEP@dogs.date_arrived@SEP@dogs.date_adopted@SEP@dogs.date_departed@SEP@treatments.date_of_treatment"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 , order bar from high to low order .",
        "VQL": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC'}",
        "record_name": "2912@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of meter_200 and the sum of meter_100 , and group by attribute meter_200 , order bar from high to low order .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_200",
            "and",
            "the",
            "sum",
            "of",
            "meter_100",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "meter_200",
            ",",
            "order",
            "bar",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_200 , SUM(meter_100) FROM swimmer GROUP BY meter_200 ORDER BY meter_200 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_200",
            ",",
            "SUM",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "meter_200",
            "ORDER",
            "BY",
            "meter_200",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , find job_id and the average of employee_id , and group by attribute job_id , and visualize them by a bar chart , sort total number from high to low order .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\"}",
        "record_name": "1561@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , find job_id and the average of employee_id , and group by attribute job_id , and visualize them by a bar chart , sort total number from high to low order .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "find",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "sort",
            "total",
            "number",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between author_id and gender_mf .",
        "VQL": "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "db_id": "e_learning",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name'}",
        "record_name": "1255",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between author_id and gender_mf .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "author_id",
            "and",
            "gender_mf",
            "."
        ],
        "query": "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "author_id",
            ",",
            "gender_mf",
            "FROM",
            "Course_Authors_and_Tutors",
            "ORDER",
            "BY",
            "personal_name"
        ],
        "choose_schema": "Table Course_Authors_and_Tutors, columns = [*,author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]@SEP@Table Students, columns = [*,student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]@SEP@Table Courses, columns = [*,course_id, author_id, subject_id, course_name, course_description]",
        "choose_schema_rat_link": "course_authors_and_tutors.author_id@SEP@course_authors_and_tutors.author_tutor_atb@SEP@courses.author_id@SEP@course_authors_and_tutors.gender_mf"
    },
    {
        "nl_queries": "Show different locations and the number of performances at each location Visualize by bar chart , and display by the Y-axis in descending .",
        "VQL": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC",
        "db_id": "performance_attendance",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC'}",
        "record_name": "2529@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different locations and the number of performances at each location Visualize by bar chart , and display by the Y-axis in descending .",
        "question_toks": [
            "Show",
            "different",
            "locations",
            "and",
            "the",
            "number",
            "of",
            "performances",
            "at",
            "each",
            "location",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "by",
            "the",
            "Y-axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(*) FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "performance",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table performance, columns = [*,Performance_ID, Date, Host, Location, Attendance]",
        "choose_schema_rat_link": "performance.location@SEP@performance.performance_id@SEP@member_attendance.performance_id"
    },
    {
        "nl_queries": "What is the number of locations of the wrestlers ? Visualize by a bar chart , order in asc by the y axis .",
        "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC",
        "db_id": "wrestler",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC'}",
        "record_name": "3281@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of locations of the wrestlers ? Visualize by a bar chart , order in asc by the y axis .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "locations",
            "of",
            "the",
            "wrestlers",
            "?",
            "Visualize",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "y",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Location , COUNT(Location) FROM wrestler GROUP BY Location ORDER BY COUNT(Location) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "COUNT",
            "(",
            "Location",
            ")",
            "FROM",
            "wrestler",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Location",
            ")",
            "ASC"
        ],
        "choose_schema": "Table wrestler, columns = [*,Wrestler_ID, Name, Reign, Days_held, Location, Event]",
        "choose_schema_rat_link": "wrestler.location@SEP@wrestler.wrestler_id@SEP@elimination.wrestler_id"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , display by the bars in asc please .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC\"}",
        "record_name": "1562@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , return a bar chart about the distribution of job_id and the sum of salary , and group by attribute job_id , display by the bars in asc please .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "salary",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "display",
            "by",
            "the",
            "bars",
            "in",
            "asc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "ASC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@employees.salary"
    },
    {
        "nl_queries": "A bar chart shows the distribution of Sex and the average of Weight , and group by attribute Sex , and list y axis from high to low order .",
        "VQL": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) DESC'}",
        "record_name": "383@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart shows the distribution of Sex and the average of Weight , and group by attribute Sex , and list y axis from high to low order .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "shows",
            "the",
            "distribution",
            "of",
            "Sex",
            "and",
            "the",
            "average",
            "of",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            ",",
            "and",
            "list",
            "y",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , AVG(Weight) FROM people GROUP BY Sex ORDER BY AVG(Weight) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "AVG",
            "(",
            "Weight",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Weight",
            ")",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex@SEP@people.weight"
    },
    {
        "nl_queries": "Draw a bar chart of dept code versus the total number , rank by the bar in descending .",
        "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "db_id": "college_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC'}",
        "record_name": "564@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    41,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of dept code versus the total number , rank by the bar in descending .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "dept",
            "code",
            "versus",
            "the",
            "total",
            "number",
            ",",
            "rank",
            "by",
            "the",
            "bar",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "DEPT_CODE",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_code",
            "ORDER",
            "BY",
            "DEPT_CODE",
            "DESC"
        ],
        "choose_schema": "Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "choose_schema_rat_link": "Table CLASS, columns = [*,CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]@SEP@Table COURSE, columns = [*,CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]@SEP@Table DEPARTMENT, columns = [*,DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]@SEP@Table EMPLOYEE, columns = [*,EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]@SEP@Table ENROLL, columns = [*,CLASS_CODE, STU_NUM, ENROLL_GRADE]@SEP@Table PROFESSOR, columns = [*,EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]@SEP@Table STUDENT, columns = [*,STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]"
    },
    {
        "nl_queries": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , and could you sort in ascending by the x-axis please ?",
        "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC",
        "db_id": "customers_campaigns_ecommerce",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC'}",
        "record_name": "1015@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all distinct product categories along with the number of mailshots in each category Visualize by bar chart , and could you sort in ascending by the x-axis please ?",
        "question_toks": [
            "Show",
            "all",
            "distinct",
            "product",
            "categories",
            "along",
            "with",
            "the",
            "number",
            "of",
            "mailshots",
            "in",
            "each",
            "category",
            "Visualize",
            "by",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "x-axis",
            "please",
            "?"
        ],
        "query": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "product_category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_campaigns",
            "GROUP",
            "BY",
            "product_category",
            "ORDER",
            "BY",
            "product_category",
            "ASC"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_category, product_name]@SEP@Table Mailshot_Campaigns, columns = [*,mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]",
        "choose_schema_rat_link": "products.product_category@SEP@mailshot_campaigns.product_category@SEP@products.product_id@SEP@products.product_name@SEP@order_items.product_id@SEP@mailshot_campaigns.mailshot_id@SEP@mailshot_campaigns.mailshot_name@SEP@mailshot_campaigns.mailshot_start_date@SEP@mailshot_campaigns.mailshot_end_date@SEP@mailshot_customers.mailshot_id@SEP@mailshot_customers.mailshot_customer_date"
    },
    {
        "nl_queries": "Draw a scatter chart for what are the ids and durations of the trips with the top 3 durations ?",
        "VQL": "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3'}",
        "record_name": "309",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Draw a scatter chart for what are the ids and durations of the trips with the top 3 durations ?",
        "question_toks": [
            "Draw",
            "a",
            "scatter",
            "chart",
            "for",
            "what",
            "are",
            "the",
            "ids",
            "and",
            "durations",
            "of",
            "the",
            "trips",
            "with",
            "the",
            "top",
            "3",
            "durations",
            "?"
        ],
        "query": "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "id",
            ",",
            "duration",
            "FROM",
            "trip",
            "ORDER",
            "BY",
            "duration",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table station, columns = [*,id, name, lat, long, dock_count, city, installation_date]@SEP@Table trip, columns = [*,id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code]",
        "choose_schema_rat_link": "station.id@SEP@trip.id@SEP@trip.duration"
    },
    {
        "nl_queries": "Return a bar chart showing the minimum room count of apartments in different type , and I want to show by the bars in descending .",
        "VQL": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY apt_type_code DESC",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY apt_type_code DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY apt_type_code DESC'}",
        "record_name": "96@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart showing the minimum room count of apartments in different type , and I want to show by the bars in descending .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "minimum",
            "room",
            "count",
            "of",
            "apartments",
            "in",
            "different",
            "type",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "bars",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code ORDER BY apt_type_code DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "apt_type_code",
            ",",
            "min",
            "(",
            "room_count",
            ")",
            "FROM",
            "Apartments",
            "GROUP",
            "BY",
            "apt_type_code",
            "ORDER",
            "BY",
            "apt_type_code",
            "DESC"
        ],
        "choose_schema": "Table Apartments, columns = [*,apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "choose_schema_rat_link": "apartments.room_count@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_booking_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@view_unit_status.apt_booking_id"
    },
    {
        "nl_queries": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and manufacturer , order in descending by the X-axis .",
        "VQL": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC'}",
        "record_name": "2192@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    60.0,
                    120.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those products with a price between 60 and 120 , visualize a bar chart about the distribution of name and manufacturer , order in descending by the X-axis .",
        "question_toks": [
            "For",
            "those",
            "products",
            "with",
            "a",
            "price",
            "between",
            "60",
            "and",
            "120",
            ",",
            "visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "name",
            "and",
            "manufacturer",
            ",",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Manufacturer",
            "FROM",
            "products",
            "WHERE",
            "price",
            "BETWEEN",
            "60",
            "AND",
            "120",
            "ORDER",
            "BY",
            "Name",
            "DESC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "products.price@SEP@manufacturers.name@SEP@products.name@SEP@products.manufacturer"
    },
    {
        "nl_queries": "How many apartment bookings in each year ? Show me a bar chart binning booking end date by year , rank in ascending by the Y .",
        "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR",
        "db_id": "apartment_rentals",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC', 'binning': 'BIN booking_end_date BY YEAR'}, 'VQL': 'Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR'}",
        "record_name": "83@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            27,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "year"
            ],
            "vis": 0
        },
        "question": "How many apartment bookings in each year ? Show me a bar chart binning booking end date by year , rank in ascending by the Y .",
        "question_toks": [
            "How",
            "many",
            "apartment",
            "bookings",
            "in",
            "each",
            "year",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "binning",
            "booking",
            "end",
            "date",
            "by",
            "year",
            ",",
            "rank",
            "in",
            "ascending",
            "by",
            "the",
            "Y",
            "."
        ],
        "query": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_end_date) ASC BIN booking_end_date BY YEAR",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_end_date",
            ",",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "ASC",
            "BIN",
            "booking_end_date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.apt_booking_id@SEP@view_unit_status.apt_booking_id@SEP@apartments.apt_id@SEP@apartments.apt_type_code@SEP@apartments.apt_number@SEP@apartment_facilities.apt_id@SEP@apartment_bookings.apt_id@SEP@view_unit_status.apt_id@SEP@guests.date_of_birth"
    },
    {
        "nl_queries": "What is the correlation between the average price and the score of wines of each appellation ?",
        "VQL": "Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)'}",
        "record_name": "3219",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    5,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the correlation between the average price and the score of wines of each appellation ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "correlation",
            "between",
            "the",
            "average",
            "price",
            "and",
            "the",
            "score",
            "of",
            "wines",
            "of",
            "each",
            "appellation",
            "?"
        ],
        "query": "Visualize SCATTER SELECT avg(Price) , avg(Score) FROM WINE GROUP BY avg(Price)",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "avg",
            "(",
            "Price",
            ")",
            ",",
            "avg",
            "(",
            "Score",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "avg",
            "(",
            "Price",
            ")"
        ],
        "choose_schema": "Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "wine.price@SEP@wine.score"
    },
    {
        "nl_queries": "Bar chart x axis booking end date y axis the number of booking end date",
        "VQL": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY WEEKDAY",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings', 'binning': 'BIN booking_end_date BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY WEEKDAY'}",
        "record_name": "84",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                27,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Bar chart x axis booking end date y axis the number of booking end date",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "booking",
            "end",
            "date",
            "y",
            "axis",
            "the",
            "number",
            "of",
            "booking",
            "end",
            "date"
        ],
        "query": "Visualize BAR SELECT booking_end_date , COUNT(booking_end_date) FROM Apartment_Bookings BIN booking_end_date BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "booking_end_date",
            ",",
            "COUNT",
            "(",
            "booking_end_date",
            ")",
            "FROM",
            "Apartment_Bookings",
            "BIN",
            "booking_end_date",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.booking_end_date@SEP@guests.date_of_birth@SEP@apartment_bookings.booking_status_code@SEP@apartment_bookings.booking_start_date"
    },
    {
        "nl_queries": "Show the number of accounts opened in each day . Bin the account open day by weekday and group by other account details in a stacked bar chart .",
        "VQL": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details BIN date_account_opened BY WEEKDAY",
        "db_id": "customers_and_invoices",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details', 'binning': 'BIN date_account_opened BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details BIN date_account_opened BY WEEKDAY'}",
        "record_name": "927",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                22,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Show the number of accounts opened in each day . Bin the account open day by weekday and group by other account details in a stacked bar chart .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "accounts",
            "opened",
            "in",
            "each",
            "day",
            ".",
            "Bin",
            "the",
            "account",
            "open",
            "day",
            "by",
            "weekday",
            "and",
            "group",
            "by",
            "other",
            "account",
            "details",
            "in",
            "a",
            "stacked",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT date_account_opened , COUNT(date_account_opened) FROM Accounts GROUP BY other_account_details BIN date_account_opened BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date_account_opened",
            ",",
            "COUNT",
            "(",
            "date_account_opened",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "other_account_details",
            "BIN",
            "date_account_opened",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table Accounts, columns = [*,account_id, customer_id, date_account_opened, account_name, other_account_details]",
        "choose_schema_rat_link": "accounts.other_account_details@SEP@accounts.account_id@SEP@accounts.account_name@SEP@financial_transactions.account_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID\"}",
        "record_name": "1781",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "department_id",
            "over",
            "the",
            "job_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of employee_id over hire_date , could you order HIRE_DATE in descending order please ?",
        "VQL": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC', 'binning': ''}, 'VQL': 'Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC'}",
        "record_name": "1598@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 2
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , a line chart shows the trend of employee_id over hire_date , could you order HIRE_DATE in descending order please ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "a",
            "line",
            "chart",
            "shows",
            "the",
            "trend",
            "of",
            "employee_id",
            "over",
            "hire_date",
            ",",
            "could",
            "you",
            "order",
            "HIRE_DATE",
            "in",
            "descending",
            "order",
            "please",
            "?"
        ],
        "query": "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "HIRE_DATE",
            ",",
            "EMPLOYEE_ID",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "HIRE_DATE",
            "DESC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "Create a bar chart showing maximal revenue across name , and sort in ascending by the y-axis .",
        "VQL": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC'}",
        "record_name": "2174@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            1,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Create a bar chart showing maximal revenue across name , and sort in ascending by the y-axis .",
        "question_toks": [
            "Create",
            "a",
            "bar",
            "chart",
            "showing",
            "maximal",
            "revenue",
            "across",
            "name",
            ",",
            "and",
            "sort",
            "in",
            "ascending",
            "by",
            "the",
            "y-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "max",
            "(",
            "revenue",
            ")",
            "FROM",
            "manufacturers",
            "GROUP",
            "BY",
            "Headquarter",
            "ORDER",
            "BY",
            "max",
            "(",
            "revenue",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.revenue@SEP@manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "Draw a bar chart of name versus height",
        "VQL": "Visualize BAR SELECT Name , Height FROM people",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , Height FROM people', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , Height FROM people'}",
        "record_name": "394",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of name versus height",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "name",
            "versus",
            "height"
        ],
        "query": "Visualize BAR SELECT Name , Height FROM people",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "Height",
            "FROM",
            "people"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.name@SEP@people.height"
    },
    {
        "nl_queries": "Show me salary by last name in a histogram , display X-axis in ascending order .",
        "VQL": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC'}",
        "record_name": "1903@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me salary by last name in a histogram , display X-axis in ascending order .",
        "question_toks": [
            "Show",
            "me",
            "salary",
            "by",
            "last",
            "name",
            "in",
            "a",
            "histogram",
            ",",
            "display",
            "X-axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY LAST_NAME ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "LAST_NAME",
            ",",
            "SALARY",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "LAST_NAME",
            "ASC"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.last_name@SEP@employees.salary"
    },
    {
        "nl_queries": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and I want to rank Y from high to low order .",
        "VQL": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
        "db_id": "entrepreneur",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC'}",
        "record_name": "1371@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor , and I want to rank Y from high to low order .",
        "question_toks": [
            "What",
            "are",
            "the",
            "investors",
            "of",
            "entrepreneurs",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "entrepreneurs",
            "invested",
            "by",
            "each",
            "investor",
            ",",
            "and",
            "I",
            "want",
            "to",
            "rank",
            "Y",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Investor",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "entrepreneur",
            "GROUP",
            "BY",
            "Investor",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table entrepreneur, columns = [*,Entrepreneur_ID, People_ID, Company, Money_Requested, Investor]",
        "choose_schema_rat_link": "entrepreneur.investor@SEP@entrepreneur.entrepreneur_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1764",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "sum",
            "of",
            "employee_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "plot scatter on how many order items correspond to each order id ?",
        "VQL": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "db_id": "customers_and_invoices",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT order_id , count(*) FROM Order_items GROUP BY order_id', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id'}",
        "record_name": "967",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                44,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    44,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "plot scatter on how many order items correspond to each order id ?",
        "question_toks": [
            "plot",
            "scatter",
            "on",
            "how",
            "many",
            "order",
            "items",
            "correspond",
            "to",
            "each",
            "order",
            "id",
            "?"
        ],
        "query": "Visualize SCATTER SELECT order_id , count(*) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "choose_schema": "Table Orders, columns = [*,order_id, customer_id, date_order_placed, order_details]@SEP@Table Invoices, columns = [*,invoice_number, order_id, invoice_date]@SEP@Table Order_Items, columns = [*,order_item_id, order_id, product_id, product_quantity, other_order_item_details]",
        "choose_schema_rat_link": "order_items.order_item_id@SEP@invoice_line_items.order_item_id@SEP@orders.order_id@SEP@invoices.order_id@SEP@order_items.order_id@SEP@orders.order_details"
    },
    {
        "nl_queries": "Bar graph to show maximal weight from different pettype , and sort by the Y in descending .",
        "VQL": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
        "db_id": "pets_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC'}",
        "record_name": "2558@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            1,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show maximal weight from different pettype , and sort by the Y in descending .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "maximal",
            "weight",
            "from",
            "different",
            "pettype",
            ",",
            "and",
            "sort",
            "by",
            "the",
            "Y",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "PetType",
            ",",
            "max",
            "(",
            "weight",
            ")",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "PetType",
            "ORDER",
            "BY",
            "max",
            "(",
            "weight",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Pets, columns = [*,PetID, PetType, pet_age, weight]",
        "choose_schema_rat_link": "pets.weight"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of All_Road and School_ID , could you show x axis from high to low order ?",
        "VQL": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC'}",
        "record_name": "3117@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of All_Road and School_ID , could you show x axis from high to low order ?",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "All_Road",
            "and",
            "School_ID",
            ",",
            "could",
            "you",
            "show",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY All_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "All_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between Team_ID and School_ID , and group by attribute All_Neutral .",
        "VQL": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral'}",
        "record_name": "3184",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between Team_ID and School_ID , and group by attribute All_Neutral .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "Team_ID",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "All_Neutral",
            "."
        ],
        "query": "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY All_Neutral",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Team_ID",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "All_Neutral"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "Bar graph to show the total number from different nationality , I want to show by the X-axis from low to high .",
        "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
        "db_id": "pilot_record",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC'}",
        "record_name": "2587@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show the total number from different nationality , I want to show by the X-axis from low to high .",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "the",
            "total",
            "number",
            "from",
            "different",
            "nationality",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "X-axis",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , COUNT(*) FROM pilot GROUP BY Nationality ORDER BY Nationality ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "pilot",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "ASC"
        ],
        "choose_schema": "Table pilot, columns = [*,Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team]",
        "choose_schema_rat_link": "pilot.nationality"
    },
    {
        "nl_queries": "Please give me a bar chart that counts the number of grape of wine , and I want to display in ascending by the X-axis .",
        "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC'}",
        "record_name": "3220@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Please give me a bar chart that counts the number of grape of wine , and I want to display in ascending by the X-axis .",
        "question_toks": [
            "Please",
            "give",
            "me",
            "a",
            "bar",
            "chart",
            "that",
            "counts",
            "the",
            "number",
            "of",
            "grape",
            "of",
            "wine",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "in",
            "ascending",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY Grape ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "COUNT",
            "(",
            "Grape",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "Grape",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "Show names and seatings for all tracks opened after 2000 .",
        "VQL": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
        "db_id": "race_track",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Name , Seating FROM track WHERE year_opened > 2000', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000'}",
        "record_name": "2645",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show names and seatings for all tracks opened after 2000 .",
        "question_toks": [
            "Show",
            "names",
            "and",
            "seatings",
            "for",
            "all",
            "tracks",
            "opened",
            "after",
            "2000",
            "."
        ],
        "query": "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Name",
            ",",
            "Seating",
            "FROM",
            "track",
            "WHERE",
            "year_opened",
            ">",
            "2000"
        ],
        "choose_schema": "Table race, columns = [*,Race_ID, Name, Class, Date, Track_ID]@SEP@Table track, columns = [*,Track_ID, Name, Location, Seating, Year_Opened]",
        "choose_schema_rat_link": "race.name@SEP@track.name@SEP@race.track_id@SEP@track.track_id"
    },
    {
        "nl_queries": "Visualize a bar chart showing the average age of captains in each class , order by the y axis in descending .",
        "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC'}",
        "record_name": "2740@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart showing the average age of captains in each class , order by the y axis in descending .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "showing",
            "the",
            "average",
            "age",
            "of",
            "captains",
            "in",
            "each",
            "class",
            ",",
            "order",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "CLASS",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.age@SEP@captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "Show me a bar chart for how many stadiums does each country have ? , and I want to display by the total number in asc please .",
        "VQL": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC'}",
        "record_name": "2904@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me a bar chart for how many stadiums does each country have ? , and I want to display by the total number in asc please .",
        "question_toks": [
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "how",
            "many",
            "stadiums",
            "does",
            "each",
            "country",
            "have",
            "?",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "by",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Country , count(*) FROM stadium GROUP BY country ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "stadium",
            "GROUP",
            "BY",
            "country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]",
        "choose_schema_rat_link": "event.stadium_id@SEP@stadium.country"
    },
    {
        "nl_queries": "Show the location codes and the number of documents in each location . Show a pie chart .",
        "VQL": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code'}",
        "record_name": "790",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the location codes and the number of documents in each location . Show a pie chart .",
        "question_toks": [
            "Show",
            "the",
            "location",
            "codes",
            "and",
            "the",
            "number",
            "of",
            "documents",
            "in",
            "each",
            "location",
            ".",
            "Show",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "Location_Code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Document_locations",
            "GROUP",
            "BY",
            "location_code"
        ],
        "choose_schema": "Table Ref_Locations, columns = [*,Location_Code, Location_Name, Location_Description]@SEP@Table Document_Locations, columns = [*,Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]",
        "choose_schema_rat_link": "document_locations.location_code@SEP@all_documents.document_id@SEP@all_documents.document_type_code@SEP@all_documents.document_name@SEP@all_documents.document_description@SEP@document_locations.document_id@SEP@documents_to_be_destroyed.document_id"
    },
    {
        "nl_queries": "Show all calendar dates and bin by year in a line chart .",
        "VQL": "Visualize LINE SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY YEAR",
        "db_id": "cre_Doc_Tracking_DB",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar', 'binning': 'BIN Calendar_Date BY YEAR'}, 'VQL': 'Visualize LINE SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY YEAR'}",
        "record_name": "787",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                4,
                "year"
            ],
            "vis": 2
        },
        "question": "Show all calendar dates and bin by year in a line chart .",
        "question_toks": [
            "Show",
            "all",
            "calendar",
            "dates",
            "and",
            "bin",
            "by",
            "year",
            "in",
            "a",
            "line",
            "chart",
            "."
        ],
        "query": "Visualize LINE SELECT Calendar_Date , COUNT(Calendar_Date) FROM Ref_calendar BIN Calendar_Date BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Calendar_Date",
            ",",
            "COUNT",
            "(",
            "Calendar_Date",
            ")",
            "FROM",
            "Ref_calendar",
            "BIN",
            "Calendar_Date",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table Ref_Calendar, columns = [*,Calendar_Date, Day_Number]",
        "choose_schema_rat_link": "all_documents.date_stored@SEP@employees.date_of_birth@SEP@document_locations.date_in_location_from@SEP@document_locations.date_in_locaton_to"
    },
    {
        "nl_queries": "Show different parties of people along with the number of people in each party with a bar chart , and could you display by the y-axis in ascending ?",
        "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
        "db_id": "debate",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC'}",
        "record_name": "1069@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show different parties of people along with the number of people in each party with a bar chart , and could you display by the y-axis in ascending ?",
        "question_toks": [
            "Show",
            "different",
            "parties",
            "of",
            "people",
            "along",
            "with",
            "the",
            "number",
            "of",
            "people",
            "in",
            "each",
            "party",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "display",
            "by",
            "the",
            "y-axis",
            "in",
            "ascending",
            "?"
        ],
        "query": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Party",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Party",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, District, Name, Party, Age]",
        "choose_schema_rat_link": "people.party@SEP@people.people_id"
    },
    {
        "nl_queries": "Draw a bar chart for what is average age of male for different job title ? , and show Y in desc order .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC",
        "db_id": "network_2",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC\"}",
        "record_name": "2461@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"male\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart for what is average age of male for different job title ? , and show Y in desc order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "average",
            "age",
            "of",
            "male",
            "for",
            "different",
            "job",
            "title",
            "?",
            ",",
            "and",
            "show",
            "Y",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "WHERE",
            "gender",
            "=",
            "'male'",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "What is the number of different grapes of each wine ? Show me a bar chart , and sort y axis in asc order please .",
        "VQL": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC'}",
        "record_name": "3220@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of different grapes of each wine ? Show me a bar chart , and sort y axis in asc order please .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "different",
            "grapes",
            "of",
            "each",
            "wine",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "y",
            "axis",
            "in",
            "asc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE GROUP BY Grape ORDER BY COUNT(Grape) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "COUNT",
            "(",
            "Grape",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Grape",
            ")",
            "ASC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "Give me the comparison about the average of Shop_ID over the Is_full_time , and group by attribute Is_full_time , list by the bar in desc .",
        "VQL": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC'}",
        "record_name": "1346@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the average of Shop_ID over the Is_full_time , and group by attribute Is_full_time , list by the bar in desc .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "Shop_ID",
            "over",
            "the",
            "Is_full_time",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "list",
            "by",
            "the",
            "bar",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "AVG",
            "(",
            "Shop_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "Is_full_time",
            "DESC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "shop.shop_id@SEP@hiring.shop_id"
    },
    {
        "nl_queries": "Visualize a bar chart for what is average age for different job title ? , and display by the Y-axis from high to low .",
        "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
        "db_id": "network_2",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC'}",
        "record_name": "2459@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart for what is average age for different job title ? , and display by the Y-axis from high to low .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "average",
            "age",
            "for",
            "different",
            "job",
            "title",
            "?",
            ",",
            "and",
            "display",
            "by",
            "the",
            "Y-axis",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "job",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "Person",
            "GROUP",
            "BY",
            "job",
            "ORDER",
            "BY",
            "avg",
            "(",
            "age",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Person, columns = [*,name, age, city, gender, job]",
        "choose_schema_rat_link": "person.age@SEP@person.job"
    },
    {
        "nl_queries": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of salary over the hire_date bin hire_date by time , and I want to sort y-axis in desc order .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC', 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH'}",
        "record_name": "1585@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    8000.0,
                    12000.0
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"null\"",
                    null
                ],
                "or",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    40.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40 , give me the comparison about the average of salary over the hire_date bin hire_date by time , and I want to sort y-axis in desc order .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "whose",
            "salary",
            "is",
            "in",
            "the",
            "range",
            "of",
            "8000",
            "and",
            "12000",
            "and",
            "commission",
            "is",
            "not",
            "null",
            "or",
            "department",
            "number",
            "does",
            "not",
            "equal",
            "to",
            "40",
            ",",
            "give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "average",
            "of",
            "salary",
            "over",
            "the",
            "hire_date",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "I",
            "want",
            "to",
            "sort",
            "y-axis",
            "in",
            "desc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "\"null\"",
            "OR",
            "department_id",
            "!",
            "=",
            "40",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.salary@SEP@employees.commission_pct@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id@SEP@employees.hire_date"
    },
    {
        "nl_queries": "How many dorms are there for each gender ? Show me a bar chart , order from low to high by the X-axis .",
        "VQL": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC",
        "db_id": "dorm_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC'}",
        "record_name": "1210@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "How many dorms are there for each gender ? Show me a bar chart , order from low to high by the X-axis .",
        "question_toks": [
            "How",
            "many",
            "dorms",
            "are",
            "there",
            "for",
            "each",
            "gender",
            "?",
            "Show",
            "me",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "X-axis",
            "."
        ],
        "query": "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender ORDER BY gender ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "gender",
            "ASC"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.dormid@SEP@dorm.dorm_name@SEP@has_amenity.dormid@SEP@lives_in.dormid@SEP@dorm.gender"
    },
    {
        "nl_queries": "Show me the total number by grape in a histogram , and show Y-axis in descending order please .",
        "VQL": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC'}",
        "record_name": "3238@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me the total number by grape in a histogram , and show Y-axis in descending order please .",
        "question_toks": [
            "Show",
            "me",
            "the",
            "total",
            "number",
            "by",
            "grape",
            "in",
            "a",
            "histogram",
            ",",
            "and",
            "show",
            "Y-axis",
            "in",
            "descending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Grape , count(*) FROM WINE GROUP BY Grape ORDER BY count(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Grape",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "WINE",
            "GROUP",
            "BY",
            "Grape",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table grapes, columns = [*,ID, Grape, Color]@SEP@Table wine, columns = [*,No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases, Drink]",
        "choose_schema_rat_link": "grapes.grape@SEP@wine.grape"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home in a bar chart , could you order by the Y in ascending ?",
        "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC'}",
        "record_name": "3090@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home in a bar chart , could you order by the Y in ascending ?",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "could",
            "you",
            "order",
            "by",
            "the",
            "Y",
            "in",
            "ascending",
            "?"
        ],
        "query": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "Team_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "Find Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , and visualize them by a bar chart .",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "db_id": "employee_hire_evaluation",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time'}",
        "record_name": "1347",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find Is_full_time and the sum of Employee_ID , and group by attribute Is_full_time , and visualize them by a bar chart .",
        "question_toks": [
            "Find",
            "Is_full_time",
            "and",
            "the",
            "sum",
            "of",
            "Employee_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Is_full_time",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id"
    },
    {
        "nl_queries": "Show the different countries and the number of members from each with a bar chart , and could you order in asc by the Y-axis ?",
        "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
        "db_id": "decoration_competition",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC'}",
        "record_name": "1091@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the different countries and the number of members from each with a bar chart , and could you order in asc by the Y-axis ?",
        "question_toks": [
            "Show",
            "the",
            "different",
            "countries",
            "and",
            "the",
            "number",
            "of",
            "members",
            "from",
            "each",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "Y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Country",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "member",
            "GROUP",
            "BY",
            "Country",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table member, columns = [*,Member_ID, Name, Country, College_ID]",
        "choose_schema_rat_link": "member.country@SEP@member.member_id@SEP@round.member_id"
    },
    {
        "nl_queries": "Show me about the correlation between People_ID and Weight , and group by attribute Sex in a scatter chart .",
        "VQL": "Visualize SCATTER SELECT People_ID , Weight FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Weight FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Weight FROM people GROUP BY Sex'}",
        "record_name": "386",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Show me about the correlation between People_ID and Weight , and group by attribute Sex in a scatter chart .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "correlation",
            "between",
            "People_ID",
            "and",
            "Weight",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "in",
            "a",
            "scatter",
            "chart",
            "."
        ],
        "query": "Visualize SCATTER SELECT People_ID , Weight FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Weight",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table candidate, columns = [*,Candidate_ID, People_ID, Poll_Source, Date, Support_rate, Consider_rate, Oppose_rate, Unsure_rate]@SEP@Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.weight@SEP@people.sex"
    },
    {
        "nl_queries": "What is the date , average temperature for the days with the 3 largest maximum gust speeds ? Just give me a histogram , please .",
        "VQL": "Visualize BAR SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "db_id": "bike_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3', 'binning': ''}, 'VQL': 'Visualize BAR SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3'}",
        "record_name": "285",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the date , average temperature for the days with the 3 largest maximum gust speeds ? Just give me a histogram , please .",
        "question_toks": [
            "What",
            "is",
            "the",
            "date",
            ",",
            "average",
            "temperature",
            "for",
            "the",
            "days",
            "with",
            "the",
            "3",
            "largest",
            "maximum",
            "gust",
            "speeds",
            "?",
            "Just",
            "give",
            "me",
            "a",
            "histogram",
            ",",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT date , mean_temperature_f FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "date",
            ",",
            "mean_temperature_f",
            "FROM",
            "weather",
            "ORDER",
            "BY",
            "max_gust_speed_mph",
            "DESC",
            "LIMIT",
            "3"
        ],
        "choose_schema": "Table weather, columns = [*,date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "choose_schema_rat_link": "weather.date"
    },
    {
        "nl_queries": "Just show the first name of the employee and list their manager's id in the Y-axis of the bar chart , I want to order in ascending by the Y-axis please .",
        "VQL": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY MANAGER_ID ASC",
        "db_id": "hr_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY MANAGER_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY MANAGER_ID ASC'}",
        "record_name": "1897@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Just show the first name of the employee and list their manager's id in the Y-axis of the bar chart , I want to order in ascending by the Y-axis please .",
        "question_toks": [
            "Just",
            "show",
            "the",
            "first",
            "name",
            "of",
            "the",
            "employee",
            "and",
            "list",
            "their",
            "manager's",
            "id",
            "in",
            "the",
            "Y-axis",
            "of",
            "the",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "order",
            "in",
            "ascending",
            "by",
            "the",
            "Y-axis",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT FIRST_NAME , MANAGER_ID FROM employees ORDER BY MANAGER_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "FIRST_NAME",
            ",",
            "MANAGER_ID",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "MANAGER_ID",
            "ASC"
        ],
        "choose_schema": "Table departments, columns = [*,DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Visualize a scatter chart about the correlation between Snatch and Clean_Jerk .",
        "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "db_id": "body_builder",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT Snatch , Clean_Jerk FROM body_builder', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder'}",
        "record_name": "356",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Visualize a scatter chart about the correlation between Snatch and Clean_Jerk .",
        "question_toks": [
            "Visualize",
            "a",
            "scatter",
            "chart",
            "about",
            "the",
            "correlation",
            "between",
            "Snatch",
            "and",
            "Clean_Jerk",
            "."
        ],
        "query": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "Snatch",
            ",",
            "Clean_Jerk",
            "FROM",
            "body_builder"
        ],
        "choose_schema": "Table body_builder, columns = [*,Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]",
        "choose_schema_rat_link": "body_builder.snatch@SEP@body_builder.clean_jerk"
    },
    {
        "nl_queries": "What is the relationship between age and weight of the dogs who have been abandoned ? Return a group scatter chart that groups by dog's name .",
        "VQL": "Visualize SCATTER SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name",
        "db_id": "dog_kennels",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name'}",
        "record_name": "1172",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between age and weight of the dogs who have been abandoned ? Return a group scatter chart that groups by dog's name .",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "?",
            "Return",
            "a",
            "group",
            "scatter",
            "chart",
            "that",
            "groups",
            "by",
            "dog's",
            "name",
            "."
        ],
        "query": "Visualize SCATTER SELECT age , weight FROM Dogs WHERE abandoned_yn = 1 GROUP BY name",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1",
            "GROUP",
            "BY",
            "name"
        ],
        "choose_schema": "Table Dogs, columns = [*,dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]",
        "choose_schema_rat_link": "dogs.age@SEP@dogs.weight@SEP@dogs.dog_id@SEP@treatments.dog_id@SEP@dogs.abandoned_yn@SEP@dogs.name"
    },
    {
        "nl_queries": "Show all distinct product categories along with the number of mailshots in each category in a bar chart .",
        "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "db_id": "customers_campaigns_ecommerce",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category', 'binning': ''}, 'VQL': 'Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category'}",
        "record_name": "1015",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart .",
        "question_toks": [
            "Show",
            "all",
            "distinct",
            "product",
            "categories",
            "along",
            "with",
            "the",
            "number",
            "of",
            "mailshots",
            "in",
            "each",
            "category",
            "in",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "product_category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_campaigns",
            "GROUP",
            "BY",
            "product_category"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_category, product_name]@SEP@Table Mailshot_Campaigns, columns = [*,mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]",
        "choose_schema_rat_link": "products.product_category@SEP@mailshot_campaigns.product_category@SEP@products.product_id@SEP@products.product_name@SEP@order_items.product_id@SEP@mailshot_campaigns.mailshot_id@SEP@mailshot_campaigns.mailshot_name@SEP@mailshot_campaigns.mailshot_start_date@SEP@mailshot_campaigns.mailshot_end_date@SEP@mailshot_customers.mailshot_id@SEP@mailshot_customers.mailshot_customer_date"
    },
    {
        "nl_queries": "Show the booking status code and the corresponding number of bookings by a pie chart .",
        "VQL": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "db_id": "apartment_rentals",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code', 'binning': ''}, 'VQL': 'Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code'}",
        "record_name": "73",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    25,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "Show the booking status code and the corresponding number of bookings by a pie chart .",
        "question_toks": [
            "Show",
            "the",
            "booking",
            "status",
            "code",
            "and",
            "the",
            "corresponding",
            "number",
            "of",
            "bookings",
            "by",
            "a",
            "pie",
            "chart",
            "."
        ],
        "query": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "booking_status_code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Apartment_Bookings",
            "GROUP",
            "BY",
            "booking_status_code"
        ],
        "choose_schema": "Table Apartment_Bookings, columns = [*,apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "choose_schema_rat_link": "apartment_bookings.booking_status_code@SEP@apartment_bookings.booking_start_date@SEP@apartment_bookings.booking_end_date@SEP@view_unit_status.status_date"
    },
    {
        "nl_queries": "Scatter . how many different products correspond to each order id ?",
        "VQL": "Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items",
        "db_id": "customers_and_invoices",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT order_id , count(DISTINCT product_id) FROM Order_items', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items'}",
        "record_name": "962",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                44,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                45,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "Scatter . how many different products correspond to each order id ?",
        "question_toks": [
            "Scatter",
            ".",
            "how",
            "many",
            "different",
            "products",
            "correspond",
            "to",
            "each",
            "order",
            "id",
            "?"
        ],
        "query": "Visualize SCATTER SELECT order_id , count(DISTINCT product_id) FROM Order_items",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "product_id",
            ")",
            "FROM",
            "Order_items"
        ],
        "choose_schema": "Table Orders, columns = [*,order_id, customer_id, date_order_placed, order_details]@SEP@Table Invoices, columns = [*,invoice_number, order_id, invoice_date]@SEP@Table Order_Items, columns = [*,order_item_id, order_id, product_id, product_quantity, other_order_item_details]",
        "choose_schema_rat_link": "orders.order_id@SEP@invoices.order_id@SEP@order_items.order_id@SEP@product_categories.product_type_description@SEP@products.product_id@SEP@products.product_name@SEP@products.product_color@SEP@products.product_size@SEP@order_items.product_id@SEP@order_items.product_quantity@SEP@invoice_line_items.product_id@SEP@invoice_line_items.product_title@SEP@invoice_line_items.product_quantity@SEP@invoice_line_items.product_price@SEP@orders.order_details@SEP@order_items.order_item_id@SEP@invoice_line_items.order_item_id"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of salary bin hire_date by time , and could you rank from low to high by the Y-axis ?",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC\", 'binning': 'BIN HIRE_DATE BY MONTH'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH\"}",
        "record_name": "1759@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "month"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of salary bin hire_date by time , and could you rank from low to high by the Y-axis ?",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "salary",
            "bin",
            "hire_date",
            "by",
            "time",
            ",",
            "and",
            "could",
            "you",
            "rank",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "Y-axis",
            "?"
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "SALARY",
            ")",
            "ASC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "MONTH"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@employees.salary"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , show by the bars in descending .",
        "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "db_id": "hr_1",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC\"}",
        "record_name": "1778@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id , show by the bars in descending .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "sum",
            "of",
            "manager_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            ",",
            "show",
            "by",
            "the",
            "bars",
            "in",
            "descending",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "SUM",
            "(",
            "MANAGER_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "JOB_ID",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id@SEP@departments.manager_id@SEP@employees.manager_id"
    },
    {
        "nl_queries": "Show the number of companies in each headquarter with a bar chart , and order by the the number of headquarters in desc .",
        "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC'}",
        "record_name": "1518@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show the number of companies in each headquarter with a bar chart , and order by the the number of headquarters in desc .",
        "question_toks": [
            "Show",
            "the",
            "number",
            "of",
            "companies",
            "in",
            "each",
            "headquarter",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "order",
            "by",
            "the",
            "the",
            "number",
            "of",
            "headquarters",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Headquarters",
            ",",
            "COUNT",
            "(",
            "Headquarters",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "Headquarters",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Headquarters",
            ")",
            "DESC"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.company@SEP@company.company_id@SEP@station_company.company_id@SEP@company.headquarters"
    },
    {
        "nl_queries": "Visualize a bar chart about the distribution of meter_700 and meter_100 , I want to rank y axis from low to high order .",
        "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC'}",
        "record_name": "2925@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Visualize a bar chart about the distribution of meter_700 and meter_100 , I want to rank y axis from low to high order .",
        "question_toks": [
            "Visualize",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "meter_700",
            "and",
            "meter_100",
            ",",
            "I",
            "want",
            "to",
            "rank",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_700",
            ",",
            "meter_100",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_100",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "For all storms with at least 1 death , compare the total number of deaths by dates_active attribute , sort by the names from low to high .",
        "VQL": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active ASC",
        "db_id": "storm_record",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active ASC'}",
        "record_name": "2869@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all storms with at least 1 death , compare the total number of deaths by dates_active attribute , sort by the names from low to high .",
        "question_toks": [
            "For",
            "all",
            "storms",
            "with",
            "at",
            "least",
            "1",
            "death",
            ",",
            "compare",
            "the",
            "total",
            "number",
            "of",
            "deaths",
            "by",
            "dates_active",
            "attribute",
            ",",
            "sort",
            "by",
            "the",
            "names",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT Dates_active , Number_Deaths FROM storm WHERE number_deaths >= 1 ORDER BY Dates_active ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Dates_active",
            ",",
            "Number_Deaths",
            "FROM",
            "storm",
            "WHERE",
            "number_deaths",
            ">=",
            "1",
            "ORDER",
            "BY",
            "Dates_active",
            "ASC"
        ],
        "choose_schema": "Table storm, columns = [*,Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths]",
        "choose_schema_rat_link": "storm.storm_id@SEP@affected_region.storm_id@SEP@storm.number_deaths@SEP@affected_region.number_city_affected@SEP@storm.dates_active@SEP@storm.name"
    },
    {
        "nl_queries": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , list by the y axis in desc .",
        "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "db_id": "hr_1",
        "hardness": "Extra Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\", 'binning': ''}, 'VQL': \"Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC\"}",
        "record_name": "1561@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%D%\"",
                    null
                ],
                "or",
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%S%\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            5,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "For all employees who have the letters D or S in their first name , show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart , list by the y axis in desc .",
        "question_toks": [
            "For",
            "all",
            "employees",
            "who",
            "have",
            "the",
            "letters",
            "D",
            "or",
            "S",
            "in",
            "their",
            "first",
            "name",
            ",",
            "show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "job_id",
            "and",
            "the",
            "average",
            "of",
            "employee_id",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "job_id",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "list",
            "by",
            "the",
            "y",
            "axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "JOB_ID",
            ",",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'%D%'",
            "OR",
            "first_name",
            "LIKE",
            "'%S%'",
            "GROUP",
            "BY",
            "JOB_ID",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "EMPLOYEE_ID",
            ")",
            "DESC"
        ],
        "choose_schema": "Table jobs, columns = [*,JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]@SEP@Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]@SEP@Table job_history, columns = [*,EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.first_name@SEP@employees.employee_id@SEP@job_history.employee_id@SEP@jobs.job_id@SEP@jobs.job_title@SEP@employees.job_id@SEP@job_history.job_id"
    },
    {
        "nl_queries": "Find meter_400 and ID , and visualize them by a bar chart , and display x axis in desc order please .",
        "VQL": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC'}",
        "record_name": "2918@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find meter_400 and ID , and visualize them by a bar chart , and display x axis in desc order please .",
        "question_toks": [
            "Find",
            "meter_400",
            "and",
            "ID",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "display",
            "x",
            "axis",
            "in",
            "desc",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT meter_400 , ID FROM swimmer ORDER BY meter_400 DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "meter_400",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "meter_400",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "Find Nationality and the average of meter_100 , and group by attribute Nationality , and visualize them by a bar chart , I want to show by the Nationality from high to low .",
        "VQL": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
        "db_id": "swimming",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC'}",
        "record_name": "2909@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find Nationality and the average of meter_100 , and group by attribute Nationality , and visualize them by a bar chart , I want to show by the Nationality from high to low .",
        "question_toks": [
            "Find",
            "Nationality",
            "and",
            "the",
            "average",
            "of",
            "meter_100",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Nationality",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "Nationality",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Nationality",
            ",",
            "AVG",
            "(",
            "meter_100",
            ")",
            "FROM",
            "swimmer",
            "GROUP",
            "BY",
            "Nationality",
            "ORDER",
            "BY",
            "Nationality",
            "DESC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]",
        "choose_schema_rat_link": "swimmer.nationality@SEP@swimmer.meter_100@SEP@swimmer.meter_200@SEP@swimmer.meter_300@SEP@swimmer.meter_400@SEP@swimmer.meter_500@SEP@swimmer.meter_600@SEP@swimmer.meter_700"
    },
    {
        "nl_queries": "Draw a bar chart for what is the average base price of rooms , for each bed type ? , I want to show bedType from high to low order .",
        "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC'}",
        "record_name": "1977@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart for what is the average base price of rooms , for each bed type ? , I want to show bedType from high to low order .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "for",
            "what",
            "is",
            "the",
            "average",
            "base",
            "price",
            "of",
            "rooms",
            ",",
            "for",
            "each",
            "bed",
            "type",
            "?",
            ",",
            "I",
            "want",
            "to",
            "show",
            "bedType",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY bedType DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "avg",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType",
            "ORDER",
            "BY",
            "bedType",
            "DESC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.baseprice@SEP@rooms.bedtype@SEP@reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds"
    },
    {
        "nl_queries": "Bar graph to show the total number from different team , and could you list by the total number in desc ?",
        "VQL": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) DESC",
        "db_id": "wrestler",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) DESC'}",
        "record_name": "3279@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar graph to show the total number from different team , and could you list by the total number in desc ?",
        "question_toks": [
            "Bar",
            "graph",
            "to",
            "show",
            "the",
            "total",
            "number",
            "from",
            "different",
            "team",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "desc",
            "?"
        ],
        "query": "Visualize BAR SELECT Team , COUNT(*) FROM elimination GROUP BY Team ORDER BY COUNT(*) DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Team",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "elimination",
            "GROUP",
            "BY",
            "Team",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "choose_schema": "Table Elimination, columns = [*,Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "choose_schema_rat_link": "elimination.team"
    },
    {
        "nl_queries": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the total number please .",
        "VQL": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
        "db_id": "gas_company",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC'}",
        "record_name": "1498@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all headquarters and the number of companies in each headquarter with a bar chart , show from low to high by the total number please .",
        "question_toks": [
            "List",
            "all",
            "headquarters",
            "and",
            "the",
            "number",
            "of",
            "companies",
            "in",
            "each",
            "headquarter",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "show",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "total",
            "number",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table company, columns = [*,Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "choose_schema_rat_link": "company.headquarters@SEP@company.company@SEP@company.company_id@SEP@station_company.company_id"
    },
    {
        "nl_queries": "Compare the total salary by each hire date (bin it into the day of week interval) of employees using a bar chart , I want to show by the y-axis in descending please .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) DESC', 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': 'Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY'}",
        "record_name": "1856@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "Compare the total salary by each hire date (bin it into the day of week interval) of employees using a bar chart , I want to show by the y-axis in descending please .",
        "question_toks": [
            "Compare",
            "the",
            "total",
            "salary",
            "by",
            "each",
            "hire",
            "date",
            "(bin",
            "it",
            "into",
            "the",
            "day",
            "of",
            "week",
            "interval)",
            "of",
            "employees",
            "using",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "show",
            "by",
            "the",
            "y-axis",
            "in",
            "descending",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "SUM",
            "(",
            "SALARY",
            ")",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "SALARY",
            ")",
            "DESC",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.hire_date@SEP@employees.salary@SEP@employees.employee_id@SEP@job_history.employee_id"
    },
    {
        "nl_queries": "I want to see trend of sum employee id by start from , and list x axis from high to low order .",
        "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize LINE', 'data_part': {'sql_part': 'SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC', 'binning': 'BIN Start_from BY YEAR'}, 'VQL': 'Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR'}",
        "record_name": "1360@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                13,
                "year"
            ],
            "vis": 2
        },
        "question": "I want to see trend of sum employee id by start from , and list x axis from high to low order .",
        "question_toks": [
            "I",
            "want",
            "to",
            "see",
            "trend",
            "of",
            "sum",
            "employee",
            "id",
            "by",
            "start",
            "from",
            ",",
            "and",
            "list",
            "x",
            "axis",
            "from",
            "high",
            "to",
            "low",
            "order",
            "."
        ],
        "query": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "query_toks": [
            "Visualize",
            "LINE",
            "SELECT",
            "Start_from",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "ORDER",
            "BY",
            "Start_from",
            "DESC",
            "BIN",
            "Start_from",
            "BY",
            "YEAR"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@hiring.start_from"
    },
    {
        "nl_queries": "A bar chart showing the sum of capacity of cinemas open for each year , rank by the X from low to high please .",
        "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
        "db_id": "cinema",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC'}",
        "record_name": "468@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart showing the sum of capacity of cinemas open for each year , rank by the X from low to high please .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "showing",
            "the",
            "sum",
            "of",
            "capacity",
            "of",
            "cinemas",
            "open",
            "for",
            "each",
            "year",
            ",",
            "rank",
            "by",
            "the",
            "X",
            "from",
            "low",
            "to",
            "high",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Openning_year",
            ",",
            "SUM",
            "(",
            "Capacity",
            ")",
            "FROM",
            "cinema",
            "GROUP",
            "BY",
            "Openning_year",
            "ORDER",
            "BY",
            "Openning_year",
            "ASC"
        ],
        "choose_schema": "Table cinema, columns = [*,Cinema_ID, Name, Openning_year, Capacity, Location]",
        "choose_schema_rat_link": "schedule.show_times_per_day@SEP@cinema.capacity@SEP@cinema.cinema_id@SEP@schedule.cinema_id@SEP@film.rank_in_series"
    },
    {
        "nl_queries": "I want to know the proportion of the total number for each gender .",
        "VQL": "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender",
        "db_id": "dorm_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize PIE', 'data_part': {'sql_part': 'SELECT gender , count(*) FROM dorm GROUP BY gender', 'binning': ''}, 'VQL': 'Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender'}",
        "record_name": "1209",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 1
        },
        "question": "I want to know the proportion of the total number for each gender .",
        "question_toks": [
            "I",
            "want",
            "to",
            "know",
            "the",
            "proportion",
            "of",
            "the",
            "total",
            "number",
            "for",
            "each",
            "gender",
            "."
        ],
        "query": "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender",
        "query_toks": [
            "Visualize",
            "PIE",
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "dorm",
            "GROUP",
            "BY",
            "gender"
        ],
        "choose_schema": "Table Dorm, columns = [*,dormid, dorm_name, student_capacity, gender]",
        "choose_schema_rat_link": "dorm.gender"
    },
    {
        "nl_queries": "What is the average age of captains in different classes ? , and order from low to high by the x-axis .",
        "VQL": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
        "db_id": "ship_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC'}",
        "record_name": "2740@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average age of captains in different classes ? , and order from low to high by the x-axis .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "age",
            "of",
            "captains",
            "in",
            "different",
            "classes",
            "?",
            ",",
            "and",
            "order",
            "from",
            "low",
            "to",
            "high",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT Class , avg(age) FROM captain GROUP BY CLASS ORDER BY Class ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Class",
            ",",
            "avg",
            "(",
            "age",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "CLASS",
            "ORDER",
            "BY",
            "Class",
            "ASC"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.age@SEP@captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "Return a bar chart about the distribution of ACC_Road and School_ID , and group by attribute ACC_Home , order in descending by the X please .",
        "VQL": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC'}",
        "record_name": "3091@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ],
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Return a bar chart about the distribution of ACC_Road and School_ID , and group by attribute ACC_Home , order in descending by the X please .",
        "question_toks": [
            "Return",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Home",
            ",",
            "order",
            "in",
            "descending",
            "by",
            "the",
            "X",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Home",
            ",",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@university.school@SEP@basketball_match.school_id@SEP@university.school_id"
    },
    {
        "nl_queries": "A bar chart about how films are produced by each studio ? , sort by the bars from high to low .",
        "VQL": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC",
        "db_id": "film_rank",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC'}",
        "record_name": "1399@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "A bar chart about how films are produced by each studio ? , sort by the bars from high to low .",
        "question_toks": [
            "A",
            "bar",
            "chart",
            "about",
            "how",
            "films",
            "are",
            "produced",
            "by",
            "each",
            "studio",
            "?",
            ",",
            "sort",
            "by",
            "the",
            "bars",
            "from",
            "high",
            "to",
            "low",
            "."
        ],
        "query": "Visualize BAR SELECT Studio , COUNT(*) FROM film GROUP BY Studio ORDER BY Studio DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Studio",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "film",
            "GROUP",
            "BY",
            "Studio",
            "ORDER",
            "BY",
            "Studio",
            "DESC"
        ],
        "choose_schema": "Table film, columns = [*,Film_ID, Title, Studio, Director, Gross_in_dollar]",
        "choose_schema_rat_link": "film.film_id@SEP@film_market_estimation.film_id@SEP@film.studio@SEP@film_market_estimation.high_estimate@SEP@film_market_estimation.low_estimate"
    },
    {
        "nl_queries": "Bar chart x axis product name y axis how many product name , and I want to display in asc by the x axis .",
        "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "db_id": "customers_and_products_contacts",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC'}",
        "record_name": "1000@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis product name y axis how many product name , and I want to display in asc by the x axis .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "product",
            "name",
            "y",
            "axis",
            "how",
            "many",
            "product",
            "name",
            ",",
            "and",
            "I",
            "want",
            "to",
            "display",
            "in",
            "asc",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "product_name",
            ",",
            "COUNT",
            "(",
            "product_name",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_name",
            "ORDER",
            "BY",
            "product_name",
            "ASC"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_type_code, product_name, product_price]",
        "choose_schema_rat_link": "products.product_name@SEP@products.product_id@SEP@products.product_type_code@SEP@products.product_price@SEP@order_items.product_id"
    },
    {
        "nl_queries": "Bar chart x axis time y axis id , and order by the x axis in asc .",
        "VQL": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time ASC",
        "db_id": "swimming",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Time , ID FROM swimmer ORDER BY Time ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time ASC'}",
        "record_name": "2926@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Bar chart x axis time y axis id , and order by the x axis in asc .",
        "question_toks": [
            "Bar",
            "chart",
            "x",
            "axis",
            "time",
            "y",
            "axis",
            "id",
            ",",
            "and",
            "order",
            "by",
            "the",
            "x",
            "axis",
            "in",
            "asc",
            "."
        ],
        "query": "Visualize BAR SELECT Time , ID FROM swimmer ORDER BY Time ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Time",
            ",",
            "ID",
            "FROM",
            "swimmer",
            "ORDER",
            "BY",
            "Time",
            "ASC"
        ],
        "choose_schema": "Table swimmer, columns = [*,ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700, Time]@SEP@Table stadium, columns = [*,ID, name, Capacity, City, Country, Opening_year]@SEP@Table event, columns = [*,ID, Name, Stadium_ID, Year]@SEP@Table record, columns = [*,ID, Result, Swimmer_ID, Event_ID]",
        "choose_schema_rat_link": "swimmer.time@SEP@swimmer.id@SEP@stadium.id@SEP@event.id@SEP@record.id"
    },
    {
        "nl_queries": "What are the names of all products , and count them by a bar chart , and could you list by the Y-axis from low to high ?",
        "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "db_id": "manufactory_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC'}",
        "record_name": "2180@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the names of all products , and count them by a bar chart , and could you list by the Y-axis from low to high ?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "of",
            "all",
            "products",
            ",",
            "and",
            "count",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "Y-axis",
            "from",
            "low",
            "to",
            "high",
            "?"
        ],
        "query": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Name",
            ",",
            "COUNT",
            "(",
            "Name",
            ")",
            "FROM",
            "Products",
            "GROUP",
            "BY",
            "Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Name",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Manufacturers, columns = [*,Code, Name, Headquarter, Founder, Revenue]@SEP@Table Products, columns = [*,Code, Name, Price, Manufacturer]",
        "choose_schema_rat_link": "manufacturers.name@SEP@products.name"
    },
    {
        "nl_queries": "List all payment methods and number of payments using each payment methods by a bar chart .",
        "VQL": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "db_id": "driving_school",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code', 'binning': ''}, 'VQL': 'Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code'}",
        "record_name": "1247",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                31,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    31,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "List all payment methods and number of payments using each payment methods by a bar chart .",
        "question_toks": [
            "List",
            "all",
            "payment",
            "methods",
            "and",
            "number",
            "of",
            "payments",
            "using",
            "each",
            "payment",
            "methods",
            "by",
            "a",
            "bar",
            "chart",
            "."
        ],
        "query": "Visualize BAR SELECT payment_method_code , count(*) FROM Customer_Payments GROUP BY payment_method_code",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "choose_schema": "Table Customer_Payments, columns = [*,customer_id, datetime_payment, payment_method_code, amount_payment]",
        "choose_schema_rat_link": "customer_payments.payment_method_code"
    },
    {
        "nl_queries": "What is the average of number_of_platforms for each location ? Show the comparison with a bar chart , and sort Y-axis in ascending order please .",
        "VQL": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) ASC",
        "db_id": "train_station",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) ASC'}",
        "record_name": "3046@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the average of number_of_platforms for each location ? Show the comparison with a bar chart , and sort Y-axis in ascending order please .",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "of",
            "number_of_platforms",
            "for",
            "each",
            "location",
            "?",
            "Show",
            "the",
            "comparison",
            "with",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "sort",
            "Y-axis",
            "in",
            "ascending",
            "order",
            "please",
            "."
        ],
        "query": "Visualize BAR SELECT Location , AVG(Number_of_Platforms) FROM station GROUP BY Location ORDER BY AVG(Number_of_Platforms) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Location",
            ",",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "FROM",
            "station",
            "GROUP",
            "BY",
            "Location",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "Number_of_Platforms",
            ")",
            "ASC"
        ],
        "choose_schema": "Table station, columns = [*,Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]",
        "choose_schema_rat_link": "station.number_of_platforms@SEP@station.location"
    },
    {
        "nl_queries": "what is the number of players who have points less than 30 for each position ? , show y axis from low to high order .",
        "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
        "db_id": "sports_competition",
        "hardness": "Hard",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC'}",
        "record_name": "2818@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what is the number of players who have points less than 30 for each position ? , show y axis from low to high order .",
        "question_toks": [
            "what",
            "is",
            "the",
            "number",
            "of",
            "players",
            "who",
            "have",
            "points",
            "less",
            "than",
            "30",
            "for",
            "each",
            "position",
            "?",
            ",",
            "show",
            "y",
            "axis",
            "from",
            "low",
            "to",
            "high",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Position",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "points",
            "<",
            "30",
            "GROUP",
            "BY",
            "POSITION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table player, columns = [*,Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "choose_schema_rat_link": "player.player_id@SEP@player.points@SEP@player.position"
    },
    {
        "nl_queries": "Give me the comparison about the amount of Sex over the Sex , and group by attribute Sex by a bar chart , display in desc by the x axis .",
        "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "db_id": "candidate_poll",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC'}",
        "record_name": "376@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about the amount of Sex over the Sex , and group by attribute Sex by a bar chart , display in desc by the x axis .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "the",
            "amount",
            "of",
            "Sex",
            "over",
            "the",
            "Sex",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "display",
            "in",
            "desc",
            "by",
            "the",
            "x",
            "axis",
            "."
        ],
        "query": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Sex",
            ",",
            "COUNT",
            "(",
            "Sex",
            ")",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex",
            "ORDER",
            "BY",
            "Sex",
            "DESC"
        ],
        "choose_schema": "Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "people.sex"
    },
    {
        "nl_queries": "Draw a bar chart of affiliation versus sum enrollment",
        "VQL": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation'}",
        "record_name": "3071",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    17,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of affiliation versus sum enrollment",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "affiliation",
            "versus",
            "sum",
            "enrollment"
        ],
        "query": "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Affiliation",
            ",",
            "sum",
            "(",
            "enrollment",
            ")",
            "FROM",
            "university",
            "GROUP",
            "BY",
            "affiliation"
        ],
        "choose_schema": "Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.affiliation@SEP@university.enrollment"
    },
    {
        "nl_queries": "Find the number of rooms with king bed for each decor type .",
        "VQL": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor', 'binning': ''}, 'VQL': 'Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor'}",
        "record_name": "1975",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"King\"",
                    null
                ]
            ],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find the number of rooms with king bed for each decor type .",
        "question_toks": [
            "Find",
            "the",
            "number",
            "of",
            "rooms",
            "with",
            "king",
            "bed",
            "for",
            "each",
            "decor",
            "type",
            "."
        ],
        "query": "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "decor",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "WHERE",
            "bedType",
            "=",
            "\"King\"",
            "GROUP",
            "BY",
            "decor"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds@SEP@rooms.bedtype@SEP@rooms.decor"
    },
    {
        "nl_queries": "Draw a bar chart of is full time versus sum employee id , and could you list by the total number in asc ?",
        "VQL": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
        "db_id": "employee_hire_evaluation",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC'}",
        "record_name": "1347@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart of is full time versus sum employee id , and could you list by the total number in asc ?",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "of",
            "is",
            "full",
            "time",
            "versus",
            "sum",
            "employee",
            "id",
            ",",
            "and",
            "could",
            "you",
            "list",
            "by",
            "the",
            "total",
            "number",
            "in",
            "asc",
            "?"
        ],
        "query": "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Is_full_time",
            ",",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "FROM",
            "hiring",
            "GROUP",
            "BY",
            "Is_full_time",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "Employee_ID",
            ")",
            "ASC"
        ],
        "choose_schema": "Table hiring, columns = [*,Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "choose_schema_rat_link": "hiring.is_full_time@SEP@employee.employee_id@SEP@hiring.employee_id@SEP@evaluation.employee_id@SEP@shop.number_products"
    },
    {
        "nl_queries": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , show by the Y-axis in desc .",
        "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC'}",
        "record_name": "3112@y_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Draw a bar chart about the distribution of ACC_Regular_Season and Team_ID , show by the Y-axis in desc .",
        "question_toks": [
            "Draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Regular_Season",
            "and",
            "Team_ID",
            ",",
            "show",
            "by",
            "the",
            "Y-axis",
            "in",
            "desc",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Regular_Season",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_ID",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "What are the number of rooms for each bed type Show bar chart , order by the total number from low to high .",
        "VQL": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) ASC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) ASC'}",
        "record_name": "1967@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What are the number of rooms for each bed type Show bar chart , order by the total number from low to high .",
        "question_toks": [
            "What",
            "are",
            "the",
            "number",
            "of",
            "rooms",
            "for",
            "each",
            "bed",
            "type",
            "Show",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "total",
            "number",
            "from",
            "low",
            "to",
            "high",
            "."
        ],
        "query": "Visualize BAR SELECT bedType , count(*) FROM Rooms GROUP BY bedType ORDER BY count(*) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.bedtype@SEP@reservations.room@SEP@rooms.roomid@SEP@rooms.roomname@SEP@rooms.beds"
    },
    {
        "nl_queries": "Give me a bar chart for the number of area of each area , and I want to show y axis in ascending order .",
        "VQL": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) ASC",
        "db_id": "wine_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) ASC'}",
        "record_name": "3224@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me a bar chart for the number of area of each area , and I want to show y axis in ascending order .",
        "question_toks": [
            "Give",
            "me",
            "a",
            "bar",
            "chart",
            "for",
            "the",
            "number",
            "of",
            "area",
            "of",
            "each",
            "area",
            ",",
            "and",
            "I",
            "want",
            "to",
            "show",
            "y",
            "axis",
            "in",
            "ascending",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT Area , COUNT(Area) FROM APPELLATIONS GROUP BY Area ORDER BY COUNT(Area) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Area",
            ",",
            "COUNT",
            "(",
            "Area",
            ")",
            "FROM",
            "APPELLATIONS",
            "GROUP",
            "BY",
            "Area",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "Area",
            ")",
            "ASC"
        ],
        "choose_schema": "Table appellations, columns = [*,No, Appelation, County, State, Area, isAVA]",
        "choose_schema_rat_link": "appellations.area"
    },
    {
        "nl_queries": "Give me the comparison about Team_ID over the All_Games , and show total number in asc order .",
        "VQL": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "db_id": "university_basketball",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC'}",
        "record_name": "3114@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Give me the comparison about Team_ID over the All_Games , and show total number in asc order .",
        "question_toks": [
            "Give",
            "me",
            "the",
            "comparison",
            "about",
            "Team_ID",
            "over",
            "the",
            "All_Games",
            ",",
            "and",
            "show",
            "total",
            "number",
            "in",
            "asc",
            "order",
            "."
        ],
        "query": "Visualize BAR SELECT All_Games , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Games",
            ",",
            "Team_ID",
            "FROM",
            "basketball_match",
            "ORDER",
            "BY",
            "Team_ID",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.team_id@SEP@basketball_match.team_name"
    },
    {
        "nl_queries": "plot scatter on what is the maximum accelerate for different number of cylinders ?",
        "VQL": "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
        "db_id": "car_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT max(Accelerate) , Cylinders FROM CARS_DATA', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA'}",
        "record_name": "432",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "plot scatter on what is the maximum accelerate for different number of cylinders ?",
        "question_toks": [
            "plot",
            "scatter",
            "on",
            "what",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "different",
            "number",
            "of",
            "cylinders",
            "?"
        ],
        "query": "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA"
        ],
        "choose_schema": "Table cars_data, columns = [*,Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year]",
        "choose_schema_rat_link": "cars_data.accelerate@SEP@cars_data.cylinders"
    },
    {
        "nl_queries": "what is the average base price of different bed type ? List bed type and average base price , could you list in asc by the Y ?",
        "VQL": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC",
        "db_id": "inn_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC'}",
        "record_name": "1977@y_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            5,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "what is the average base price of different bed type ? List bed type and average base price , could you list in asc by the Y ?",
        "question_toks": [
            "what",
            "is",
            "the",
            "average",
            "base",
            "price",
            "of",
            "different",
            "bed",
            "type",
            "?",
            "List",
            "bed",
            "type",
            "and",
            "average",
            "base",
            "price",
            ",",
            "could",
            "you",
            "list",
            "in",
            "asc",
            "by",
            "the",
            "Y",
            "?"
        ],
        "query": "Visualize BAR SELECT bedType , avg(basePrice) FROM Rooms GROUP BY bedType ORDER BY avg(basePrice) ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "bedType",
            ",",
            "avg",
            "(",
            "basePrice",
            ")",
            "FROM",
            "Rooms",
            "GROUP",
            "BY",
            "bedType",
            "ORDER",
            "BY",
            "avg",
            "(",
            "basePrice",
            ")",
            "ASC"
        ],
        "choose_schema": "Table Rooms, columns = [*,RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor]",
        "choose_schema_rat_link": "rooms.baseprice@SEP@rooms.bedtype@SEP@rooms.beds"
    },
    {
        "nl_queries": "What is the number of types of competition ? , order in asc by the names .",
        "VQL": "Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC",
        "db_id": "sports_competition",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC'}",
        "record_name": "2814@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "What is the number of types of competition ? , order in asc by the names .",
        "question_toks": [
            "What",
            "is",
            "the",
            "number",
            "of",
            "types",
            "of",
            "competition",
            "?",
            ",",
            "order",
            "in",
            "asc",
            "by",
            "the",
            "names",
            "."
        ],
        "query": "Visualize BAR SELECT Competition_type , COUNT(Competition_type) FROM competition GROUP BY Competition_type ORDER BY Competition_type ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "Competition_type",
            ",",
            "COUNT",
            "(",
            "Competition_type",
            ")",
            "FROM",
            "competition",
            "GROUP",
            "BY",
            "Competition_type",
            "ORDER",
            "BY",
            "Competition_type",
            "ASC"
        ],
        "choose_schema": "Table competition, columns = [*,Competition_ID, Year, Competition_type, Country]",
        "choose_schema_rat_link": "competition.competition_id@SEP@competition.competition_type@SEP@competition_result.competition_id@SEP@club.name@SEP@player.name"
    },
    {
        "nl_queries": "A scatter chart shows the correlation between People_ID and Height , and group by attribute Sex .",
        "VQL": "Visualize SCATTER SELECT People_ID , Height FROM people GROUP BY Sex",
        "db_id": "candidate_poll",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT People_ID , Height FROM people GROUP BY Sex', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT People_ID , Height FROM people GROUP BY Sex'}",
        "record_name": "385",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "A scatter chart shows the correlation between People_ID and Height , and group by attribute Sex .",
        "question_toks": [
            "A",
            "scatter",
            "chart",
            "shows",
            "the",
            "correlation",
            "between",
            "People_ID",
            "and",
            "Height",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "Sex",
            "."
        ],
        "query": "Visualize SCATTER SELECT People_ID , Height FROM people GROUP BY Sex",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "People_ID",
            ",",
            "Height",
            "FROM",
            "people",
            "GROUP",
            "BY",
            "Sex"
        ],
        "choose_schema": "Table candidate, columns = [*,Candidate_ID, People_ID, Poll_Source, Date, Support_rate, Consider_rate, Oppose_rate, Unsure_rate]@SEP@Table people, columns = [*,People_ID, Sex, Name, Date_of_Birth, Height, Weight]",
        "choose_schema_rat_link": "candidate.people_id@SEP@people.people_id@SEP@people.height@SEP@people.sex"
    },
    {
        "nl_queries": "Find All_Home and School_ID , and group by attribute ACC_Road , and visualize them by a bar chart , and could you show x axis in descending order ?",
        "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC'}",
        "record_name": "3087@x_name@DESC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ],
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Find All_Home and School_ID , and group by attribute ACC_Road , and visualize them by a bar chart , and could you show x axis in descending order ?",
        "question_toks": [
            "Find",
            "All_Home",
            "and",
            "School_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            ",",
            "and",
            "visualize",
            "them",
            "by",
            "a",
            "bar",
            "chart",
            ",",
            "and",
            "could",
            "you",
            "show",
            "x",
            "axis",
            "in",
            "descending",
            "order",
            "?"
        ],
        "query": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "All_Home",
            ",",
            "School_ID",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            ",",
            "All_Home",
            "ORDER",
            "BY",
            "All_Home",
            "DESC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]@SEP@Table university, columns = [*,School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "choose_schema_rat_link": "university.school@SEP@basketball_match.school_id@SEP@university.school_id@SEP@basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road"
    },
    {
        "nl_queries": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , I want to sort in asc by the x-axis .",
        "VQL": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC",
        "db_id": "customers_campaigns_ecommerce",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC'}",
        "record_name": "1015@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    16,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show all distinct product categories along with the number of mailshots in each category in a bar chart , I want to sort in asc by the x-axis .",
        "question_toks": [
            "Show",
            "all",
            "distinct",
            "product",
            "categories",
            "along",
            "with",
            "the",
            "number",
            "of",
            "mailshots",
            "in",
            "each",
            "category",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "I",
            "want",
            "to",
            "sort",
            "in",
            "asc",
            "by",
            "the",
            "x-axis",
            "."
        ],
        "query": "Visualize BAR SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category ORDER BY product_category ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "product_category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_campaigns",
            "GROUP",
            "BY",
            "product_category",
            "ORDER",
            "BY",
            "product_category",
            "ASC"
        ],
        "choose_schema": "Table Products, columns = [*,product_id, product_category, product_name]@SEP@Table Mailshot_Campaigns, columns = [*,mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]",
        "choose_schema_rat_link": "products.product_category@SEP@mailshot_campaigns.product_category@SEP@products.product_id@SEP@products.product_name@SEP@order_items.product_id@SEP@mailshot_campaigns.mailshot_id@SEP@mailshot_campaigns.mailshot_name@SEP@mailshot_campaigns.mailshot_start_date@SEP@mailshot_campaigns.mailshot_end_date@SEP@mailshot_customers.mailshot_id@SEP@mailshot_customers.mailshot_customer_date"
    },
    {
        "nl_queries": "What is the relationship between the average and minimum age of captains in different classes ?",
        "VQL": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
        "db_id": "ship_1",
        "hardness": "Easy",
        "vis_query": "{'vis_part': 'Visualize SCATTER', 'data_part': {'sql_part': 'SELECT avg(age) , min(age) FROM captain GROUP BY CLASS', 'binning': ''}, 'VQL': 'Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS'}",
        "record_name": "2743",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 3
        },
        "question": "What is the relationship between the average and minimum age of captains in different classes ?",
        "question_toks": [
            "What",
            "is",
            "the",
            "relationship",
            "between",
            "the",
            "average",
            "and",
            "minimum",
            "age",
            "of",
            "captains",
            "in",
            "different",
            "classes",
            "?"
        ],
        "query": "Visualize SCATTER SELECT avg(age) , min(age) FROM captain GROUP BY CLASS",
        "query_toks": [
            "Visualize",
            "SCATTER",
            "SELECT",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            "FROM",
            "captain",
            "GROUP",
            "BY",
            "CLASS"
        ],
        "choose_schema": "Table captain, columns = [*,Captain_ID, Name, Ship_ID, age, Class, Rank]@SEP@Table Ship, columns = [*,Ship_ID, Name, Type, Built_Year, Class, Flag]",
        "choose_schema_rat_link": "captain.age@SEP@captain.captain_id@SEP@captain.class@SEP@ship.class"
    },
    {
        "nl_queries": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday .",
        "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "db_id": "hr_1",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': \"SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'\", 'binning': 'BIN HIRE_DATE BY WEEKDAY'}, 'VQL': \"Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY\"}",
        "record_name": "1771",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"2002-06-21\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": [
                19,
                "weekday"
            ],
            "vis": 0
        },
        "question": "For those employees who was hired before 2002-06-21 , draw a bar chart about the distribution of hire_date and the average of department_id bin hire_date by weekday .",
        "question_toks": [
            "For",
            "those",
            "employees",
            "who",
            "was",
            "hired",
            "before",
            "2002-06-21",
            ",",
            "draw",
            "a",
            "bar",
            "chart",
            "about",
            "the",
            "distribution",
            "of",
            "hire_date",
            "and",
            "the",
            "average",
            "of",
            "department_id",
            "bin",
            "hire_date",
            "by",
            "weekday",
            "."
        ],
        "query": "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "HIRE_DATE",
            ",",
            "AVG",
            "(",
            "DEPARTMENT_ID",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21'",
            "BIN",
            "HIRE_DATE",
            "BY",
            "WEEKDAY"
        ],
        "choose_schema": "Table employees, columns = [*,EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "choose_schema_rat_link": "employees.employee_id@SEP@job_history.employee_id@SEP@employees.hire_date@SEP@departments.department_id@SEP@departments.department_name@SEP@employees.department_id@SEP@job_history.department_id"
    },
    {
        "nl_queries": "Show me about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road in a bar chart , order by the X-axis in ascending .",
        "VQL": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "db_id": "university_basketball",
        "hardness": "Medium",
        "vis_query": "{'vis_part': 'Visualize BAR', 'data_part': {'sql_part': 'SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC', 'binning': ''}, 'VQL': 'Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC'}",
        "record_name": "3098@x_name@ASC",
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null,
            "binning": null,
            "vis": 0
        },
        "question": "Show me about the distribution of ACC_Road and the sum of Team_ID , and group by attribute ACC_Road in a bar chart , order by the X-axis in ascending .",
        "question_toks": [
            "Show",
            "me",
            "about",
            "the",
            "distribution",
            "of",
            "ACC_Road",
            "and",
            "the",
            "sum",
            "of",
            "Team_ID",
            ",",
            "and",
            "group",
            "by",
            "attribute",
            "ACC_Road",
            "in",
            "a",
            "bar",
            "chart",
            ",",
            "order",
            "by",
            "the",
            "X-axis",
            "in",
            "ascending",
            "."
        ],
        "query": "Visualize BAR SELECT ACC_Road , SUM(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "query_toks": [
            "Visualize",
            "BAR",
            "SELECT",
            "ACC_Road",
            ",",
            "SUM",
            "(",
            "Team_ID",
            ")",
            "FROM",
            "basketball_match",
            "GROUP",
            "BY",
            "ACC_Road",
            "ORDER",
            "BY",
            "ACC_Road",
            "ASC"
        ],
        "choose_schema": "Table basketball_match, columns = [*,Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "choose_schema_rat_link": "basketball_match.acc_regular_season@SEP@basketball_match.acc_percent@SEP@basketball_match.acc_home@SEP@basketball_match.acc_road@SEP@basketball_match.team_id@SEP@basketball_match.team_name"
    }
]